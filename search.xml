<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaGUI基础知识</title>
    <url>/2021/08/03/Java/JavaGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>Gui的核心技术：Swing AWT</p>
<pre><code>1. 界面不太美观
2. 需要jre环境
</code></pre>
<p>为什么学？</p>
<pre><code>1. 可以写出自己想要的一些小工具
2. 工作需要swing界面维护，使用概率很小
3. 了解MVC架构，了解监听
</code></pre>
<h2 id="2-AWT"><a href="#2-AWT" class="headerlink" title="2.AWT"></a>2.AWT</h2><h3 id="2-1-Awt-介绍"><a href="#2-1-Awt-介绍" class="headerlink" title="2.1 Awt 介绍"></a>2.1 Awt 介绍</h3><ol>
<li><p>包含了很多类和接口   </p>
</li>
<li><p>元素：窗口、按钮、文本框</p>
</li>
<li><p>java.awt包</p>
<p><img src="https://img-blog.csdnimg.cn/20200801214233821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center" alt="&lt;img src=&quot;C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200731170347773.png&quot; alt=&quot;image-20200731170347773&quot; style=&quot;zoom:50%;&quot; /&gt;"></p>
</li>
</ol>
<h3 id="2-2组件和容器"><a href="#2-2组件和容器" class="headerlink" title="2.2组件和容器"></a>2.2组件和容器</h3><h4 id="1-Frame"><a href="#1-Frame" class="headerlink" title="1. Frame"></a>1. Frame</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//GUI的第一个界面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFrame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Frame</span></span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame(<span class="string">&quot;我的第一个Java图像界面窗口&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需要设置可见性</span></span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置窗口大小</span></span><br><span class="line">        frame.setSize(<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置背景颜色</span></span><br><span class="line">        frame.setBackground(Color.GREEN);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//弹出的初始位置</span></span><br><span class="line">        frame.setLocation(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置大小固定</span></span><br><span class="line">        frame.setResizable(<span class="keyword">false</span>);<span class="comment">//默认true，可以改变</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行效果图</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20200801214258358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center" alt="&lt;img src=&quot;C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200731171746791.png&quot; alt=&quot;image-20200731171746791&quot; style=&quot;zoom:67%;&quot; /&gt;"></p>
<ul>
<li><strong>上面的代码的封装：</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFrame2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//展示多个窗口</span></span><br><span class="line">        MyFrame myFrame1 = <span class="keyword">new</span> MyFrame(<span class="number">100</span>,<span class="number">500</span>,<span class="number">200</span>,<span class="number">200</span>,Color.blue);</span><br><span class="line">        MyFrame myFrame2 = <span class="keyword">new</span> MyFrame(<span class="number">300</span>,<span class="number">500</span>,<span class="number">200</span>,<span class="number">200</span>,Color.yellow);</span><br><span class="line">        MyFrame myFrame3 = <span class="keyword">new</span> MyFrame(<span class="number">100</span>,<span class="number">700</span>,<span class="number">200</span>,<span class="number">200</span>,Color.red);</span><br><span class="line">        MyFrame myFrame4 = <span class="keyword">new</span> MyFrame(<span class="number">300</span>,<span class="number">700</span>,<span class="number">200</span>,<span class="number">200</span>,Color.MAGENTA);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span> <span class="keyword">extends</span> <span class="title">Frame</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> id = <span class="number">0</span>;<span class="comment">//可能存在多个窗口，计数器</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFrame</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> w,<span class="keyword">int</span> h,Color color)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;MyFrame+&quot;</span>+(++id));</span><br><span class="line">        setBackground(color);</span><br><span class="line">        setBounds(x,y,w,h);</span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200801214324667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center" alt="&lt;img src=&quot;C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200731173037241.png&quot; alt=&quot;image-20200731173037241&quot; style=&quot;zoom:67%;&quot; /&gt;"></p>
<h4 id="2-Panel-面板"><a href="#2-Panel-面板" class="headerlink" title="2. Panel(面板)"></a>2. Panel(面板)</h4><p>解决了关闭事件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Panel 可以看成是一个空间，但是不能单独存在</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPanel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame();</span><br><span class="line">        <span class="comment">//布局的概念</span></span><br><span class="line">        Panel panel = <span class="keyword">new</span> Panel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置布局</span></span><br><span class="line">        frame.setLayout(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//坐标</span></span><br><span class="line">        frame.setBounds(<span class="number">300</span>,<span class="number">300</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        frame.setBackground(<span class="keyword">new</span> Color(<span class="number">40</span>,<span class="number">161</span>,<span class="number">35</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//panel设置坐标，相对于frame</span></span><br><span class="line">        panel.setBounds(<span class="number">50</span>,<span class="number">50</span>,<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line">        panel.setBackground(<span class="keyword">new</span> Color(<span class="number">193</span>,<span class="number">15</span>,<span class="number">60</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//frame.add(panel)</span></span><br><span class="line">        frame.add(panel);</span><br><span class="line"></span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听事件，监听窗口关闭时间，System.exit(0）</span></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line">            <span class="comment">//窗口点击关闭的时候需要做的事情</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//结束程序</span></span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200801214341692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center" alt="&lt;img src=&quot;C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200731174724356.png&quot; alt=&quot;image-20200731174724356&quot; style=&quot;zoom:67%;&quot; /&gt;"></p>
<h4 id="3-布局管理器"><a href="#3-布局管理器" class="headerlink" title="3.布局管理器"></a>3.布局管理器</h4><ul>
<li><p><strong>流式布局</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFlowLayout</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组建 按钮</span></span><br><span class="line">        Button button1 = <span class="keyword">new</span> Button(<span class="string">&quot;button1&quot;</span>);</span><br><span class="line">        Button button2 = <span class="keyword">new</span> Button(<span class="string">&quot;button2&quot;</span>);</span><br><span class="line">        Button button3 = <span class="keyword">new</span> Button(<span class="string">&quot;button3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置为流式布局</span></span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> FlowLayout(FlowLayout.LEFT));<span class="comment">//靠左</span></span><br><span class="line">        <span class="comment">//frame.setLayout(new FlowLayout(FlowLayout.RIGHT));//靠右</span></span><br><span class="line"></span><br><span class="line">        frame.setSize(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把按钮添加上去</span></span><br><span class="line">        frame.add(button1);</span><br><span class="line">        frame.add(button2);</span><br><span class="line">        frame.add(button3);</span><br><span class="line"></span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200801214357835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
</li>
</ul>
<ul>
<li><strong>东西南北中</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBorderLayout</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame(<span class="string">&quot;TestBorderLayout&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Button east = <span class="keyword">new</span> Button(<span class="string">&quot;East&quot;</span>);</span><br><span class="line">        Button west = <span class="keyword">new</span> Button(<span class="string">&quot;West&quot;</span>);</span><br><span class="line">        Button south = <span class="keyword">new</span> Button(<span class="string">&quot;south&quot;</span>);</span><br><span class="line">        Button north = <span class="keyword">new</span> Button(<span class="string">&quot;north&quot;</span>);</span><br><span class="line">        Button center = <span class="keyword">new</span> Button(<span class="string">&quot;center&quot;</span>);</span><br><span class="line"></span><br><span class="line">        frame.add(east,BorderLayout.EAST);</span><br><span class="line">        frame.add(west,BorderLayout.WEST);</span><br><span class="line">        frame.add(south,BorderLayout.SOUTH);</span><br><span class="line">        frame.add(north,BorderLayout.NORTH);</span><br><span class="line">        frame.add(center,BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line">        frame.setSize(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200801214412401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<ul>
<li><strong>表格布局</strong> (Grid)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGridLayout</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame(<span class="string">&quot;TestGridLayout&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Button btn1 = <span class="keyword">new</span> Button(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line">        Button btn2 = <span class="keyword">new</span> Button(<span class="string">&quot;btn2&quot;</span>);</span><br><span class="line">        Button btn3 = <span class="keyword">new</span> Button(<span class="string">&quot;btn3&quot;</span>);</span><br><span class="line">        Button btn4= <span class="keyword">new</span> Button(<span class="string">&quot;btn4&quot;</span>);</span><br><span class="line">        Button btn5 = <span class="keyword">new</span> Button(<span class="string">&quot;btn5&quot;</span>);</span><br><span class="line">        Button btn6 = <span class="keyword">new</span> Button(<span class="string">&quot;btn6&quot;</span>);</span><br><span class="line"></span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">3</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        frame.add(btn1);</span><br><span class="line">        frame.add(btn2);</span><br><span class="line">        frame.add(btn3);</span><br><span class="line">        frame.add(btn4);</span><br><span class="line">        frame.add(btn5);</span><br><span class="line">        frame.add(btn6);</span><br><span class="line"></span><br><span class="line">        frame.pack();<span class="comment">//Java函数  自动排列</span></span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200801214434809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<p><strong>总结：</strong></p>
<pre><code>1. Frame是一个顶级窗口
2. Panel无法单独显示，必须添加到某个容器中
3. 布局管理器
    1. 流式
       2. 东西南北中
       3. 表格
4. 大小，定位，背景颜色，监听
</code></pre>
<h4 id="2-3-事件监听"><a href="#2-3-事件监听" class="headerlink" title="2.3. 事件监听"></a>2.3. 事件监听</h4><p><strong>事件监听：</strong>当某个事情发生的时候，干什么？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActionEvent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//按下按钮，触发一些事件</span></span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame();</span><br><span class="line">        Button button = <span class="keyword">new</span> Button();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为，addActionListener()需要ActionListener，所以我们需要构造一个ActionListener</span></span><br><span class="line">        MyActionLister myActionLister = <span class="keyword">new</span> MyActionLister();</span><br><span class="line">        button.addActionListener(myActionLister);</span><br><span class="line"></span><br><span class="line">        frame.add(button,BorderLayout.CENTER);</span><br><span class="line">        frame.pack();</span><br><span class="line">        windowClose(frame);<span class="comment">//关闭窗口</span></span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭窗体的事件</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">windowClose</span><span class="params">(Frame frame)</span></span>&#123;</span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyActionLister</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;aaaaa&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>文本框监听事件</strong></p>
<p>当文本框输入内容后 按 Enter键后控制台输出文本框的内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestText01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//启动</span></span><br><span class="line">        MyFrame myFrame = <span class="keyword">new</span> MyFrame();</span><br><span class="line">        windowClose(myFrame);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭窗口的事件</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">windowClose</span><span class="params">(Frame frame)</span></span>&#123;</span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span> <span class="keyword">extends</span> <span class="title">Frame</span></span>&#123;</span><br><span class="line">    Frame frame = <span class="keyword">new</span> Frame();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFrame</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TextField textField = <span class="keyword">new</span> TextField();</span><br><span class="line">        add(textField);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听这个文本框输入的文字</span></span><br><span class="line">        MyActionListner myActionListner = <span class="keyword">new</span> MyActionListner();</span><br><span class="line">        <span class="comment">//按下Enter触发事件</span></span><br><span class="line">        textField.addActionListener(myActionListner);</span><br><span class="line">        pack();</span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyActionListner</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        TextField field = (TextField) e.getSource();<span class="comment">//获得一些资源  返回一个对象</span></span><br><span class="line">        System.out.println(field.getText());<span class="comment">//获得文本框中的文本</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200801214455741.png#pic_center"></p>
<p><img src="https://img-blog.csdnimg.cn/20200801214509118.png#pic_center"></p>
<h4 id="2-4-画笔-paint"><a href="#2-4-画笔-paint" class="headerlink" title="2.4 画笔(paint)"></a>2.4 画笔(paint)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPaint</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyPaint().loadFrame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPaint</span> <span class="keyword">extends</span> <span class="title">Frame</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadFrame</span><span class="params">()</span></span>&#123;</span><br><span class="line">        setBounds(<span class="number">200</span>,<span class="number">200</span>,<span class="number">600</span>,<span class="number">500</span>);</span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//画笔</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span></span>&#123;</span><br><span class="line">        <span class="comment">//画笔需要有颜色，可以画画</span></span><br><span class="line">        <span class="comment">//g.setColor(Color.red);</span></span><br><span class="line">        g.drawOval(<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">        g.fillOval(<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>);<span class="comment">//实心圆</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//g.setColor(Color.GREEN);</span></span><br><span class="line">        g.fillRect(<span class="number">150</span>,<span class="number">200</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//养成习惯，画笔用完，将他还原为最初的颜色</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-5-鼠标监听"><a href="#2-5-鼠标监听" class="headerlink" title="2.5 鼠标监听"></a>2.5 鼠标监听</h4><p>目的：实现鼠标画画</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseEvent;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.ListIterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标监听事件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMouseListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyFrame1(<span class="string">&quot;drawing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自己的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFrame1</span> <span class="keyword">extends</span> <span class="title">Frame</span></span>&#123;</span><br><span class="line">    <span class="comment">//画画需要画笔，需要监听鼠标当前的位置，需要集合来存储这个点</span></span><br><span class="line">    ArrayList points;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFrame1</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(title);</span><br><span class="line">        setBounds(<span class="number">200</span>,<span class="number">200</span>,<span class="number">400</span>,<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存鼠标点击的点</span></span><br><span class="line">        points = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//鼠标监听器，针对这个窗口</span></span><br><span class="line">        <span class="keyword">this</span>.addMouseListener(<span class="keyword">new</span> MyMouseListener());</span><br><span class="line"></span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span></span>&#123;</span><br><span class="line">        <span class="comment">//画画，监听鼠标的事件</span></span><br><span class="line">        Iterator Iterator = points.listIterator();</span><br><span class="line">        <span class="keyword">while</span>(Iterator.hasNext())&#123;</span><br><span class="line">            Point point = (Point) Iterator.next();</span><br><span class="line">            g.setColor(Color.BLUE);</span><br><span class="line">            g.fillOval(point.x,point.y,<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加一个点到界面上</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPaint</span><span class="params">(Point point)</span></span>&#123;</span><br><span class="line">        points.add(point);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//适配器模式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMouseListener</span> <span class="keyword">extends</span> <span class="title">MouseAdapter</span></span>&#123;</span><br><span class="line">        <span class="comment">//鼠标  按下，弹起，按住不放</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mousePressed</span><span class="params">(MouseEvent e)</span></span>&#123;</span><br><span class="line">            MyFrame1 myFrame1 = (MyFrame1) e.getSource();</span><br><span class="line">            <span class="comment">//点击的时候，产生一个点</span></span><br><span class="line">            myFrame1.addPaint(<span class="keyword">new</span> Point(e.getX(),e.getY()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//每次点击鼠标都要重新画一遍</span></span><br><span class="line">            myFrame1.repaint();<span class="comment">//刷新</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200801214530419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<h4 id="2-6-窗口监听"><a href="#2-6-窗口监听" class="headerlink" title="2.6 窗口监听"></a>2.6 窗口监听</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestWindow</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> WindowFrame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WindowFrame</span> <span class="keyword">extends</span> <span class="title">Frame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WindowFrame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setBackground(Color.blue);</span><br><span class="line">        setBounds(<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//addWindowFocusListener(new MyWindowListenter());</span></span><br><span class="line">        <span class="keyword">this</span>.addWindowListener(</span><br><span class="line">                <span class="comment">//匿名内部类</span></span><br><span class="line">                <span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line">                    <span class="comment">//关闭窗口</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;windowClosing&quot;</span>);</span><br><span class="line">                        System.exit(<span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//激活窗口</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowActivated</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;windowActivated&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">MyWindowListenter</span> <span class="keyword">extends</span> <span class="title">WindowAdapter</span> </span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">                setVisible(<span class="keyword">false</span>);<span class="comment">//隐藏窗口，通过按钮隐藏窗口</span></span><br><span class="line">                System.exit(<span class="number">0</span>);<span class="comment">//正常退出</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-7-键盘监听"><a href="#2-7-键盘监听" class="headerlink" title="2.7 键盘监听"></a>2.7 键盘监听</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestKeyListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> KeyFrame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeyFrame</span> <span class="keyword">extends</span> <span class="title">Frame</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KeyFrame</span><span class="params">()</span></span>&#123;</span><br><span class="line">        setBounds(<span class="number">1</span>,<span class="number">2</span>,<span class="number">300</span>,<span class="number">400</span>);</span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.addKeyListener(<span class="keyword">new</span> KeyAdapter() &#123;</span><br><span class="line">            <span class="comment">//键盘按下</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//获得键盘按下的键是那个键</span></span><br><span class="line">                <span class="keyword">int</span> keyCode = e.getKeyCode();<span class="comment">//获得当前键盘的码</span></span><br><span class="line">                <span class="keyword">if</span> (keyCode == KeyEvent.VK_UP)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;你按下了上键&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-Swing"><a href="#3-Swing" class="headerlink" title="3. Swing"></a>3. Swing</h2><h3 id="3-1-窗口，面板"><a href="#3-1-窗口，面板" class="headerlink" title="3.1 窗口，面板"></a>3.1 窗口，面板</h3><ul>
<li><strong>JFrame</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mport javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JFrameDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//init()；初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JFrame jframe = <span class="keyword">new</span> JFrame(<span class="string">&quot;这是一个JFrame窗口&quot;</span>);</span><br><span class="line">        jframe.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        jframe.setBounds(<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">        jframe.setBackground(Color.cyan);</span><br><span class="line">        <span class="comment">//设置文字 JLable</span></span><br><span class="line">        JLabel label = <span class="keyword">new</span> JLabel(<span class="string">&quot;你好你好你好你好&quot;</span>);</span><br><span class="line"></span><br><span class="line">        jframe.add(label);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭事件</span></span><br><span class="line">        jframe.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//建立一个窗口</span></span><br><span class="line">        <span class="keyword">new</span> JFrameDemo().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>标签居中</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JFrameDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyJfram2().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyJfram2</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setBounds(<span class="number">10</span>,<span class="number">10</span>,<span class="number">200</span>,<span class="number">300</span>);</span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        JLabel label = <span class="keyword">new</span> JLabel(<span class="string">&quot;你好你好你好你好&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.add(label);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让文本标签居中，设置水平对齐</span></span><br><span class="line">        label.setHorizontalAlignment(SwingConstants.CENTER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得一个容器</span></span><br><span class="line">        Container container = <span class="keyword">this</span>.getContentPane();</span><br><span class="line">        container.setBackground(Color.YELLOW);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200801214556821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<h3 id="3-2-弹窗-Dialog"><a href="#3-2-弹窗-Dialog" class="headerlink" title="3.2 弹窗(Dialog)"></a>3.2 弹窗(Dialog)</h3><p>用来被弹出，默认有关闭事件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主窗口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DialogDemo</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DialogDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">700</span>,<span class="number">500</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//JFrame 放东西，容器</span></span><br><span class="line">        Container container = <span class="keyword">this</span>.getContentPane();</span><br><span class="line">        <span class="comment">//绝对布局</span></span><br><span class="line">        container.setLayout(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//按钮</span></span><br><span class="line">        JButton button = <span class="keyword">new</span> JButton(<span class="string">&quot;点击创建一个窗口&quot;</span>);<span class="comment">//创建</span></span><br><span class="line">        button.setBounds(<span class="number">30</span>,<span class="number">30</span>,<span class="number">200</span>,<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//点击这个按钮的时候，弹出一个窗口</span></span><br><span class="line">        button.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//弹窗</span></span><br><span class="line">                <span class="keyword">new</span> MyDialogDemo();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        container.add(button);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> DialogDemo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//弹窗的窗口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDialogDemo</span> <span class="keyword">extends</span> <span class="title">JDialog</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDialogDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        <span class="comment">//this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span></span><br><span class="line"></span><br><span class="line">        Container container = <span class="keyword">this</span>.getContentPane();</span><br><span class="line">        container.setLayout(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        container.add(<span class="keyword">new</span> Label(<span class="string">&quot;你好你好你好&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-标签"><a href="#3-3-标签" class="headerlink" title="3.3 标签"></a>3.3 标签</h3><ul>
<li><strong>Lable</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IconDemo</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">Icon</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> height;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IconDemo</span><span class="params">()</span></span>&#123;<span class="comment">//无参构造</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IconDemo</span><span class="params">(<span class="keyword">int</span> width,<span class="keyword">int</span> height)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        IconDemo iconDemo = <span class="keyword">new</span> IconDemo(<span class="number">15</span>, <span class="number">15</span>);</span><br><span class="line">        <span class="comment">//图标放在标签上，也可以放在按钮上</span></span><br><span class="line">        JLabel label = <span class="keyword">new</span> JLabel(<span class="string">&quot;icontest&quot;</span>,iconDemo,SwingConstants.CENTER);</span><br><span class="line"></span><br><span class="line">        Container container = getContentPane();</span><br><span class="line">        container.add(label);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> IconDemo().init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paintIcon</span><span class="params">(Component c, Graphics g, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        g.fillOval(x,y,width,height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIconWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIconHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200801214615803.png#pic_center"></p>
<h3 id="3-4-面板"><a href="#3-4-面板" class="headerlink" title="3.4 面板"></a>3.4 面板</h3><ul>
<li><strong>JPanel</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JPanelDemo</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JPanelDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Container container = <span class="keyword">this</span>.getContentPane();</span><br><span class="line"></span><br><span class="line">        container.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">2</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">10</span>));<span class="comment">//后面参数是间距</span></span><br><span class="line"></span><br><span class="line">        JPanel panel1 = <span class="keyword">new</span> JPanel(<span class="keyword">new</span> GridLayout(<span class="number">1</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        panel1.add(<span class="keyword">new</span> JButton(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        panel1.add(<span class="keyword">new</span> JButton(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        panel1.add(<span class="keyword">new</span> JButton(<span class="string">&quot;1&quot;</span>));</span><br><span class="line"></span><br><span class="line">        container.add(panel1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">500</span>, <span class="number">500</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> JPanelDemo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200801214630405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<ul>
<li><strong>JScorll (滚动条)</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JScrollDemo</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JScrollDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Container container = <span class="keyword">this</span>.getContentPane();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文本域</span></span><br><span class="line">        JTextArea jTextArea = <span class="keyword">new</span> JTextArea(<span class="number">20</span>, <span class="number">50</span>);</span><br><span class="line">        jTextArea.setText(<span class="string">&quot;欢迎学习java.......&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Scroll面板</span></span><br><span class="line">        JScrollPane jScrollPane = <span class="keyword">new</span> JScrollPane();</span><br><span class="line">        container.add(jScrollPane);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setBounds(<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">150</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> JScrollDemo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-5-按钮"><a href="#3-5-按钮" class="headerlink" title="3.5 按钮"></a>3.5 按钮</h3><ul>
<li>普通按钮</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JButtonDemo01</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JButtonDemo01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Container container = <span class="keyword">this</span>.getContentPane();</span><br><span class="line"></span><br><span class="line">        JButton button = <span class="keyword">new</span> JButton();</span><br><span class="line">        button.setToolTipText(<span class="string">&quot;按钮&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//add</span></span><br><span class="line">        container.add(button);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">500</span>, <span class="number">300</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> JButtonDemo01();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>单选按钮</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JButtonDemo01</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JButtonDemo01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Container container = <span class="keyword">this</span>.getContentPane();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//单选框</span></span><br><span class="line">        JRadioButton jRadioBUtton1 = <span class="keyword">new</span> JRadioButton(<span class="string">&quot;JRadioBUtton1&quot;</span>);</span><br><span class="line">        JRadioButton jRadioBUtton2 = <span class="keyword">new</span> JRadioButton(<span class="string">&quot;JRadioBUtton2&quot;</span>);</span><br><span class="line">        JRadioButton jRadioBUtton3 = <span class="keyword">new</span> JRadioButton(<span class="string">&quot;JRadioBUtton3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//由于单选框只能选择一个，分组</span></span><br><span class="line">        <span class="comment">//一个group中只能选择一个</span></span><br><span class="line">        ButtonGroup group = <span class="keyword">new</span> ButtonGroup();</span><br><span class="line">        group.add(jRadioBUtton1);</span><br><span class="line">        group.add(jRadioBUtton2);</span><br><span class="line">        group.add(jRadioBUtton3);</span><br><span class="line"></span><br><span class="line">        container.add(jRadioBUtton1, BorderLayout.CENTER);</span><br><span class="line">        container.add(jRadioBUtton2, BorderLayout.NORTH);</span><br><span class="line">        container.add(jRadioBUtton3, BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">500</span>, <span class="number">300</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> JButtonDemo01();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200801214655129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<ul>
<li>复选框</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JButtonDemo01</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JButtonDemo01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Container container = <span class="keyword">this</span>.getContentPane();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//多选框</span></span><br><span class="line">        JCheckBox checkBox01 = <span class="keyword">new</span> JCheckBox(<span class="string">&quot;checkBox01&quot;</span>);</span><br><span class="line">        JCheckBox checkBox02 = <span class="keyword">new</span> JCheckBox(<span class="string">&quot;checkBox02&quot;</span>);</span><br><span class="line"></span><br><span class="line">        container.add(checkBox01, BorderLayout.NORTH);</span><br><span class="line">        container.add(checkBox02, BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">500</span>, <span class="number">300</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> JButtonDemo01();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200801214711425.png#pic_center"></p>
<h3 id="3-6-列表"><a href="#3-6-列表" class="headerlink" title="3.6 列表"></a>3.6 列表</h3><ul>
<li>下拉框</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestComboboxDemo01</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestComboboxDemo01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Container container = <span class="keyword">this</span>.getContentPane();</span><br><span class="line"></span><br><span class="line">        JComboBox status = <span class="keyword">new</span> JComboBox();</span><br><span class="line"></span><br><span class="line">        status.addItem(<span class="keyword">null</span>);</span><br><span class="line">        status.addItem(<span class="string">&quot;正在上映&quot;</span>);</span><br><span class="line">        status.addItem(<span class="string">&quot;已下架&quot;</span>);</span><br><span class="line">        status.addItem(<span class="string">&quot;即将上映&quot;</span>);</span><br><span class="line"></span><br><span class="line">        container.add(status);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">500</span>, <span class="number">350</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> TestComboboxDemo01();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200801214730110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<ul>
<li>列表框</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestComboboxDemo02</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestComboboxDemo02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Container container = <span class="keyword">this</span>.getContentPane();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成列表的内容</span></span><br><span class="line">        String[] contents = &#123;<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//列表中需要放入内容</span></span><br><span class="line">        JList jList = <span class="keyword">new</span> JList(contents);</span><br><span class="line">        container.add(jList);</span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">500</span>, <span class="number">350</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> TestComboboxDemo02();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200801214758468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<ul>
<li><p>应用场景</p>
<p>1.选择地区，或者一些单个选项。</p>
<p>列表就是用来展示信息，一般是动态扩容的。</p>
</li>
</ul>
<h3 id="3-7-文本框"><a href="#3-7-文本框" class="headerlink" title="3.7 文本框"></a>3.7 文本框</h3><ul>
<li>文本框</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.border.Border;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTextDemo01</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestTextDemo01</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Container container = <span class="keyword">this</span>.getContentPane();</span><br><span class="line"></span><br><span class="line">        JTextField textField1 = <span class="keyword">new</span> JTextField(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        JTextField textField2 = <span class="keyword">new</span> JTextField(<span class="string">&quot;world&quot;</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        container.add(textField1,BorderLayout.NORTH);</span><br><span class="line">        container.add(textField2,BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">500</span>,<span class="number">350</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> TestTextDemo01();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200801214817858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<ul>
<li>密码框</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.border.Border;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTextDemo01</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestTextDemo01</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Container container = <span class="keyword">this</span>.getContentPane();</span><br><span class="line"></span><br><span class="line">        JPasswordField jPasswordField = <span class="keyword">new</span> JPasswordField();</span><br><span class="line">        jPasswordField.setEchoChar(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        container.add(jPasswordField);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">500</span>,<span class="number">350</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> TestTextDemo01();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200801214835214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<ul>
<li>文本域</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.border.Border;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTextDemo01</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestTextDemo01</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Container container = <span class="keyword">this</span>.getContentPane();</span><br><span class="line"></span><br><span class="line">        JTextArea textArea = <span class="keyword">new</span> JTextArea(<span class="number">20</span>,<span class="number">50</span>);</span><br><span class="line">        textArea.setText(<span class="string">&quot;你好你好你好你好&quot;</span>);</span><br><span class="line"></span><br><span class="line">        container.add(textArea);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">500</span>,<span class="number">350</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> TestTextDemo01();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200801214851513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"><br><a href="https://www.bilibili.com/video/BV1DJ411B75F?p=1">本章知识点学习自</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中IO流操作</title>
    <url>/2021/08/03/Java/Java%E4%B8%ADIO%E6%B5%81%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>程序运行期间，可能需要从外部的存储媒介或其他程序中读入需要的数据，这就需要使用输入流对象。输入流的指向称作它的源，程序从指向源的输入流中读取源中的数据。另一方面，程序在处理数据后，可能需要将处理的结果写入到永久的存储媒介中或传递给其他的应用程序，这就需要使用输出流对象。输出源的指向称作它的目的地，程序通过向输出流中写入数据把数据传送到目的地。</p>
<p><img src="https://img-blog.csdnimg.cn/20201115141743113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/20201115141755865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h3 id="1-File-类"><a href="#1-File-类" class="headerlink" title="1. File 类"></a>1. File 类</h3><p>File 类的对象主要用来获取文件本身的一些信息，如文件所在的目录，长度，读写权限等，不涉及对文件的读写操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File(String filename);		-- filename 是文件名字</span><br><span class="line">File(String directoryPath, String filename);		-- directoryPath 是文件的路径</span><br><span class="line">File(File f, String filename);		-- f 是指定一个目录的文件</span><br></pre></td></tr></table></figure>

<h4 id="1-1-文件的属性"><a href="#1-1-文件的属性" class="headerlink" title="1.1 文件的属性"></a>1.1 文件的属性</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span>：获取文件的名字</span></span><br><span class="line"><span class="function">2. <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canRead</span><span class="params">()</span>：判断文件是否可读的</span></span><br><span class="line"><span class="function">3. <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWrite</span><span class="params">()</span>：判断文件是否可被写入</span></span><br><span class="line"><span class="function">4. <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span>：判断文件是否存在</span></span><br><span class="line"><span class="function">5. <span class="keyword">public</span> <span class="keyword">long</span> <span class="title">length</span><span class="params">()</span>：获取文件的长度,单位是字节</span></span><br><span class="line"><span class="function">6. <span class="keyword">public</span> String <span class="title">getAbsolutePath</span><span class="params">()</span>：获取文件的绝对路径</span></span><br><span class="line"><span class="function">7. <span class="keyword">public</span> String <span class="title">getParent</span><span class="params">()</span>：获取文件的父目录</span></span><br><span class="line"><span class="function">8. <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFile</span><span class="params">()</span>：判断文件是否是一个普通文件，而不是目录</span></span><br><span class="line"><span class="function">9. <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDirectory</span><span class="params">()</span>：判断一个文件是否是一个目录</span></span><br><span class="line"><span class="function">10. <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHidden</span><span class="params">()</span>：判断文件是否是隐藏文件</span></span><br><span class="line"><span class="function">11. <span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lastModified</span><span class="params">()</span>：获取文件最后修改的时间,时间是从 1979-01-01：00：00：00 到最后修改时间的毫秒数</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">创建文件 File.<span class="title">createNewFile</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-目录"><a href="#1-2-目录" class="headerlink" title="1.2 目录"></a>1.2 目录</h4><ol>
<li><p><strong>创建目录</strong></p>
<p>File 对象调用方法：public boolean mkdir() 创建一个目录，如果创建成功返回 true，否则返回 false (如果该目录已经存在将返回 false)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;D:/bbb&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> mkdir = file1.mkdir();</span><br><span class="line">        System.out.println(mkdir);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>列出目录中的文件</p>
<p>如果 File 对象是一个目录，该对象可以调用下面方法列出该目录下的文件和子目录。</p>
<ul>
<li>public String[] list()：用字符串形式返回目录下的全部文件</li>
<li>public File[] listFiles()：用 File 对象形式返回目录下的全部文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;D:/aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : file1.list()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件夹：&quot;</span> + s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (File s : file1.listFiles()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件夹：&quot;</span> + s.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    文件夹：a</span><br><span class="line">    文件夹：b</span><br><span class="line">    文件夹：c</span><br><span class="line">    文件夹：a</span><br><span class="line">    文件夹：b</span><br><span class="line">    文件夹：c</span><br></pre></td></tr></table></figure></li>
<li><p>文件的创建与删除</p>
<p>在 new File(D:/aa.txt) 创建一个文件对象后，如果括号中指定的 aa.txt 文件，就会调用方法 public boolean createNewFile();，然后再指定文件夹创建文件。</p>
<p>删除文件：文件对象.delete();</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;D:/bbb.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!file1.exists())&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                file1.createNewFile();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> delete = file1.delete();</span><br><span class="line">        System.out.println(delete);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>运行可执行文件</p>
<p>执行一个可执行文件，需要用到 java.lang 包中的 Runtime 类。</p>
<ol>
<li>声明 Runtime 类的对象 ec</li>
<li>调用该类的 getRuntime() 方法</li>
<li>ec 调用 exce(String command) 方法执行</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Runtime ec = Runtime.getRuntime();</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;E:/java/IntelliJ IDEA 2018.3.5/bin&quot;</span>, <span class="string">&quot;idea.exe&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ec.exec(file.getAbsolutePath());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-字节流与字符流"><a href="#2-字节流与字符流" class="headerlink" title="2. 字节流与字符流"></a>2. 字节流与字符流</h3><h4 id="2-1-InputStream类-和-OutputStream-类"><a href="#2-1-InputStream类-和-OutputStream-类" class="headerlink" title="2.1 InputStream类 和 OutputStream 类"></a>2.1 InputStream类 和 OutputStream 类</h4><blockquote>
<p>InputStream 类提供 read 方法以字节为单位顺序地读取源中的数据，只要不关闭流，每次调用 read 方法就顺序地读取源中的其余内容，直到源的末尾或输入流被关闭。</p>
</blockquote>
<p><strong>InputStream 类常用方法：</strong></p>
<ul>
<li>int read()：输入流调用该方法从源中读取单个字节的数据，该方法返回字节值(0~255之间的一个整数)，如果未读出字节就返回 -1</li>
<li>int read(byte b[])：输入流调用该方法从源中试图读取 b.length 个字节到 b 中，返回实际读取的字节数目，如果到达文件的末尾，则返回 -1</li>
<li>int read(byte b[], int off, int len)：输入流调用该方法从源中试图读取 len 个字节到 b 中，并返回实际读取的字节数目。 如果到达文件的末尾，则返回 -1，参数 off 指定从字节数组的某个位置开始存放读取的数据</li>
<li>void close()：输入流调用该方法关闭输入流</li>
<li>long skip(long numBytes)：输入流调用该方法跳过 numBytes 个字节，并返回实际跳过的字节数目。</li>
</ul>
<blockquote>
<p>OutputStream 流以字节为单位顺序地写文件，只要不关闭流，每次调用 write 方法就顺序地向目的地写入内容，直到流被关闭。</p>
</blockquote>
<p><strong>OutputStream 类常用方法：</strong></p>
<ul>
<li>void write(int n)：输出流调用该方法向输出流写入单个字节。</li>
<li>void write(byte b[])：输出流调用该方法向输出流写入一个字节数组</li>
<li>void write(byte b[], int off, int len)：从给定字节数组中起始与偏移量 off 处取 len 个字节写入到输出流。</li>
<li>void close()：关闭输出流</li>
</ul>
<h4 id="2-2-Reader类-与-Writer-类"><a href="#2-2-Reader类-与-Writer-类" class="headerlink" title="2.2 Reader类 与 Writer 类"></a>2.2 Reader类 与 Writer 类</h4><blockquote>
<p>Reader 类提供的 read 方法以字符为单位顺序地读取源中的数据，只要不关闭源，每次调用 read 方法就顺序地读取源中的区域内容，知道源的末尾或输入流被关闭</p>
</blockquote>
<p><strong>Reader 常用的方法：</strong></p>
<ul>
<li>int read()：输入流调用该方法从源中读取一个字符，该方法返回一个整数(0~65536之间的一个整数，Unicode 字符值)，如果未读出字符就返回 -1</li>
<li>int read(char b[])：输入流调用该方法从源中读取 b.length 个字符到字符数组 b 中，返回实际读取的字符数目。如果到达文件的末尾，则返回 -1</li>
<li>int read(char b[], int off, int len)：输入流调用该方法从源中读取 len 个字符并存到字符数组 b 中，返回实际读取的字符数目，如果到达文件的末尾，返回 -1，其中 off 参数指定 read 方法在字符数组 b 中的什么地方存放数据</li>
<li>long skip(long numBytes)：输入流调用该方法跳过 numBytes 个字符，并返回实际跳过的字符数目</li>
</ul>
<blockquote>
<p>Writer 流以字符为单位顺序地写文件，只要不关闭流，每次调用 write 方法就顺序地向目的地写入内容，知道流被关闭</p>
</blockquote>
<p><strong>Writer 常用的方法：</strong></p>
<ul>
<li>void write(int n)：向输入流写入一个字符</li>
<li>void write(byte b[])：向输入流写入一个字符数组</li>
<li>void write(byte b[], int off, int length)：从给定字符数组中起始于偏移量 off 处取 len 个字符写到输出流</li>
<li>void close()：关闭输出流</li>
</ul>
<h3 id="3-文件字节流"><a href="#3-文件字节流" class="headerlink" title="3. 文件字节流"></a>3. 文件字节流</h3><h4 id="3-1-文件字节输入流"><a href="#3-1-文件字节输入流" class="headerlink" title="3.1 文件字节输入流"></a>3.1 文件字节输入流</h4><p>使用 FileInputStream 可以以字节为单位去读文件。</p>
<p>构造方法：</p>
<ul>
<li>FileInputStream(String name)：使用给定的文件名 name 创建一个 FileInputStream 对象，name是输入流的源</li>
<li>FileInputStream(File file)：使用 File 对象创建 FileInputStream 对象，file 为输入流的源</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] a = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">100</span>];</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:/test.txt&quot;</span>);</span><br><span class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        <span class="keyword">while</span> ((n = in.read(a, <span class="number">0</span>, <span class="number">100</span>)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            String string = <span class="keyword">new</span> String(a, <span class="number">0</span>, n);</span><br><span class="line">            System.out.println(string);</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    读出指定文件 test.txt 中的内容显示到控制台</span><br></pre></td></tr></table></figure>

<h4 id="3-2-文件字节输出流"><a href="#3-2-文件字节输出流" class="headerlink" title="3.2 文件字节输出流"></a>3.2 文件字节输出流</h4><p>使用 FileOutputStream 类来创建指向该文件的文件字节输出流。</p>
<p>构造方法：</p>
<ul>
<li>FileOutputStream(String name)：使用给定的文件名 name 作为目的地创建一个 FileOutputStream 对象</li>
<li>FileOutputStream(File file)：使用 File 对象作为目的地创建 FileOutputStream 对象</li>
</ul>
<blockquote>
<p>FileOutputStream 流的目的地是文件，所以文件输出流调用 write(byte b[])方法把字节写入到文件。</p>
<p>注意：如果 FileOutputStream 流要写入的文件不存在，该流将首先创建要写的文件，然后再向文件写入内容；如果要写的文件存在，则刷新文件中的内容，然后再顺序地向文件写入内容。</p>
</blockquote>
<ul>
<li>FileOutputStream(String name，boolean append)</li>
<li>FileOutputStream(File file，boolean append)<ul>
<li>如果append取值为true，不会刷新文件，追加再文件内容的末尾，为false，会刷新文件以后的内容</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] a = <span class="string">&quot;123456&quot;</span>.getBytes();</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:/test.txt&quot;</span>);</span><br><span class="line">        FileOutputStream out = <span class="keyword">new</span> FileOutputStream(file,<span class="keyword">true</span>);</span><br><span class="line">        out.write(a);   <span class="comment">//将 a 数组的内容追加的指定的文件后面</span></span><br><span class="line">        out.write(a,<span class="number">1</span>,<span class="number">2</span>);    <span class="comment">//将数组 a 中从 下表为1 ，2个长度的字节追加到指定文件后面</span></span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-文件字符流"><a href="#4-文件字符流" class="headerlink" title="4. 文件字符流"></a>4. 文件字符流</h3><p>一个汉字在文件中是占用2个字节，如果使用字节流就会出现乱码的现象。</p>
<p>字符输入流和输出流的 read 和 writer 方法使用字符数组读写数据，即以字符为单位处理数据。</p>
<p>FileReader 和 FileWriter 是 Reader 和 Writer 的子类，构造方法：</p>
<ul>
<li>FileReader(String filename)</li>
<li>FileReader(File filename)</li>
<li>FileWriter(String filename)</li>
<li>FileWriter(File filename)</li>
<li>FileWriter(String filename, boolean append)</li>
<li>FileWriter(File filename boolean append)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String content = <span class="string">&quot;我是学生&quot;</span>;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:/test.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span>[] a = content.toCharArray();</span><br><span class="line">        FileWriter out = <span class="keyword">new</span> FileWriter(file, <span class="keyword">true</span>);</span><br><span class="line">        out.write(a, <span class="number">0</span>, a.length);</span><br><span class="line">        out.close();</span><br><span class="line">        </span><br><span class="line">        FileReader in = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">        StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">char</span>[] b = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">int</span> n = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((n = in.read(b, <span class="number">0</span>, <span class="number">10</span>)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            String s = <span class="keyword">new</span> String(b, <span class="number">0</span>, n);</span><br><span class="line">            stringBuffer.append(s);</span><br><span class="line">            System.out.println(n);</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">        System.out.println(stringBuffer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：对于 Writer 流，writer 方法将数据首先写入到缓冲区，每当缓冲区溢出时，缓冲区的内容被自动写入到目的地，如果关闭流，缓冲区的内容会立刻被写入目的地。</p>
<h3 id="5-缓冲流"><a href="#5-缓冲流" class="headerlink" title="5. 缓冲流"></a>5. 缓冲流</h3><p>BufferedReader 和 BufferedWriter 的源和目的地必须是字符输入流和字符输出流。</p>
<p>构造方法：</p>
<ul>
<li>BufferedReader(Reader in)：能够读取文本行， readLine()</li>
<li>BufferedWriter(Writer out)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:/test.txt&quot;</span>);</span><br><span class="line">        FileReader in = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(in);</span><br><span class="line">        String str = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((str = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String str[] = &#123;<span class="string">&quot;我在上课&quot;</span>,<span class="string">&quot;我在吃饭&quot;</span>&#125;;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:/test.txt&quot;</span>);</span><br><span class="line">        FileWriter out = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(out);</span><br><span class="line">        <span class="keyword">for</span> (String s : str) &#123;</span><br><span class="line">            bufferedWriter.write(s);</span><br><span class="line">            bufferedWriter.newLine();      <span class="comment">//写入一个换行符</span></span><br><span class="line">        &#125;</span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以把 BufferedReader 和 BufferedWriter 称作上层流，把他们指向的字符流称作底层流。Java 采用缓存技术将上层流和底层流连接。底层字符输出流先将数据读入缓存， BufferedReader 流再从缓存读取数据；BufferedWriter 流将数据写入缓存，底层字符输出流会不断地将缓存中的数据写入到目的地。当 BufferedWriter 流调用 flush() 刷新缓存或调用 close() 方法关闭时，即使缓存没有溢满，底层流也会立刻将缓存的内容写入目的地。</p>
</blockquote>
<h3 id="6-随机流"><a href="#6-随机流" class="headerlink" title="6. 随机流"></a>6. 随机流</h3><p>RandomAccessFile 类创建的流称作随机流，当准备对一个文件进行读写操作时，可以创建一个指向该文件的随机流即可，这样既可以从这个流中读取文件的数据，也可以通过这个流写入数据到文件。</p>
<p>构造方法：</p>
<ul>
<li>RandomAccessFile(String name, String mode)：name 用来确定一个文件名，给出创建的流的源，目的地。mode 为 r (只读)或 rw (可读写)，决定创建的流对文件的访问权力。</li>
<li>RandomAccessFile(File file, String String mode)：同上。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:/test.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> data[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">        RandomAccessFile inAndOut = <span class="keyword">new</span> RandomAccessFile(file,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            inAndOut.writeInt(data[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> i = data.length-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            inAndOut.seek(i*<span class="number">4</span>);		<span class="comment">//定位流的读写位置，参数是确定读写位置距离文件开头的字节个数。</span></span><br><span class="line">            System.out.println(inAndOut.readInt());</span><br><span class="line">            System.out.println(inAndOut.getFilePointer());  <span class="comment">//获取流的当前读写位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        inAndOut.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>RandomAccessFile 常用方法</strong></p>
</blockquote>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>close()</td>
<td>关闭文件</td>
</tr>
<tr>
<td>getFilePointer()</td>
<td>获取当前读写的位置</td>
</tr>
<tr>
<td>length()</td>
<td>获取文件的长度</td>
</tr>
<tr>
<td>read()</td>
<td>从文件中读取一个字节的数据</td>
</tr>
<tr>
<td>readBoolean()</td>
<td>从文件中读取一个布尔值，0 代表 false，其他代表true</td>
</tr>
<tr>
<td>readByte()</td>
<td>从文件中读取一个字节</td>
</tr>
<tr>
<td>readChar()</td>
<td>从文件中读取一个字符，2个字节</td>
</tr>
<tr>
<td>readDouble()</td>
<td>从文件中读取一个双精度浮点值(8 个字节)</td>
</tr>
<tr>
<td>readFloat()</td>
<td>从文件中读取一个单精度浮点值(4 个字节)</td>
</tr>
<tr>
<td>readFully(byte b[])</td>
<td>读 b.length 字节放入数组 b，完全填满该数组</td>
</tr>
<tr>
<td>readInt()</td>
<td>从文件中读取一个 int 值，4个字节</td>
</tr>
<tr>
<td>readLine()</td>
<td>从文件中读取一个文本行</td>
</tr>
<tr>
<td>readLong()</td>
<td>从文件中读取一个长型值，8 个字节</td>
</tr>
<tr>
<td>readShort()</td>
<td>从文件中读取一个短型值，2 个字节</td>
</tr>
<tr>
<td>readUnsignedByte()</td>
<td>从文件中读取一个无符号字节，1 个字节</td>
</tr>
<tr>
<td>readUnsignedShort()</td>
<td>从文件中读取一个无符号短型值，2 个字节</td>
</tr>
<tr>
<td>readUTF()</td>
<td>从文件中读取一个 UTF 字符串</td>
</tr>
<tr>
<td>seek(long position)</td>
<td>定位读写位置</td>
</tr>
<tr>
<td>setLength(long newlength)</td>
<td>设置文件的长度</td>
</tr>
<tr>
<td>skipBytes(int n)</td>
<td>在文件中跳过给定数量的字节</td>
</tr>
<tr>
<td>write(byte b[])</td>
<td>写 b.length 个字节到文件</td>
</tr>
<tr>
<td>writeBoolean(boolean v)</td>
<td>把一个布尔值作为单字节值写入文件</td>
</tr>
<tr>
<td>writeByte(int v)</td>
<td>向文件写入一个字节</td>
</tr>
<tr>
<td>writeBytes(String s)</td>
<td>向文件写入一个字符串</td>
</tr>
<tr>
<td>writeChar(char c)</td>
<td>向文件写入一个字符</td>
</tr>
<tr>
<td>writeChars(String s)</td>
<td>向文件写入一个作为字符数据的字符串</td>
</tr>
<tr>
<td>writeDouble(double v)</td>
<td>向文件写入一个双精度浮点值</td>
</tr>
<tr>
<td>writeFloat(float v)</td>
<td>向文件写入一个单精度浮点值</td>
</tr>
<tr>
<td>writeInt(int v)</td>
<td>向文件写入一个 int 值</td>
</tr>
<tr>
<td>writeLong(long v)</td>
<td>向文件写入一个长型 int 值</td>
</tr>
<tr>
<td>writeShort(int v)</td>
<td>向文件写入一个短型 int 值</td>
</tr>
<tr>
<td>writeUTF(String s)</td>
<td>写入一个 UTF 字符串</td>
</tr>
</tbody></table>
<p><strong>注意：</strong>如果 readLine() 方法在读取含有非 ASCII 字符的文件时，含有汉字的文件会出现乱码的情况，需要把 readLine() 读取的字符串用“iso-8859-1”重新编码存放到byte数组中，然后再用当前机器的默认编码将该数组转化为字符串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:/test.txt&quot;</span>);</span><br><span class="line">        RandomAccessFile inAndOut = <span class="keyword">new</span> RandomAccessFile(file, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        <span class="keyword">long</span> length = inAndOut.length();</span><br><span class="line">        <span class="keyword">long</span> position = <span class="number">0</span>;</span><br><span class="line">        inAndOut.seek(position);</span><br><span class="line">        <span class="keyword">while</span> (position &lt; length) &#123;</span><br><span class="line">            String s = inAndOut.readLine();</span><br><span class="line">            <span class="keyword">byte</span>[] a = s.getBytes(<span class="string">&quot;iso-8859-1&quot;</span>);</span><br><span class="line">            s = <span class="keyword">new</span> String(a,<span class="string">&quot;GB2312&quot;</span>); <span class="comment">//GB2312 是机器的编码</span></span><br><span class="line">            position = inAndOut.getFilePointer();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-数组流"><a href="#7-数组流" class="headerlink" title="7. 数组流"></a>7. 数组流</h3><h4 id="7-1-字节数组流"><a href="#7-1-字节数组流" class="headerlink" title="7.1 字节数组流"></a>7.1 字节数组流</h4><p><strong>ByteArrayInputStream构造方法：</strong></p>
<ul>
<li>ByteArrayInputStream(byte[] buf)：字节数组流的源是 buf  指定是数组的全部字节单元，</li>
<li>ByteArrayInputStream(byte[] buf，int offset，int length)：同上，从 offset 处按顺序取 length 个字节单元</li>
</ul>
<blockquote>
<p>字节数组输入流方法：</p>
<ul>
<li>public int read()：顺序地从源中读出一个字节，该方法返回读出的字节值</li>
<li>public int read(byte[] b, int off, int len)：顺序地从源中读出参数 len 指定的字节数，并将读出的字节存到参数 b 指定的数组中，参数 off 指定数组 b 存放读出字节的起始位置，该方法返回实际读出的字节个数。</li>
</ul>
<p>如果未读出字节 read 方法返回 -1</p>
</blockquote>
<p><strong>ByteArrayOutputStream构造方法：</strong></p>
<ul>
<li>ByteArrayOutputStream()：字节数组输出流指向一个默认大小为 32 字节的缓冲区，如果输出流向缓冲区写入的字节个数大于缓冲区时，缓冲区的容量会自动增加。</li>
<li>ByteArrayOutputStream(int size)：字节数组输出流指向的缓冲区的初始大小由参数 size 指定，如果输出流向缓冲区写入的字节个数大于缓冲区时，缓冲区的容量会自动增加。</li>
</ul>
<blockquote>
<p>字节数组输出流方法：</p>
<ul>
<li>public void write(int b)：顺序地向缓冲区写入一个字节</li>
<li>public void write(byte[] b, int off, int len)：将参数 b 中指定的 len 个字节顺序地写入缓冲区，参数 off 指定从 b 中写出的字节的起始位置</li>
<li>public byte[] toByteArray()：返回输出流写入到缓冲区的全部字节</li>
</ul>
</blockquote>
<h4 id="7-2-字符数组流"><a href="#7-2-字符数组流" class="headerlink" title="7.2 字符数组流"></a>7.2 字符数组流</h4><p>字符数组分别使用字符数组作为流的源和目标，字符数组流：CharArrayReader ，CharArrayWriter 类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//字节数组流</span></span><br><span class="line">        ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] a = <span class="string">&quot;我是学生&quot;</span>.getBytes();</span><br><span class="line">        out.write(a);</span><br><span class="line">        ByteArrayInputStream in = <span class="keyword">new</span> ByteArrayInputStream(out.toByteArray());</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[out.toByteArray().length];</span><br><span class="line">        in.read(b);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(b));</span><br><span class="line">		<span class="comment">//字符数组流</span></span><br><span class="line">        CharArrayWriter outChar = <span class="keyword">new</span> CharArrayWriter();</span><br><span class="line">        <span class="keyword">char</span>[] content = <span class="string">&quot;我是老师&quot;</span>.toCharArray();</span><br><span class="line">        outChar.write(content);</span><br><span class="line">        CharArrayReader inChar = <span class="keyword">new</span> CharArrayReader(outChar.toCharArray());</span><br><span class="line">        <span class="keyword">char</span>[] backChar = <span class="keyword">new</span> <span class="keyword">char</span>[outChar.toCharArray().length];</span><br><span class="line">        inChar.read(backChar);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(backChar));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-数据流"><a href="#8-数据流" class="headerlink" title="8. 数据流"></a>8. 数据流</h3><p>DataInputStream 和 DataOutputStream 类创建的对象称为数据的输入流和数据输出流，用该类对象读取一个数值时，不必再关心这个数值应当是多少个字节。</p>
<p>构造方法：</p>
<ul>
<li>DataInputStream(InputStream in)：创建的数据输入流指向一个由参数 in 指定的底层输入流</li>
<li>DataOutputStream(OutputStream out)：创建的数据输出流指向一个由参数 out 指定的底层输出流</li>
</ul>
<p>常用方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>close()</td>
<td>关闭流</td>
</tr>
<tr>
<td>readBoolean()</td>
<td>读一个布尔值</td>
</tr>
<tr>
<td>readByte()</td>
<td>读一个字节</td>
</tr>
<tr>
<td>readChar()</td>
<td>读一个字符</td>
</tr>
<tr>
<td>readDouble()</td>
<td>读一个双精度浮点值</td>
</tr>
<tr>
<td>readFloat()</td>
<td>读一个单精度浮点值</td>
</tr>
<tr>
<td>readInt()</td>
<td>读一个 int 值</td>
</tr>
<tr>
<td>readLong()</td>
<td>读一个长型值</td>
</tr>
<tr>
<td>readShort()</td>
<td>读一个短型值</td>
</tr>
<tr>
<td>readUnsignedByte()</td>
<td>读一个无符号字节</td>
</tr>
<tr>
<td>readUnsignedShort()</td>
<td>读一个无符号短型值</td>
</tr>
<tr>
<td>readUTF()</td>
<td>读一个 UTF 字符串</td>
</tr>
<tr>
<td>skipBytes(int n)</td>
<td>跳过给定数量的字节</td>
</tr>
<tr>
<td>writeBoolean(boolean v)</td>
<td>写入一个布尔值</td>
</tr>
<tr>
<td>writeBytes(String s)</td>
<td>写入一个字符串</td>
</tr>
<tr>
<td>writeChars(String s)</td>
<td>写入字符串</td>
</tr>
<tr>
<td>writeDouble(double v)</td>
<td>写入一个双精度浮点值</td>
</tr>
<tr>
<td>writeFloat(float v)</td>
<td>写入一个单精度浮点值</td>
</tr>
<tr>
<td>writeInt(int v)</td>
<td>写入一个 int 值</td>
</tr>
<tr>
<td>writeLong(long v)</td>
<td>写入一个长型值</td>
</tr>
<tr>
<td>writeShort(int v)</td>
<td>写入一个短型值</td>
</tr>
<tr>
<td>writeUTF(String s)</td>
<td>写入一个 UTF 字符串</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:/test.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileOutputStream out = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            DataOutputStream outData = <span class="keyword">new</span> DataOutputStream(out);</span><br><span class="line">            outData.writeInt(<span class="number">10</span>);</span><br><span class="line">            outData.writeLong(<span class="number">123456</span>);</span><br><span class="line">            outData.writeFloat(<span class="number">3.1415926f</span>);</span><br><span class="line">            outData.writeBoolean(<span class="keyword">true</span>);</span><br><span class="line">            outData.writeChar(<span class="number">65</span>);</span><br><span class="line">            outData.writeChars(<span class="string">&quot;I am a stduent&quot;</span>);</span><br><span class="line">            outData.writeChars(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileInputStream in = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            DataInputStream inData = <span class="keyword">new</span> DataInputStream(in);</span><br><span class="line">            System.out.println(inData.readInt());</span><br><span class="line">            System.out.println(inData.readLong());</span><br><span class="line">            System.out.println(inData.readFloat());</span><br><span class="line">            System.out.println(inData.readBoolean());</span><br><span class="line">            System.out.println(inData.readChar());</span><br><span class="line">            <span class="keyword">char</span> c;</span><br><span class="line">            <span class="keyword">while</span> ((c = inData.readChar())!=<span class="string">&#x27;\n&#x27;</span>)&#123;</span><br><span class="line">                System.out.print(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9-对象流"><a href="#9-对象流" class="headerlink" title="9. 对象流"></a>9. 对象流</h3><p>ObjectInputStream 和 ObjectOutputStream 类分别是 InputStream 和 OutputStream 类的子类。</p>
<p>ObjectInputStream 和 ObjectOutputStream  类创建的对象称为对象输入流和对象输出流。</p>
<p>构造方法：</p>
<ul>
<li>ObjectInputStream(InputStream in)：指向是一个输入流对象，当准备从文件中读入一个对象到程序中时，首先用 InputStream 的子类创建一个输入流。</li>
<li>ObjectOutputStream(OutputStream out)：指向是一个输出流对象，当准备将一个对象写入到文件时，首先使用 OutputStream 的子类创建一个输出流。</li>
</ul>
<blockquote>
<p>当使用对象流写出或读入的时候，要保证对象是序列化的。为了保证能把对象写入到文件，并能再把对象正确读回到程序中。</p>
<p>一个类实现 Serializable 接口，这个类创建的对象就是序列化对象。</p>
<p>注意：使用对象流把一个对象写入到文件时不仅要保证该对象是序列化的，而且该对象的成员对象也必须是序列化的。</p>
<p>Serializable  接口中的方法对程序是不可见的，因此实现该接口的类不需要实现额外的方法，当把一个序列化的对象写入到对象输出流时， JVM 就会实现 Serializable  接口中的方法，将一定格式的文本(对象的序列化信息)写入目的地。当 ObjectInputStream 对象流从文件读取对象时，就会从文件中读回对象的序列化信息，并根据对象的序列化信息创建一个对象。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setName(<span class="string">&quot;小李&quot;</span>);</span><br><span class="line">        student.setAge(<span class="number">20</span>);</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:/test.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//写入</span></span><br><span class="line">            FileOutputStream out = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            ObjectOutputStream objectOut = <span class="keyword">new</span> ObjectOutputStream(out);</span><br><span class="line">            objectOut.writeObject(student);</span><br><span class="line">            objectOut.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读</span></span><br><span class="line">            FileInputStream in = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            ObjectInputStream objectIn = <span class="keyword">new</span> ObjectInputStream(in);</span><br><span class="line">            Student student1 = (Student) objectIn.readObject();</span><br><span class="line">            System.out.println(student1.getName());</span><br><span class="line">            System.out.println(student1.getAge());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="10-文件锁"><a href="#10-文件锁" class="headerlink" title="10. 文件锁"></a>10. 文件锁</h3><p>经常出现几个程序处理同一个文件的情景，同时更新或读取文件会很混乱，所以 Java 1.4版本后提供了文件锁的功能。</p>
<p>包名：java.nio.channels</p>
<p>方法：</p>
<ul>
<li>FileLock</li>
<li>FileChannel</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setName(<span class="string">&quot;小李&quot;</span>);</span><br><span class="line">        student.setAge(<span class="number">20</span>);</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:/test.txt&quot;</span>);</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//读写属性必须时 rw</span></span><br><span class="line">            RandomAccessFile inAndOut = <span class="keyword">new</span> RandomAccessFile(file,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">            <span class="comment">//获得一个连接到底层文件的 FileChannel对象(信道)</span></span><br><span class="line">            FileChannel channel = inAndOut.getChannel();  </span><br><span class="line">            <span class="comment">//信道调用tryLock()或lock()方法获得一个 FileLock(文件锁)对象，这个过程称为文件加锁</span></span><br><span class="line">            <span class="comment">//文件锁对象产生后将禁止任何程序对文件进行操作或再进行加锁。</span></span><br><span class="line">            FileLock lock = channel.tryLock();      <span class="comment">//加锁</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入要读取的行数：&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (scanner.hasNextLine())&#123;</span><br><span class="line">                <span class="keyword">int</span> i = scanner.nextInt();</span><br><span class="line">                <span class="comment">//对一个文件加锁之后，想要读或写文件必须让 FileLock 对象调用 release() 释放文件锁。</span></span><br><span class="line">                lock.release();     <span class="comment">//解锁</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                    String s = inAndOut.readLine();</span><br><span class="line">                    System.out.println(s);</span><br><span class="line">                &#125;</span><br><span class="line">                lock = channel.tryLock();       <span class="comment">//加锁</span></span><br><span class="line">                System.out.println(<span class="string">&quot;请输入要读取的行数：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>学习参考资料：Java 程序设计精编教程(第3版)</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中String类常用方法</title>
    <url>/2021/08/03/Java/Java%E4%B8%ADString%E7%B1%BB%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>后面学习中 String 类的使用是非常重要的，其中包含许多的方法，所以就做了一些常用方法的总结<br>在java编程中，字符串使用非常广泛，在java中字符串属于对象，java提供了String类来创建和操作字符串。</p>
</blockquote>
<h2 id="1-创建字符串"><a href="#1-创建字符串" class="headerlink" title="1. 创建字符串"></a>1. 创建字符串</h2><h3 id="1-1-通过定义-String类型的变量创建字符串"><a href="#1-1-通过定义-String类型的变量创建字符串" class="headerlink" title="1.1 通过定义 String类型的变量创建字符串"></a>1.1 通过定义 String类型的变量创建字符串</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">&quot;I am a student&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-通过构造器来创建-String-类型的字符串变量"><a href="#1-2-通过构造器来创建-String-类型的字符串变量" class="headerlink" title="1.2 通过构造器来创建 String 类型的字符串变量"></a>1.2 通过构造器来创建 String 类型的字符串变量</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="2-String-常用的方法"><a href="#2-String-常用的方法" class="headerlink" title="2. String 常用的方法"></a>2. String 常用的方法</h2><h3 id="2-1-charAt-int-index"><a href="#2-1-charAt-int-index" class="headerlink" title="2.1 charAt(int index)"></a>2.1 charAt(int index)</h3><p>功能：用于返回指定索引处的字符，范围 0 ~ length()-1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;I am a student!&quot;</span>;</span><br><span class="line">        <span class="keyword">char</span> c = str.charAt(<span class="number">3</span>);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果为：m</span><br></pre></td></tr></table></figure>

<h3 id="2-2-compareTo-Object-O-String-anotherString-，compareTolgnoreCase-String-str"><a href="#2-2-compareTo-Object-O-String-anotherString-，compareTolgnoreCase-String-str" class="headerlink" title="2.2 compareTo(Object O[String anotherString])，compareTolgnoreCase(String str)"></a>2.2 compareTo(Object O[String anotherString])，compareTolgnoreCase(String str)</h3><p>compareTo()功能：1. 用于字符串与对象进行比较，2. 按字典顺序比较两个字符串</p>
<p>compareTolgnoreCase()功能：用于按字典顺序比较两个字符串，不考虑大小写</p>
<p>返回值：整型 int，先比较对应字符串大小(ASCII码顺序)，如果第一个字符和参数第一个字符不等，结束比较返回两个字符的 差值，如果第一个字符和参数第一个字符相等，则以第二个字符和参数的第二个字符做比较，以此类推直到比较字符或被比较的字符有一方结束</p>
<ul>
<li>如果参数字符串与字符串相等，返回0</li>
<li>如果字符串大于参数字符串，则返回一个大于0的值</li>
<li>如果字符串小于参数字符串，则返回一个小于0的值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;strs&quot;</span>;</span><br><span class="line">        String str1 = <span class="string">&quot;strs&quot;</span>;</span><br><span class="line">        String str2 = <span class="string">&quot;strs111&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> i = str.compareTo(str1);</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i1 = str1.compareTo(str2);</span><br><span class="line">        System.out.println(i1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i2 = str2.compareTo(str);</span><br><span class="line">        System.out.println(i2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">0</span></span><br><span class="line">    -<span class="number">3</span></span><br><span class="line">    <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-concat-String-str"><a href="#2-3-concat-String-str" class="headerlink" title="2.3 concat(String str)"></a>2.3 concat(String str)</h3><p>功能：用于将指定的字符串参数连接到字符串上，等同于字符串连接的 + 号</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;I am a &quot;</span>;</span><br><span class="line">        String student = str.concat(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：I am a student</span><br></pre></td></tr></table></figure>

<h3 id="2-4-equals"><a href="#2-4-equals" class="headerlink" title="2.4 equals()"></a>2.4 equals()</h3><h4 id="2-4-1-equals-Object-anObject"><a href="#2-4-1-equals-Object-anObject" class="headerlink" title="2.4.1 equals(Object anObject)"></a>2.4.1 equals(Object anObject)</h4><p>功能：用于将字符串与指定的对象比较</p>
<p>返回值：两个字符串相等返回 true，否则返回 false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">        String str2 = <span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">        String str3 = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.equals(str2));</span><br><span class="line">        System.out.println(str1.equals(str3));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">false</span></span><br><span class="line">    <span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<h4 id="2-4-2-contentEquals-StringBuffer-sb"><a href="#2-4-2-contentEquals-StringBuffer-sb" class="headerlink" title="2.4.2 contentEquals(StringBuffer sb)"></a>2.4.2 contentEquals(StringBuffer sb)</h4><p>功能：用于将此字符换与指定的 StringBuffer 比较</p>
<p>参数 sb 是要与字符串比较的StringBuffer</p>
<p>返回值：如果字符串与指定StringBuffer表示相同的字符序列，返回true，否则返回false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">        String str2 = <span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">        StringBuffer str3 = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.contentEquals(str3));</span><br><span class="line">        System.out.println(str1.contentEquals(str2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">false</span></span><br><span class="line">    <span class="keyword">false</span></span><br></pre></td></tr></table></figure>

<h4 id="2-4-3-copyValueOf"><a href="#2-4-3-copyValueOf" class="headerlink" title="2.4.3 copyValueOf()"></a>2.4.3 copyValueOf()</h4><p>两种形式：</p>
<ol>
<li>public static String copyValueOf(char[] data)：返回指定数组中表示该字符序列的字符串</li>
<li>public static String copyValueOf(char[] data, int offset, int count)：返回指定数组中表示该字符序列的字符换。</li>
</ol>
<p><strong>参数：</strong></p>
<ul>
<li>data 字符数组</li>
<li>offset 子数组的初始偏移量</li>
<li>count 子数组的长度</li>
</ul>
<p>返回值：返回指定数组中表示该字符序列的字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] Str1 = &#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;;</span><br><span class="line">        String Str2 = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Str2 = Str2.copyValueOf( Str1 );</span><br><span class="line">        System.out.println(<span class="string">&quot;返回结果：&quot;</span> + Str2);</span><br><span class="line"></span><br><span class="line">        Str2 = Str2.copyValueOf( Str1, <span class="number">2</span>, <span class="number">6</span> );</span><br><span class="line">        System.out.println(<span class="string">&quot;返回结果：&quot;</span> + Str2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    返回结果：hello world</span><br><span class="line">    返回结果：llo wo</span><br></pre></td></tr></table></figure>

<h4 id="2-4-4-endsWith-String-suffix"><a href="#2-4-4-endsWith-String-suffix" class="headerlink" title="2.4.4 endsWith(String suffix)"></a>2.4.4 endsWith(String suffix)</h4><p>功能：用于测试字符串是否以指定的后缀结束</p>
<p>参数：suffix  指定的后缀</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String string = <span class="keyword">new</span> String(<span class="string">&quot;I am a student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(string.endsWith(<span class="string">&quot;student&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(string.endsWith(<span class="string">&quot;aaaaaa&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">false</span></span><br></pre></td></tr></table></figure>

<h4 id="2-4-5-equalsIgnoreCase-String-anotherString"><a href="#2-4-5-equalsIgnoreCase-String-anotherString" class="headerlink" title="2.4.5 equalsIgnoreCase(String anotherString)"></a>2.4.5 equalsIgnoreCase(String anotherString)</h4><p>功能：用于将字符串与指定的对象比较，不考虑大小写</p>
<p>参数：anotherString   与字符串进行比较的对象</p>
<p>返回值：如果相等返回true，否则false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="keyword">new</span> String(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        String str2 = <span class="keyword">new</span> String(<span class="string">&quot;STUDENT&quot;</span>);</span><br><span class="line">        System.out.println(str1.equalsIgnoreCase(str2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<h3 id="2-5-getBytes"><a href="#2-5-getBytes" class="headerlink" title="2.5 getBytes()"></a>2.5 getBytes()</h3><p>该方法有两种形式</p>
<ul>
<li><p>get Bytes(String charsetName)：使用指定字符集将字符串编码为 byte 序列，并将结果存储到一个新的byte数组中</p>
<p><strong>参数：</strong>charsetName    支持的字符集名称</p>
</li>
<li><p>getBytes()：使用平台的默认字符集将字符串编码为byte序列，并将结果存储到一个新的byte数组中</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="keyword">new</span> String(<span class="string">&quot;student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.getBytes());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(str1.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    [B@<span class="number">1540e19d</span></span><br><span class="line">	[B@677327b6</span><br></pre></td></tr></table></figure>

<h3 id="2-6-getChars-int-srcBegin-int-srcEnd-char-dst-int-dstBegin"><a href="#2-6-getChars-int-srcBegin-int-srcEnd-char-dst-int-dstBegin" class="headerlink" title="2.6 getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)"></a>2.6 getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)</h3><p>功能：将字符串从字符串复制到目标字符数组</p>
<p><strong>参数：</strong></p>
<ul>
<li>srcBegin：字符串中要复制的第一个字符的索引</li>
<li>srcEnd：字符串中要复制的最后一个字符之后的索引</li>
<li>dst：目标属组</li>
<li>dstBegin：目标数组中的起始偏移量</li>
</ul>
<p>返回值：没有返回值，会抛出 indexOutOfBoundsException异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="keyword">new</span> String(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span>[] str2 =<span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">        str1.getChars(<span class="number">0</span>,<span class="number">6</span>,str2,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    student</span><br></pre></td></tr></table></figure>

<h3 id="2-7-hashCode"><a href="#2-7-hashCode" class="headerlink" title="2.7 hashCode()"></a>2.7 hashCode()</h3><p>功能：用于返回字符串的哈希码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">哈希码计算公式：s[<span class="number">0</span>]*<span class="number">31</span>^(n-<span class="number">1</span>) + s[<span class="number">1</span>]*<span class="number">31</span>^(n-<span class="number">2</span>) + ... + s[n-<span class="number">1</span>]</span><br><span class="line">使用字符的<span class="keyword">int</span>进行计算，s[i]是字符串的第i个字符，n是字符串的长度，^表示求幂，空字符串的哈希值为<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>没有参数，</p>
<p>返回值：对象的哈希码值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="keyword">new</span> String(<span class="string">&quot;AB&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">2081</span></span><br><span class="line"><span class="number">65</span> * <span class="number">31</span>^<span class="number">1</span> + <span class="number">66</span></span><br></pre></td></tr></table></figure>

<h3 id="2-8-indexOf"><a href="#2-8-indexOf" class="headerlink" title="2.8 indexOf()"></a>2.8 indexOf()</h3><p>四种形式：</p>
<ol>
<li>public int indexOf(int ch)：返回指定字符在字符串中第一次出现处的索引，如果此字符串中没有这样的字符，返回 -1</li>
<li>public int indexOf(int ch, int fromlndex)：返回从 formlndex 位置开始查找指定字符串中第一次出现处的索引，如果没有 返回 -1</li>
<li>int indexOf(String str)：返回指定字符串在字符串中第一次出现处的索引，如果此字符串中没有这样的字符，返回 -1</li>
<li>int indexOf(String str, int fromlndex)：返回从fromlndex位置开始查找指定字符在字符串中第一次出现处的索引，如果没有返回 -1</li>
</ol>
<p>参数：</p>
<ul>
<li>ch   字符，Unicode编码</li>
<li>fromIndex   开始搜索的索引位置，第一个字符是 0，第二个是 1，以此类推</li>
<li>str   要搜索的子字符串</li>
</ul>
<p>返回值：查找字符串，或字符Unicode编码在字符串中出现的位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="keyword">new</span> String(<span class="string">&quot;I am a student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.indexOf(<span class="string">&quot;a&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.indexOf(<span class="string">&quot;a&quot;</span>, <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.indexOf(<span class="string">&quot;am&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.indexOf(<span class="string">&quot;am&quot;</span>, <span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">2</span></span><br><span class="line">    <span class="number">5</span></span><br><span class="line">    <span class="number">2</span></span><br><span class="line">    -<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="2-9-intern"><a href="#2-9-intern" class="headerlink" title="2.9 intern()"></a>2.9 intern()</h3><p>功能：返回字符串对象的规范化表示形式</p>
<p>遵循规则：对于任意两个字符串 s 和 t，当且仅当 s.equals(t) 为 true 时，s.intern() == t.intern() 为 true</p>
<p>没有参数</p>
<p>返回值：一个字符串，内容与此字符串相同，但一定取自具有唯一字符串的池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">        String str2 = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">        String str3 = <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">        String str4 = str1 + str2;</span><br><span class="line">        String str5 = <span class="keyword">new</span> String(<span class="string">&quot;ab&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str5.equals(str3));</span><br><span class="line">        System.out.println(str5 == str3);</span><br><span class="line">        System.out.println(str5.intern() == str3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">false</span></span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">false</span></span><br><span class="line">分析：第一个输出不要解释，因为字符串的值的内容相同</span><br><span class="line">    第二个 str5 == str3 对比的是引用的地址是否相同，str5是<span class="keyword">new</span> String方式定义的，所以地址引用一定不相等，所以为 <span class="keyword">false</span></span><br><span class="line">    第三个 str5调用intern会检查字符串池中是否含有该字符串，由于之前定义的str3已经进入字符串池中，所以会得到相同的引用</span><br></pre></td></tr></table></figure>

<h3 id="2-10-lastIndexOf"><a href="#2-10-lastIndexOf" class="headerlink" title="2.10 lastIndexOf()"></a>2.10 lastIndexOf()</h3><p>四种形式：</p>
<ol>
<li>public int lastIndexOf(int ch)：返回指定字符在此字符串中最后一次出现处的索引，如果此字符串中没有这样的字符返回 -1</li>
<li>public int lastIndexOf(int ch, int fromIndex)：返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索，如果没有返回 -1</li>
<li>public int lastIndexOf(String str)：返回指定字符串在此字符串中最右边出现处的索引，如果此字符串中没有这样的字符，则返回 -1</li>
<li>public int lastIndexOf(String str, int fromIndex)：返回指定字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索，如果没有则返回 -1</li>
</ol>
<p>参数：</p>
<ul>
<li>ch：字符</li>
<li>fromIndex：开始搜索的索引位置</li>
<li>str：要搜索的子字符串</li>
</ul>
<p>返回值：指定子字符串在字符串中第一次出现处的索引值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="keyword">new</span> String(<span class="string">&quot;I am a student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.lastIndexOf(<span class="string">&quot;a&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.lastIndexOf(<span class="string">&quot;a&quot;</span>, <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.lastIndexOf(<span class="string">&quot;am&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.lastIndexOf(<span class="string">&quot;am&quot;</span>, <span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">5</span></span><br><span class="line">    <span class="number">2</span></span><br><span class="line">    <span class="number">2</span></span><br><span class="line">    <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="2-11-length"><a href="#2-11-length" class="headerlink" title="2.11 length()"></a>2.11 length()</h3><p>功能：用于返回字符串的长度，空字符串返回 0</p>
<p>没有参数</p>
<p>返回值：返回字符串的长度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="keyword">new</span> String(<span class="string">&quot;I am a student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">返回结果：</span><br><span class="line">    <span class="number">14</span></span><br></pre></td></tr></table></figure>

<h3 id="2-12-mathces-regex-str"><a href="#2-12-mathces-regex-str" class="headerlink" title="2.12 mathces(regex, str)"></a>2.12 mathces(regex, str)</h3><p>功能：用于检测字符串是否匹配给定的正则表达式，调用此方法 str.mathces(regex)形式与以下表达式产生的结果完全相同：Pattern.mathces(regex, str)</p>
<p>参数：</p>
<ul>
<li>regex：匹配字符串的正则表达式</li>
</ul>
<p>返回值：在字符串匹配给定的正则表达式时，返回 true</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="keyword">new</span> String(<span class="string">&quot;I am a student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.matches(<span class="string">&quot;(.*)am(.*)&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">返回结果：</span><br><span class="line">    <span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<h3 id="2-13-regionMatches"><a href="#2-13-regionMatches" class="headerlink" title="2.13 regionMatches()"></a>2.13 regionMatches()</h3><p>功能：用于检测两个字符串在一个区域内是否相等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">regionMatches</span><span class="params">(<span class="keyword">int</span> toffset,</span></span></span><br><span class="line"><span class="params"><span class="function">                             String other,</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="keyword">int</span> ooffset,</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">regionMatches</span><span class="params">(<span class="keyword">boolean</span> ignoreCase,</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="keyword">int</span> toffset,</span></span></span><br><span class="line"><span class="params"><span class="function">                             String other,</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="keyword">int</span> ooffset,</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="keyword">int</span> len)</span></span></span><br></pre></td></tr></table></figure>

<p>参数：</p>
<ul>
<li>ignoreCase：如果为true，则比较字符时忽略大小写</li>
<li>toffset：此字符串中子区域的起始偏移量</li>
<li>other：字符串参数</li>
<li>ooffset：字符串参数中子区域的起始偏移量</li>
<li>len：要比较的字符数</li>
</ul>
<p>返回值：如果字符串的指定子区域匹配字符串参数的指定子区域，则返回true，否则返回false，是否完全匹配或考虑大小写取决于 ignoreCase 参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="keyword">new</span> String(<span class="string">&quot;I am a student&quot;</span>);</span><br><span class="line">        String str2 = <span class="keyword">new</span> String(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        String str3 = <span class="keyword">new</span> String(<span class="string">&quot;STUDENT&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.regionMatches(<span class="number">7</span>, str2, <span class="number">0</span>, <span class="number">7</span>));</span><br><span class="line">        System.out.println(str1.regionMatches(<span class="keyword">true</span>, <span class="number">7</span>, str3, <span class="number">0</span>, <span class="number">7</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">返回结果：</span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<h3 id="2-14-replace-replaceAll-replaceFirst"><a href="#2-14-replace-replaceAll-replaceFirst" class="headerlink" title="2.14.replace(),replaceAll(),replaceFirst()"></a>2.14.replace(),replaceAll(),replaceFirst()</h3><h4 id="2-14-1replace-char-searchChar-char-newChar"><a href="#2-14-1replace-char-searchChar-char-newChar" class="headerlink" title="2.14.1replace(char searchChar, char newChar)"></a>2.14.1replace(char searchChar, char newChar)</h4><p>功能：通过newChar字符替换字符串中出现的所有 searchChar 字符，并返回替换后的新字符串</p>
<p>参数：</p>
<ul>
<li>searchChar：原字符</li>
<li>newChar：新字符</li>
</ul>
<p>返回值：替换后生成的新字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="keyword">new</span> String(<span class="string">&quot;I am a student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.replace(<span class="string">&quot;student&quot;</span>, <span class="string">&quot;teacher&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">返回结果：</span><br><span class="line">    I am a teacher</span><br></pre></td></tr></table></figure>

<h4 id="2-14-2-replaceAll-String-regex-String-replacement"><a href="#2-14-2-replaceAll-String-regex-String-replacement" class="headerlink" title="2.14.2 replaceAll(String regex, String replacement)"></a>2.14.2 replaceAll(String regex, String replacement)</h4><p>功能：使用给定参数 replacement 替换字符串所有匹配给定的正则表达式的子字符串</p>
<p>参数：</p>
<ul>
<li>regex：匹配此字符串的正则表达式</li>
<li>newChar：用来替换每个匹配项的字符串</li>
</ul>
<p>返回值：成功则返回替换的字符串，失败则返回原始字符串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="keyword">new</span> String(<span class="string">&quot;I am a student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.replaceAll(<span class="string">&quot;(.*)student(.*)&quot;</span>, <span class="string">&quot;teacher&quot;</span>));</span><br><span class="line">        System.out.println(str1.replaceAll(<span class="string">&quot;(.*)aaaaaa(.*)&quot;</span>, <span class="string">&quot;teacher&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    teacher</span><br><span class="line">    I am a student</span><br></pre></td></tr></table></figure>

<h4 id="2-14-3-replaceFirst-String-regex-String-replacement"><a href="#2-14-3-replaceFirst-String-regex-String-replacement" class="headerlink" title="2.14.3 replaceFirst(String regex, String replacement)"></a>2.14.3 replaceFirst(String regex, String replacement)</h4><p>功能：使用给定的参数 replacement 替换字符串第一个匹配给定的正则表达式的子字符串</p>
<p>参数：</p>
<ul>
<li>regex：匹配此字符串的正则表达式</li>
<li>replacement：用来替换第一个匹配项的字符串</li>
</ul>
<p>返回值：成功则返回替换的字符串，失败则返回原始字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="keyword">new</span> String(<span class="string">&quot;I am a student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.replaceFirst(<span class="string">&quot;(.*)student(.*)&quot;</span>, <span class="string">&quot;teacher&quot;</span>));</span><br><span class="line">        System.out.println(str1.replaceFirst(<span class="string">&quot;(.*)aaaaaa(.*)&quot;</span>, <span class="string">&quot;teacher&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    teacher</span><br><span class="line">    I am a student</span><br></pre></td></tr></table></figure>

<h3 id="2-15-split-String-regex-int-limit"><a href="#2-15-split-String-regex-int-limit" class="headerlink" title="2.15 split(String regex, int limit)"></a>2.15 split(String regex, int limit)</h3><p>功能：根据匹配给定的正则表达式来拆分字符串</p>
<p>注意：.   $  |   *  等转义字符，必须得加 \ \ ，多个分隔符可以用 | 作为连字符</p>
<p>参数：</p>
<ul>
<li>regex：正则表达式分隔符</li>
<li>limit：分隔的份数</li>
</ul>
<p>返回值：字符串数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="keyword">new</span> String(<span class="string">&quot;I am a student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : str1.split(<span class="string">&quot; &quot;</span>)) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        String str2 = <span class="keyword">new</span> String(<span class="string">&quot;I am a studentandI am a teacher&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : str2.split(<span class="string">&quot; |and&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    I</span><br><span class="line">    am</span><br><span class="line">    a</span><br><span class="line">    student</span><br><span class="line">    I</span><br><span class="line">    am</span><br><span class="line">    a</span><br><span class="line">    student</span><br><span class="line">    I</span><br><span class="line">    am</span><br><span class="line">    a</span><br><span class="line">    teacher</span><br></pre></td></tr></table></figure>

<h3 id="2-16-startsWith"><a href="#2-16-startsWith" class="headerlink" title="2.16 startsWith()"></a>2.16 startsWith()</h3><p>功能：用于检测字符串是否以指定的前缀开始</p>
<p>两种形式：</p>
<ol>
<li>public boolean startsWith(String prefix, int toffset)</li>
<li>public boolean startsWith(String prefix)</li>
</ol>
<p>参数：</p>
<ul>
<li>prefix：前缀</li>
<li>toffset：字符串中开始查找的位置</li>
</ul>
<p>返回值：如果字符串以指定的前缀开始，则返回 true，否则返回false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="keyword">new</span> String(<span class="string">&quot;I am a studentandI am a teacher&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.startsWith(<span class="string">&quot;I&quot;</span>));</span><br><span class="line">        System.out.println(str1.startsWith(<span class="string">&quot;a&quot;</span>, <span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<h3 id="2-17-subSequence-int-beginIndex-int-endIndex"><a href="#2-17-subSequence-int-beginIndex-int-endIndex" class="headerlink" title="2.17 subSequence(int beginIndex, int endIndex)"></a>2.17 subSequence(int beginIndex, int endIndex)</h3><p>功能：返回一个新的字符序列，它是此序列的一个子序列</p>
<p>参数：</p>
<ul>
<li>beginIndex：起始索引(包括)</li>
<li>endIndex：结束索引(不包括)</li>
</ul>
<p>返回值：返回一个新的字符序列，它是此序列的一个子序列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="keyword">new</span> String(<span class="string">&quot;I am a student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.subSequence(<span class="number">7</span>, <span class="number">14</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    student</span><br></pre></td></tr></table></figure>

<h3 id="2-18-substring"><a href="#2-18-substring" class="headerlink" title="2.18 substring()"></a>2.18 substring()</h3><p>功能：返回字符串的子字符串</p>
<p>两种形式：</p>
<ol>
<li>public String substring(int beginIndex)</li>
<li>public String substring(int beginIndex, int endIndex)</li>
</ol>
<p>参数：</p>
<ul>
<li>beginIndex：起始索引(包括)，索引从0开始</li>
<li>endIndex：结束索引(不包括)</li>
</ul>
<p>返回值：子字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="keyword">new</span> String(<span class="string">&quot;I am a student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.substring(<span class="number">7</span>, <span class="number">14</span>));</span><br><span class="line">        System.out.println(str1.substring(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    student</span><br><span class="line">    I am a student</span><br></pre></td></tr></table></figure>

<h3 id="2-19-toCharArray"><a href="#2-19-toCharArray" class="headerlink" title="2.19 toCharArray()"></a>2.19 toCharArray()</h3><p>功能：将字符串转换为字符数组</p>
<p>没有参数</p>
<p>返回值：字符数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="keyword">new</span> String(<span class="string">&quot;student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : str1.toCharArray()) &#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    s</span><br><span class="line">    t</span><br><span class="line">    u</span><br><span class="line">    d</span><br><span class="line">    e</span><br><span class="line">    n</span><br><span class="line">    t</span><br></pre></td></tr></table></figure>

<h3 id="2-20-大小写转换"><a href="#2-20-大小写转换" class="headerlink" title="2.20 大小写转换"></a>2.20 大小写转换</h3><h4 id="2-20-1-toLowerCase"><a href="#2-20-1-toLowerCase" class="headerlink" title="2.20.1 toLowerCase()"></a>2.20.1 toLowerCase()</h4><p>功能：将字符串转换为小写</p>
<p>没有参数</p>
<p>返回值：转换为小写字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="keyword">new</span> String(<span class="string">&quot;STUDENT&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.toLowerCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    student</span><br></pre></td></tr></table></figure>

<h4 id="2-20-2-toUpperCase"><a href="#2-20-2-toUpperCase" class="headerlink" title="2.20.2 toUpperCase()"></a>2.20.2 toUpperCase()</h4><p>功能：将字符串小写字符转换为大写</p>
<p>没有参数</p>
<p>返回值：字符转换为大写后的字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="keyword">new</span> String(<span class="string">&quot;student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    STUDENT</span><br></pre></td></tr></table></figure>

<h3 id="2-21-toString"><a href="#2-21-toString" class="headerlink" title="2.21 toString()"></a>2.21 toString()</h3><p>功能：返回此对象本身(它已经是一个字符串)</p>
<p>返回值：字符串本身</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="keyword">new</span> String(<span class="string">&quot;student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    student</span><br></pre></td></tr></table></figure>

<h3 id="2-22-trim"><a href="#2-22-trim" class="headerlink" title="2.22 trim()"></a>2.22 trim()</h3><p>功能：删除字符串的头尾空白符</p>
<p>返回值：删除头尾空白符的字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="keyword">new</span> String(<span class="string">&quot;   student   &quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1);</span><br><span class="line">        System.out.println(str1.trim());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    	student</span><br><span class="line">    student</span><br></pre></td></tr></table></figure>

<h3 id="2-23-valueOf"><a href="#2-23-valueOf" class="headerlink" title="2.23 valueOf()"></a>2.23 valueOf()</h3><p>功能：返回各返回值的字符串表示形式</p>
<p>形式：</p>
<ol>
<li>valueOf(boolean b)：返回boolean参数的字符串表示形式</li>
<li>valueOf(char c)：返回 char 参数的字符串表示形式</li>
<li>valueOf(char[] data)：返回char数组参数的字符串表示形式</li>
<li>valueOf(char[] data, int offset, int coutn)：返回 char 数组参数的特定子数组的字符串表示形式</li>
<li>valueOf(double d)：返回double参数的字符串表示形式</li>
<li>valueOf(float f)：返回 float 参数的字符串表示形式</li>
<li>valueOf(int i)：返回 int 参数的字符串表示形式</li>
<li>valueOf(long I)：返回 long 参数的字符串表示形式</li>
<li>valueOf(Object obj)：返回Object参数的字符串表示形式</li>
</ol>
<p>参数：指定参数</p>
<p>返回值：返回指定参数的字符串表示形式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">1100.00</span>;</span><br><span class="line">        <span class="keyword">boolean</span> b = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">long</span> l = <span class="number">1234567890</span>;</span><br><span class="line">        <span class="keyword">char</span>[] arr = &#123;<span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;t&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(String.valueOf(d) );</span><br><span class="line">        System.out.println(String.valueOf(b) );</span><br><span class="line">        System.out.println(String.valueOf(l) );</span><br><span class="line">        System.out.println(String.valueOf(arr) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">1100.0</span></span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    <span class="number">1234567890</span></span><br><span class="line">    student</span><br></pre></td></tr></table></figure>

<h3 id="2-24-contains-CharSequence-chars"><a href="#2-24-contains-CharSequence-chars" class="headerlink" title="2.24 contains(CharSequence chars)"></a>2.24 contains(CharSequence chars)</h3><p>功能：用于判断字符串中是否包含指定的字符或字符串</p>
<p>参数：</p>
<ul>
<li>chars：要判断的字符或字符串</li>
</ul>
<p>返回值：如果包含指定的字符或字符串返回true，否则返回false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="keyword">new</span> String(<span class="string">&quot;I am a student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.contains(<span class="string">&quot;am&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<h3 id="2-25-isEmpty"><a href="#2-25-isEmpty" class="headerlink" title="2.25 isEmpty()"></a>2.25 isEmpty()</h3><p>功能：用于判断字符串是否为空</p>
<p>没有参数</p>
<p>返回值：如果字符串为空返回true，否则返回false，字符串通过 length() 方法计算字符串长度，如果返                回0，即为空字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="keyword">new</span> String(<span class="string">&quot;I am a student&quot;</span>);</span><br><span class="line">        String str2 = <span class="keyword">new</span> String();</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.isEmpty());</span><br><span class="line">        System.out.println(str2.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">false</span></span><br><span class="line">    <span class="keyword">true</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的Calendar抽象类</title>
    <url>/2021/08/03/Java/Java%E4%B8%AD%E7%9A%84Calendar%E6%8A%BD%E8%B1%A1%E7%B1%BB/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建日历对象</span></span><br><span class="line">    Calendar cal = Calendar.getInstance();</span><br><span class="line">    <span class="comment">//将时间日期数据传入日历对象</span></span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    cal.setTime(date);</span><br><span class="line">    <span class="comment">//设置月份加1</span></span><br><span class="line">    cal.add(cal.MONTH, +<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//获取到加1的月份</span></span><br><span class="line">    Date time = cal.getTime();</span><br><span class="line">    System.out.println(<span class="string">&quot;原来的日期：&quot;</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>).format(date));</span><br><span class="line">    System.out.println(<span class="string">&quot;增加1月的日期：&quot;</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>).format(time));</span><br><span class="line">    System.out.println(time.after(date));   <span class="comment">//可以使用 before()  after() 进行两个日期的比较</span></span><br><span class="line">    <span class="keyword">long</span> time1 = time.getTime();<span class="comment">//获得两个日期的时间戳</span></span><br><span class="line">    <span class="keyword">long</span> time2 = date.getTime();</span><br><span class="line">    <span class="keyword">long</span> deffer = ((time1 - time2) / (<span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>));<span class="comment">//计算两个日期相差的天数</span></span><br><span class="line">    System.out.println(deffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的多线程</title>
    <url>/2021/08/03/Java/Java%E4%B8%AD%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="1-线程简介"><a href="#1-线程简介" class="headerlink" title="1. 线程简介"></a>1. 线程简介</h2><h3 id="1-1-进程-Process"><a href="#1-1-进程-Process" class="headerlink" title="1.1 进程(Process)"></a>1.1 进程(Process)</h3><ul>
<li>侠义定义：进程就是一段程序的执行过程</li>
<li>广义定义：进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。它是操作系统执行的基本单位，在传统的操作系统中，进程既是基本的分配单元，也是基本的执行单元。</li>
</ul>
<blockquote>
<p><strong>简单来说进程概念：</strong>1. 进程是一个实体，每一个进程都有它自己的地址空间，一般情况下，包括文本区域、数据区域和堆栈。文本区域存储处理器执行的代码，数据区域存储变量和进程执行期间使用的动态分配的内存，堆栈区域存储着活动过 程调用的指令和本地变量。2. 进程就是一个“执行中的程序”，程序是一个没有生命的实体，只有处理器赋予程序生命时，它才能成为一个活动的实体，称为进程</p>
<p><strong>进程状态：</strong>就绪、运行和阻塞。就绪状态就是获取了 cpu 外的所有资源，只要处理器分配资源就可以立马执行。运行状态就是获得了处理器分配的资源，程序开始执行。阻塞状态，当程序条件不够时，需要等待条件满足时候才能执行，如等待 i/o操作。</p>
</blockquote>
<h3 id="1-2-程序"><a href="#1-2-程序" class="headerlink" title="1.2 程序"></a>1.2 程序</h3><p>程序是指令和数据的有序集合，本身没有任何运行的含义，是一个静态的概念。进程是在处理机上的一次执行过程，是一个动态的概念。进程包含程序，进程的执行离不开程序，进程中的文本区域就是代码区，即程序。</p>
<h3 id="1-3-线程"><a href="#1-3-线程" class="headerlink" title="1.3 线程"></a>1.3 线程</h3><p>通常在一个进程中可以包含若干个线程，一个进程中至少有一个线程，否则没有存在的意义。线程可以利用进程所拥有的资源，在引入线程的操作系统中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位，由于线程比进程更小，基本上不拥有系统资源，对它的调度所付出的开销会小很多，能更高效的提高系统多个程序间并发执行的程序。</p>
<h3 id="1-4-多线程"><a href="#1-4-多线程" class="headerlink" title="1.4 多线程"></a>1.4 多线程</h3><p>在一个程序中，这些独立运行的程序叫做 “线程”，利用它编程的概念就叫做 “多线程处理”。多线程是为了同步完成多项任务，不是为了提高运行效率，而是为了提高资源使用效率来提高系统的效率。线程是在同一时间需要完成多项任务的时候实现的。</p>
<ul>
<li><p>普通方法调用和多线程调用执行</p>
<p><img src="https://img-blog.csdnimg.cn/20210210144115851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
</li>
</ul>
<ul>
<li><p>Process 与 Thread</p>
<p><strong>一个进程包含多个线程</strong></p>
<p>程序是指令和数据的有序集合，本身没有任何运行的含义，是一个静态的概念，而进程则是执行程序的一次执行过程，是一个动态的概念，是系统资源分配的单位，通常在一个进程中可以包含若干个线程，当然一个进程中至少有一个线程，不然没有存在的意义。线程是 CPU 调度和执行的单位。</p>
<p>很多多线程都是模拟出来的，真正的多线程是指有多个 cpu，即多核，如服务器。如果是模拟出来的多线程，即在一个 cpu 的情况下，在同一个时间点，cpu 只能执行一个代码，因为切换的很快，所以就有同时执行的错觉。</p>
</li>
</ul>
<p><strong>核心：</strong></p>
<ul>
<li>线程就是独立的执行路径；在程序运行时，即使没有自己创建线程，后台也会有多个线程，如主线程，gc 线程等；main() 称为主线程，为系统的入口，用于执行整个程序；在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序是不能人为的干预的；对同一份资源操作时，会存在资源抢夺的问题，需要加入并发控制；线程会带来额外的开销，如 CPU 调度时间，并发控制开销；每个线程在自己的工作内存交互，内存控制不当会造成数据不一致。</li>
</ul>
<h3 id="1-5-进程与线程区别"><a href="#1-5-进程与线程区别" class="headerlink" title="1.5 进程与线程区别"></a>1.5 进程与线程区别</h3><p>进程和线程的主要区别在于它们是不同的操作系统资源管理方法。进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其他进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉等同于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源比较大，效率差一点。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。</p>
<ul>
<li>一个程序至少有一个进程，一个进程至少有一个线程</li>
<li>线程的划分尺度小于进程，使得多线程程序的并发性高</li>
<li>进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率</li>
<li>线程在执行过程中与进程还是有区别的，每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制</li>
<li>从逻辑角度看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立应用来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别</li>
</ul>
<blockquote>
<p>优缺点：线程和进程在使用上各有优缺点：线程执行开销小，但不利于资源的管理和保护；进程想法。线程适合于在 SMP(多核处理机)机器上运行，而进程可以跨机器迁移。</p>
</blockquote>
<h2 id="2-线程基本操作"><a href="#2-线程基本操作" class="headerlink" title="2. 线程基本操作"></a>2. 线程基本操作</h2><h3 id="2-1-代码实现-—-Thread"><a href="#2-1-代码实现-—-Thread" class="headerlink" title="2.1 代码实现 — Thread"></a>2.1 代码实现 — Thread</h3><ul>
<li>自定义线程类继承 Thread 类</li>
<li>重写 run() 方法，编写线程执行体</li>
<li>创建线程对象，调用 start() 方法启动线程</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//继承 Thread，重写 run()方法，start()启动线程</span></span><br><span class="line"><span class="comment">//注意：线程开启不一定立即执行，由CPU调度执行</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//run方法线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我是---&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//main 线程，主线程</span></span><br><span class="line">        <span class="comment">//创建一个线程对象</span></span><br><span class="line">        TestThread testThread = <span class="keyword">new</span> TestThread();</span><br><span class="line">        <span class="comment">//调用 start() 方法开启线程</span></span><br><span class="line">        testThread.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你是---&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-代码实现-—-Runnable"><a href="#2-2-代码实现-—-Runnable" class="headerlink" title="2.2 代码实现 — Runnable"></a>2.2 代码实现 — Runnable</h3><ul>
<li>定义 MyRunnable 类实现 Runnable 接口</li>
<li>实现 run() 方法，编写线程执行体</li>
<li>创建线程对象，调用 start() 方法启动线程</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现 runnable 接口，重写 run() 方法</span></span><br><span class="line"><span class="comment">//执行线程需要丢入 runnable 接口实现类，调用 start() 方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread_Runnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//run方法线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我是---&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建 runnable 接口的实现类对象</span></span><br><span class="line">        TestThread_Runnable testThread_runnable = <span class="keyword">new</span> TestThread_Runnable();</span><br><span class="line">        <span class="comment">//创建线程对象，通过线程对象来开启线程，</span></span><br><span class="line">        <span class="keyword">new</span> Thread(testThread_runnable).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你是---&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：</p>
<ul>
<li><p>继承 Thread 类</p>
<p>子类继承 Thread 类具备多线程能力</p>
<p>启动线程：子类对象.start()</p>
<p>不建议使用，避免 OOP 单继承局限性</p>
</li>
<li><p>实现 Runnable 接口</p>
<p>实现接口 Runnable 具有多线程功能</p>
<p>启动线程：传入目标对象+Thread对象.start()</p>
<p>推荐使用，避免单继承局限性，灵活方便，方便同一个对象被多个线程使用。</p>
</li>
</ul>
</blockquote>
<h3 id="2-3-线程停止"><a href="#2-3-线程停止" class="headerlink" title="2.3 线程停止"></a>2.3 线程停止</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试停止线程 Stop</span></span><br><span class="line"><span class="comment">//1. 建议线程正常停止，利用次数 不建议死循环</span></span><br><span class="line"><span class="comment">//2. 建议使用标志，设置一个 flag 标志判断是否停止线程</span></span><br><span class="line"><span class="comment">//3. 不要使用 stop 或者 destory 等过时或者 JDK 不建议使用的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStop</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 设置一个标志位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run...Thread&quot;</span>+ i++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置一个公开的方法停止线程，修改 flag 值为 false</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestStop testStop = <span class="keyword">new</span> TestStop();</span><br><span class="line">        <span class="keyword">new</span> Thread(testStop).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main&quot;</span>+i);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">800</span>)&#123;</span><br><span class="line">                <span class="comment">//调用 stop 方法修改 flag 停止线程</span></span><br><span class="line">                testStop.stop();</span><br><span class="line">                System.out.println(<span class="string">&quot;线程停止了！！！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-线程休眠"><a href="#2-4-线程休眠" class="headerlink" title="2.4. 线程休眠"></a>2.4. 线程休眠</h3><ul>
<li>sleep(时间) 指定当前线程阻塞的毫秒数（1000ms = 1s）</li>
<li>sleep 存在异常 InterruptedException</li>
<li>sleep 时间达到后线程进入就绪状态</li>
<li>sleep 可以模拟网络延时，倒计时等</li>
<li>每一个对象都有一个锁，sleep 不会释放锁</li>
</ul>
<blockquote>
<p>模拟倒计时</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟倒计时</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSleep</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            timeDown();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">timeDown</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(num--);</span><br><span class="line">            <span class="keyword">if</span> (num &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>一秒输出一下当前时间</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSleep</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date(System.currentTimeMillis());<span class="comment">//获取当前时间</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;HH:mm:ss&quot;</span>).format(date));</span><br><span class="line">            date = <span class="keyword">new</span> Date(System.currentTimeMillis());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-线程礼让-yield"><a href="#2-5-线程礼让-yield" class="headerlink" title="2.5 线程礼让(yield)"></a>2.5 线程礼让(yield)</h3><ul>
<li>礼让线程，让当前正在执行的线程暂停，但不阻塞</li>
<li>将线程从运行状态转换就绪状态</li>
<li>让 cpu 重新调度，礼让不一定成功，看 cpu 心情</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试礼让线程</span></span><br><span class="line"><span class="comment">//礼让不一定成功，看 cpu 调度</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestYield</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyYield myYield = <span class="keyword">new</span> MyYield();</span><br><span class="line">        <span class="keyword">new</span> Thread(myYield,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(myYield,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyYield</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程开始执行&quot;</span>);</span><br><span class="line">        Thread.yield();<span class="comment">//礼让线程</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程停止执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-6-强制执行-Join"><a href="#2-6-强制执行-Join" class="headerlink" title="2.6 强制执行  Join"></a>2.6 强制执行  Join</h3><ul>
<li>Join 合并线程，待此线程执行完成后，再执行其他线程，其他线程阻塞</li>
<li>相当于 插队</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试 Join 方法，想象成插队</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJoin</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程执行&quot;</span>+ i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TestJoin testJoin = <span class="keyword">new</span> TestJoin();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(testJoin);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="comment">//主线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">200</span>)&#123;</span><br><span class="line">                thread.join();<span class="comment">//插队</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;main&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-7-线程状态"><a href="#2-7-线程状态" class="headerlink" title="2.7 线程状态"></a>2.7 线程状态</h3><ul>
<li><p>NEW</p>
<p>尚未启动的线程处于此状态</p>
</li>
<li><p>RUNNABLE</p>
<p>在 Java 虚拟机中执行的线程处于此状态</p>
</li>
<li><p>BLOCKED</p>
<p>被阻塞等待监视器锁定的线程处于此状态</p>
</li>
<li><p>WAITING</p>
<p>正在等待另一个线程执行特定动作的线程处于此状态</p>
</li>
<li><p>TIMED_WAITING</p>
<p>正在等待另一个线程执行动作达到指定等待时间的线程处于此状态</p>
</li>
<li><p>TERMINATED</p>
<p>已退出的线程处于此状态</p>
</li>
</ul>
<p>一个线程可以在给定时间处于一个状态。这些状态是不反应任何操作系统线程状态的虚拟机状态。</p>
<p><img src="https://img-blog.csdnimg.cn/20210210144137167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//观察测试线程的状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//观察状态</span></span><br><span class="line">        Thread.State state = thread.getState();</span><br><span class="line">        System.out.println(state);<span class="comment">//NEW</span></span><br><span class="line">        <span class="comment">//观察启动后</span></span><br><span class="line">        thread.start();<span class="comment">//启动线程</span></span><br><span class="line">        state = thread.getState();</span><br><span class="line">        System.out.println(state);<span class="comment">//RUN</span></span><br><span class="line">        <span class="keyword">while</span> (state != Thread.State.TERMINATED)&#123;<span class="comment">//只要线程不终止就一直输出状态</span></span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            state = thread.getState();<span class="comment">//更新线程状态</span></span><br><span class="line">            System.out.println(state);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-8-线程的优先级"><a href="#2-8-线程的优先级" class="headerlink" title="2.8 线程的优先级"></a>2.8 线程的优先级</h3><ul>
<li>Java 提供了一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行</li>
<li>线程的优先级用数字表示，范围从 1 ~ 10<ul>
<li>Thread.MIN_PRIORITY = 1;</li>
<li>Thread.MAX_PRIORITY = 10;</li>
<li>Thread.NORM_PRIORITY = 5;</li>
</ul>
</li>
<li>改变或获取优先级：getPriority()     setPriority(int num)</li>
<li>设置运行后并不是一定会按照设置的优先级执行，主要按照 CPU 调度</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试线程的优先级</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPriority</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//主线程默认优先级</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---main:&quot;</span>+Thread.currentThread().getPriority());</span><br><span class="line">        MyPriority myPriority = <span class="keyword">new</span> MyPriority();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        t1.setPriority(Thread.MAX_PRIORITY);<span class="comment">//设置线程优先级最大</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.setPriority(<span class="number">1</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.setPriority(<span class="number">8</span>);</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPriority</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;----&quot;</span>+Thread.currentThread().getPriority());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-9-守护线程-daemon"><a href="#2-9-守护线程-daemon" class="headerlink" title="2.9 守护线程  (daemon)"></a>2.9 守护线程  (daemon)</h3><ul>
<li>线程分为 用户线程 和 守护线程</li>
<li>虚拟机必须确保用户线程执行完毕</li>
<li>虚拟机不用等待守护线程执行完毕</li>
<li>例如：操作日志，内存监控，垃圾回收等……</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDaemon</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        God god = <span class="keyword">new</span> God();</span><br><span class="line">        You you = <span class="keyword">new</span> You();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(god);</span><br><span class="line">        thread.setDaemon(<span class="keyword">true</span>);<span class="comment">//默认是 false 表示是用户线程，正常的线程都是用户线程</span></span><br><span class="line">        thread.start();<span class="comment">//守护线程启动</span></span><br><span class="line">        <span class="keyword">new</span> Thread(you).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">God</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;上帝守护中 ing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">36500</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;活着 ing&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;===死亡===&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-线程同步"><a href="#3-线程同步" class="headerlink" title="3. 线程同步"></a>3. 线程同步</h2><p><strong>并发：</strong>多个线程操作同一个资源，同一个对象被多个线程同时操作</p>
<p>线程同步：现实生活中，遇到 同一个资源，多个人都想使用的问题，比如：食堂排队得一个一个来。</p>
<p>处理多线程问题时，多个线程访问同一个对象，并且某些线程还想修改这个对象，这时我们就需要线程同步，线程同步其实就是一种等待机制，多个需要同时访问此对象的线程进入到这个 对象的等待池 形成队列，等待前面线程使用完毕，下一个线程再使用。</p>
<p><strong>线程同步安全性</strong>：形成条件：队列 + 锁</p>
<ul>
<li><p>由于同一进程的多个线程共享同一块存储空间，在带来方便的同时，也带来了访问冲突问题，为了保证数据在方法中被访问时的正确性，在访问时加入 <strong>锁机制 synchronized</strong> ，当一个线程获得对象的排它锁，独占资源，其他线程必须等待，使用后释放锁即可</p>
<p>问题：</p>
<p>一个线程持有锁会导致其他所有需要此锁的线程挂起；在多线程竞争下，加锁，释放锁会导致比较多的上下文切换和调度延时，引起性能问题；如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置，引起性能问题。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟买票，不安全线程，运行结果中会有 -1，因为加入最后剩余一张票，三个人都看到一张票三个线程同时去购买，所有就会有 -1 情况。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBuyTicket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BuyTicket buyTicket = <span class="keyword">new</span> BuyTicket();</span><br><span class="line">        <span class="keyword">new</span> Thread(buyTicket, <span class="string">&quot;1号&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(buyTicket, <span class="string">&quot;2号&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(buyTicket, <span class="string">&quot;3号&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//票数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNums = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;<span class="comment">//线程停止标志</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//买票</span></span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                buy();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//判断是否有票</span></span><br><span class="line">        <span class="keyword">if</span> (ticketNums &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//模拟延时</span></span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//买票</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;票数：&quot;</span> + ticketNums--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-1-同步方法"><a href="#3-1-同步方法" class="headerlink" title="3.1 同步方法"></a>3.1 同步方法</h3><p>解决线程不安全的方法</p>
<p>由于我们可以通过 private 关键来保证数据对象只能被方法访问，所以我们只需要针对方法提出一套机制，这套机制就是 synchronized 关键字，包括两种方法：synchronized 方法和 synchronized 块。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> args)</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>synchronized 方法控制对 ”对象“ 的访问，每个对象对应一把锁，每个 synchronized 方法都必须获得调用该方法的对象锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获得这个锁，继续执行</p>
<p><strong>缺点：</strong>将一个大的方法申明为 sytnchronized 将会影响效率，只需要对需要修改的部分加锁比较好</p>
<h3 id="3-2-同步块"><a href="#3-2-同步块" class="headerlink" title="3.2 同步块"></a>3.2 同步块</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(Obj)&#123;<span class="comment">//只需要将需要  增删改  进行锁定</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Obj 称之为 同步监视器</p>
<ul>
<li>Obj 可以是任何对象，但是推荐使用共享资源作为同步监视器</li>
<li>同步方法中无需指定同步监视器，因为同步方法的同步监视器就是 this，就是这个对象本身，或者 class</li>
</ul>
<p>同步监视器执行过程：</p>
<ol>
<li>第一个线程访问，锁定同步监视器，执行其中代码</li>
<li>第二个线程访问，发现同步监视器被锁定，无法访问</li>
<li>第一个线程访问完毕，解锁同步监视器</li>
<li>第二个线程访问，发现同步监视器没有锁，然后锁定并访问</li>
</ol>
<h3 id="3-3-死锁"><a href="#3-3-死锁" class="headerlink" title="3.3 死锁"></a>3.3 死锁</h3><p>多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才能运行，而导致两个或者多个线程都在等待对方释放资源，都停止执行的情形，某一个同步块同时拥有”两个以上对象的锁“时，就可能会发生”死锁“的问题。</p>
<p><strong>产生死锁的四个必要条件：</strong></p>
<ol>
<li><p>互斥条件：一个资源每次只能被一个进程使用</p>
</li>
<li><p>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放</p>
</li>
<li><p>不剥夺条件：进程已获取的资源，在未使用完之前，不能强行剥夺</p>
</li>
<li><p>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系</p>
</li>
</ol>
<h3 id="3-4-Lock-锁"><a href="#3-4-Lock-锁" class="headerlink" title="3.4 Lock(锁)"></a>3.4 Lock(锁)</h3><p>JDK 5.0 开始，java 提供了更加强大的线程同步机制–通过显示定义同步锁对象来实现同步，同步锁使用 Lock 对象充当</p>
<p>java.util.concurrent.locks.Lock 接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock 对象加锁，线程开始访问共享资源之前应先获得 Lock 对象</p>
<p>ReentrantLock 类实现了 Lock，它拥有与 synchronized 相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是 ReentrantLock，可以显式加锁、释放锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestLock2 testLock2 = <span class="keyword">new</span> TestLock2();</span><br><span class="line">        <span class="keyword">new</span> Thread(testLock2).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(testLock2).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(testLock2).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestLock2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ticketNums = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//定义 Lock 锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//加锁</span></span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">if</span> (ticketNums &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(ticketNums--);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//解锁</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>synchronized 与 Lock 对比；</strong></p>
<ul>
<li>Lock 是显式锁(手动开启和关闭锁)，synchrnoized 是隐式锁，出了作用域自动释放</li>
<li>Lock 只有代码块锁，synchronized 有代码块锁和方法锁</li>
<li>使用 Lock 锁，JVM 将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性</li>
<li>优先使用顺序： Lock &gt; 同步代码块(已经进入了方法体，分配了相应资源) &gt; 同步方法(在方法体之外)</li>
</ul>
</blockquote>
<h2 id="4-线程协作"><a href="#4-线程协作" class="headerlink" title="4. 线程协作"></a>4. 线程协作</h2><p>线程通信；</p>
<ul>
<li><p>应用场景：生产者和消费者问题</p>
<ul>
<li><p>假如仓库中只能存放一件商品，生产者将生产出来的产品放入仓库，消费者将仓库中产品取走消费</p>
</li>
<li><p>如果仓库中没有产品，则生产者将产品放入仓库，否则停止生产并等待，直到仓库中的产品被消费者取走为止</p>
</li>
<li><p>如果仓库中没有产品，则消费者可以将产品取走消费，否则停止消费并等待，直到仓库中再次放入产品为止。</p>
<p><img src="https://img-blog.csdnimg.cn/20210210144205414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
</li>
</ul>
</li>
</ul>
<p>分析：</p>
<p><strong>一个线程同步问题，生产者和消费者共享同一个资源，并且生产者和消费者之间相互依赖，互为条件</strong></p>
<p>对于生产者，没有生产产品之前，要通知消费者等待，而生产了产品之后，又需要马上通知消费者消费</p>
<p>对于消费者，在消费之后，要通知生产者已经结束消费，需要生产新的产品以供消费</p>
<p>在生产者消费者问题中，仅有 synchronized 是不够的</p>
<ul>
<li>synchronized 可阻止并发更新同一个共同资源，实现了同步</li>
<li>synchronized 不能用来实现不同线程之间的消息传递,通信</li>
</ul>
<blockquote>
<p>java 提供了几个方法解决线程之间的通信问题</p>
<p>均是 Object 类的方法，都只能在同步方法或者同步代码块中使用，否则会抛出异常：IIIegalMonitorStateException</p>
</blockquote>
<table>
<thead>
<tr>
<th>方法名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>wait（）</td>
<td>表示线程一直等待，直到其他线程通知，与 sleep 不同，会释放锁</td>
</tr>
<tr>
<td>wait（long timeout）</td>
<td>指定等待的毫秒数</td>
</tr>
<tr>
<td>notify（）</td>
<td>唤醒一个处于等待状态的线程</td>
</tr>
<tr>
<td>notifyAll（）</td>
<td>唤醒同一个对象上所有调用 wait() 方法的线程，优先级别高的线程优先调度</td>
</tr>
</tbody></table>
<h3 id="4-1-解决方法-1"><a href="#4-1-解决方法-1" class="headerlink" title="4.1 解决方法 1"></a>4.1 解决方法 1</h3><p>并发协作模型 ”生产者/消费者模式“ –&gt; 管程法</p>
<ul>
<li><p>生产者：负责生产数据的模块：可能是方法，对象，线程，进程</p>
</li>
<li><p>消费者：负责处理数据的模块：可能是方法，对象，线程，进程</p>
</li>
<li><p>缓冲区：消费者不能直接使用生产者的数据，他们之间有个”缓冲区“</p>
<p>生产者将生产好的数据放入缓冲区，消费者从缓冲区拿出数据</p>
<p><img src="https://img-blog.csdnimg.cn/20210210144217878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynContainer container = <span class="keyword">new</span> SynContainer();</span><br><span class="line">        <span class="keyword">new</span> Productor(container).start();</span><br><span class="line">        <span class="keyword">new</span> Customer(container).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Productor</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    SynContainer container;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Productor</span><span class="params">(SynContainer container)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            container.push(<span class="keyword">new</span> Chicken(i));</span><br><span class="line">            System.out.println(<span class="string">&quot;生产了&quot;</span> + i + <span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    SynContainer container;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(SynContainer container)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//消费</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消费了--&quot;</span> + container.pop().id + <span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chicken</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;<span class="comment">//产品编号</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chicken</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//缓冲区</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynContainer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//需要一个容器大小</span></span><br><span class="line">    Chicken[] chickens = <span class="keyword">new</span> Chicken[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">//容器计数器</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//生产者放入产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Chicken chicken)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果容器满了，就需要等待消费者消费</span></span><br><span class="line">        <span class="keyword">if</span> (count == chickens.length) &#123;</span><br><span class="line">            <span class="comment">//通知消费者消费，生产等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没有满，我们就需要丢入产品</span></span><br><span class="line">        chickens[count] = chicken;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="comment">//可以通知消费者消费了</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//消费者消费产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Chicken <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断能否消费</span></span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//等待生产者生产，消费者等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果可以消费</span></span><br><span class="line">        count--;</span><br><span class="line">        Chicken chicken = chickens[count];</span><br><span class="line">        <span class="comment">//消费完了通知生产者生产</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">return</span> chicken;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-解决方法-2"><a href="#4-2-解决方法-2" class="headerlink" title="4.2 解决方法 2"></a>4.2 解决方法 2</h3><p>并发写作模型 ”生产者/消费者模式“ –&gt; 信号灯法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPC2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TV tv = <span class="keyword">new</span> TV();</span><br><span class="line">        <span class="keyword">new</span> Player(tv).start();</span><br><span class="line">        <span class="keyword">new</span> Watcher(tv).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者：演员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    TV tv;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Player</span><span class="params">(TV tv)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;播放中......&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者：观众</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    TV tv;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Watcher</span><span class="params">(TV tv)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            tv.watch();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产品，TV节目</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV</span></span>&#123;</span><br><span class="line">    <span class="comment">//演员表演，观众等待</span></span><br><span class="line">    <span class="comment">//观众观看，演员等待</span></span><br><span class="line">    String voice;<span class="comment">//表演的节目</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">//表演</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String voice)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;演员表演了：&quot;</span>+voice);</span><br><span class="line">        <span class="comment">//通知观众观看</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();<span class="comment">//通知唤醒</span></span><br><span class="line">        <span class="keyword">this</span>.voice = voice;</span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//观看</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">watch</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;观看了：&quot;</span>+ voice);</span><br><span class="line">        <span class="comment">//通知演员表演</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-解决方法-3"><a href="#4-3-解决方法-3" class="headerlink" title="4.3 解决方法 3"></a>4.3 解决方法 3</h3><p>使用线程池</p>
<p>经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大。</p>
<p><strong>思路：</strong>提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具</p>
<p><strong>优点：</strong></p>
<ul>
<li>提高相应速度(减少了创建新线程的时间)</li>
<li>降低资源消耗(重复利用线程池中线程，不需要每次都创建)</li>
<li>便于线程管理(…)<ul>
<li>corePoolSize：核心池的大小</li>
<li>maximumPoolSize：最大线程数</li>
<li>keepAliveTime：线程没有任务时最多保持多长时间后会终止</li>
</ul>
</li>
</ul>
<p><strong>使用线程池：</strong></p>
<ul>
<li>JDK 5.0 后提供了相关 API：ExecutorService 和 Executors</li>
<li>ExecutorService：真正的线程池接口，常见子类 ThreadPoolExecutor<ul>
<li>void execute(Runnable command)：执行任务/命令，没有返回值，一般用来执行 Runnable</li>
<li><T> Future <T> submit(Callable<T>task)：执行任务，有返回值，一般用来执行 Callable</T></T></T></li>
<li>void shutdown() ：关闭连接池</li>
</ul>
</li>
<li>Executors：工具类、线程池的工厂类，用于创建并返回不同类型的线程池</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建服务，创建线程池</span></span><br><span class="line">        <span class="comment">//参数为线程池大小</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//2. 执行</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        <span class="comment">//3. 关闭池子链接</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果:</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p><strong><a href="https://www.bilibili.com/video/BV1V4411p7EF?p=1">学习参考视频</a></strong>  一起学习一起进步💪</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的序列化Serializable</title>
    <url>/2021/08/03/Java/Java%E4%B8%AD%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96Serializable/</url>
    <content><![CDATA[<blockquote>
<p>Java 提供了一种对象序列化的机制，该机制中，一个对象可以被表示为一个字节序列，该字节序列包括该对象的数据、有关对象的类型和信息和存储在对象中数据的类型。<br>将序列化对象写入文件之后，可以从文件中读取出来，并且对它进行反序列化，也就是说，对象的类型信息、对象的数据还有对象中的数据类型可以用来在内存中新建对象。<br>整个过程都是 JVM 独立的，在一个平台上序列化的对象可以在另一个完全不同的平台上反序列化该对象。<br>类 ObjectOutputStream 和 ObjectOutputStream 是高层次的数据流，它们包含反序列化和序列化对象的方法。</p>
</blockquote>
<p>序列化满足条件：</p>
<ul>
<li>该类实现 java.io.Serializable 接口</li>
<li>该类的所有属性必须是可序列化的，如果一个属性不是可序列化的，则该属性必须注明是短暂的</li>
<li>如果想知道一个 java 标准类是否可以序列化，只需查看该类有没有实现 java.io.Serializable 接口</li>
</ul>
<blockquote>
<p><strong>代码实现</strong></p>
</blockquote>
<p>首先创建一个Student.java类并且集成 java.io.Serializable 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="comment">//省略有无参构造，get/set方法，toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>1. 序列化对象</strong></p>
<p>   ObjectOutputStream 类用来序列化一个对象，下面代码将 Student 对象序列化，并将该对象序列化到 d 盘 student.txt 文件中。</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Student student1 = <span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        Student student2 = <span class="keyword">new</span> Student(<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        Student student3 = <span class="keyword">new</span> Student(<span class="string">&quot;王五&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        FileOutputStream outFile = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;d:/student.txt&quot;</span>);</span><br><span class="line">        ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(outFile);</span><br><span class="line">        out.writeObject(student1);</span><br><span class="line">        out.writeObject(student2);</span><br><span class="line">        out.writeObject(student3);</span><br><span class="line">        out.close();</span><br><span class="line">        outFile.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20210202160008424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<p><strong>2. 反序列对象</strong>，将上面序列化完成的对象反序列化</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        FileInputStream inFile = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;d:/student.txt&quot;</span>);</span><br><span class="line">        ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(inFile);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(in.readObject());</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">        inFile.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    Student&#123;name=<span class="string">&#x27;张三&#x27;</span>, age=<span class="number">20</span>, sex=<span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line">	Student&#123;name=<span class="string">&#x27;李四&#x27;</span>, age=<span class="number">20</span>, sex=<span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line">	Student&#123;name=<span class="string">&#x27;王五&#x27;</span>, age=<span class="number">20</span>, sex=<span class="string">&#x27;男&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的数据结构</title>
    <url>/2021/08/03/Java/Java%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h4 id="1-枚举-Enumeration"><a href="#1-枚举-Enumeration" class="headerlink" title="1. 枚举 (Enumeration)"></a>1. 枚举 (Enumeration)</h4><p>枚举接口本身不属于数据结构，定义了一种从数据结构中取回连续元素的方式。</p>
<p>Enumeration 接口中定义了一些方法，通过这些方法可以枚举对象集合中的元素。现如今已经很少使用了。</p>
<blockquote>
<p>声明方法：</p>
<ul>
<li>boolean hasMoreElements()：测试枚举是否包含更多的元素</li>
<li>Object nextElement()：如果此枚举对象至少还有一个可提供的元素，则返回此枚举的下一个元素。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Enumeration&lt;String&gt; str;</span><br><span class="line">        Vector&lt;String&gt; strings = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        strings.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        strings.add(<span class="string">&quot;python&quot;</span>);</span><br><span class="line">        strings.add(<span class="string">&quot;english&quot;</span>);</span><br><span class="line">        str = strings.elements();</span><br><span class="line">        <span class="keyword">while</span> (str.hasMoreElements())&#123;  <span class="comment">//测试枚举是否包含更多的元素</span></span><br><span class="line">            System.out.println(str.nextElement());<span class="comment">//此枚举对象至少还有一个可提供的元素，</span></span><br><span class="line">                                            <span class="comment">// 则返回此枚举的下一个元素。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    java</span><br><span class="line">    python</span><br><span class="line">    english</span><br></pre></td></tr></table></figure>

<h4 id="2-位集合-BitSet"><a href="#2-位集合-BitSet" class="headerlink" title="2. 位集合 (BitSet)"></a>2. 位集合 (BitSet)</h4><p>位集合类实现了一组可以单独设置和清除的位或标志，该类在处理一组布尔值的时候非常有用，只需要给每个赋值一位，然后对位进行适当的设置或清除，就可以对布尔值进行操作了。</p>
<p>一个 BitSet 类创建一种特殊类型的数组来保存位值，BitSet 中数组大小会随需要增加。</p>
<blockquote>
<p><strong>声明方法：</strong></p>
<ul>
<li>BitSet()：创建一个默认的对象</li>
<li>BitSet(int size)：允许用户指定初始大小，所有位初始化为 0</li>
</ul>
</blockquote>
<p><strong>常用方法：</strong></p>
<ol>
<li><p>void set() </p>
<ul>
<li>void set(int index)：将指定索引处的位置设置为true</li>
<li>void set(int index, boolean v)：将指定索引处的位置设置为指定的值</li>
<li>void set(int startIndex, int endIndex)：从startIndex(包括) 到 endIndex(不包括包括) 范围内的位设置为true</li>
<li>void set(int startIndex, int endIndex, boolean v)：从startIndex(包括) 到 endIndex(不包括包括) 范围内的位设置为指定的值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BitSet bitSet = <span class="keyword">new</span> BitSet();</span><br><span class="line">        bitSet.set(<span class="number">1</span>);</span><br><span class="line">        bitSet.set(<span class="number">2</span>,<span class="keyword">true</span>);</span><br><span class="line">        bitSet.set(<span class="number">3</span>,<span class="number">6</span>);</span><br><span class="line">        bitSet.set(<span class="number">6</span>,<span class="number">8</span>,<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(bitSet.toString());</span><br><span class="line">        <span class="comment">//String toString()：返回此为set的字符串表示形式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>int size()</p>
<p>功能：返回 BitSet 表示位值时实际使用空间的位数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BitSet bitSet = <span class="keyword">new</span> BitSet();</span><br><span class="line">        bitSet.set(<span class="number">3</span>,<span class="number">6</span>);</span><br><span class="line">        System.out.println(bitSet.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">64</span></span><br></pre></td></tr></table></figure></li>
<li><p>int length()</p>
<p>功能：返回此 bitSet 的逻辑大小：BitSet 中最高设置位索引加1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BitSet bitSet = <span class="keyword">new</span> BitSet();</span><br><span class="line">        bitSet.set(<span class="number">3</span>,<span class="number">6</span>);</span><br><span class="line">        System.out.println(bitSet.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">6</span></span><br></pre></td></tr></table></figure></li>
<li><p>boolean isEmpty()</p>
<p>功能：如果此 BitSet 中没有包含任何设置为 true 的位，则返回true</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BitSet bitSet = <span class="keyword">new</span> BitSet();</span><br><span class="line">        System.out.println(bitSet.isEmpty());</span><br><span class="line">        bitSet.set(<span class="number">3</span>,<span class="number">6</span>);</span><br><span class="line">        System.out.println(bitSet.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">false</span></span><br></pre></td></tr></table></figure></li>
<li><p>int cardinality()</p>
<p>功能：返回此 BitSet 中设置为 true 的位数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BitSet bitSet = <span class="keyword">new</span> BitSet();</span><br><span class="line">        bitSet.set(<span class="number">3</span>,<span class="number">6</span>);</span><br><span class="line">        System.out.println(bitSet.cardinality());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">3</span></span><br></pre></td></tr></table></figure></li>
<li><p>Object clone()</p>
<p>功能：复制 BitSet，生成一个相等的新的 BitSet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BitSet bitSet1 = <span class="keyword">new</span> BitSet();</span><br><span class="line">        bitSet1.set(<span class="number">3</span>,<span class="number">6</span>);</span><br><span class="line">        System.out.println(bitSet1.toString());</span><br><span class="line">        Object bitSet2 = bitSet1.clone();</span><br><span class="line">        System.out.println(bitSet2.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">	&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">	&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>int hashCode()</p>
<p>功能：返回此位 set 的哈希码值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BitSet bitSet = <span class="keyword">new</span> BitSet();</span><br><span class="line">        bitSet.set(<span class="number">1</span>);</span><br><span class="line">        System.out.println(bitSet.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">   <span class="number">1232</span> </span><br></pre></td></tr></table></figure></li>
<li><p>boolean equals(Object bitSet)</p>
<p>功能：将此对象与指定的对象进行比较</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BitSet bitSet1 = <span class="keyword">new</span> BitSet();</span><br><span class="line">        bitSet1.set(<span class="number">0</span>);</span><br><span class="line">        Object bitSet2 = bitSet1.clone();</span><br><span class="line">        System.out.println(bitSet1.equals(bitSet2));</span><br><span class="line">        BitSet bitSet3 = <span class="keyword">new</span> BitSet();</span><br><span class="line">        bitSet3.set(<span class="number">2</span>);</span><br><span class="line">        System.out.println(bitSet1.equals(bitSet3));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">false</span></span><br></pre></td></tr></table></figure></li>
<li><p>void clear()</p>
<ul>
<li>void clear()：将此 BitSet 中的所有位设置为false</li>
<li>void clear(int index)：将索引指定处的位设置位 false</li>
<li>void clear(int startIndex, int endIndex)：从 startIndex(包括) 到 endIndex(不包括) 范围内的位设置为 false</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BitSet bitSet = <span class="keyword">new</span> BitSet();</span><br><span class="line">        bitSet.set(<span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line">        bitSet.clear(<span class="number">8</span>);</span><br><span class="line">        System.out.println(bitSet.toString());</span><br><span class="line">        bitSet.clear(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">        System.out.println(bitSet.toString());</span><br><span class="line">        bitSet.clear();</span><br><span class="line">        System.out.println(bitSet.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>&#125;</span><br><span class="line">	&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>&#125;</span><br><span class="line">	&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>boolean get(int index)</p>
<ul>
<li>boolean get(int index)：返回指定索引处的位值</li>
<li>BitSet get(int startIndex, int endIndex)：返回一个新的 BitSet，从startIndex(包括) 到 endIndex(不包括) 范围内的位组成</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BitSet bitSet = <span class="keyword">new</span> BitSet();</span><br><span class="line">        bitSet.set(<span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line">        System.out.println(bitSet.get(<span class="number">0</span>));</span><br><span class="line">        BitSet bitSet1 = bitSet.get(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(bitSet1.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">	&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>void flip(int index)</p>
<ul>
<li>void flip(int index)：将指定索引处的位设置为其当前值的补码</li>
<li>void flip(int startIndex, int endIndex)：从 startIndex(包括) 到 endIndex(不包括) 范围内的每个位设置为其当前值的补码 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BitSet bitSet = <span class="keyword">new</span> BitSet();</span><br><span class="line">        bitSet.set(<span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line">        bitSet.flip(<span class="number">1</span>);</span><br><span class="line">        bitSet.flip(<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line">        System.out.println(bitSet.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>boolean intersects(BitSet bitSet)</p>
<p>功能：如果指定的 BitSet 中有设置为  true 的位，并且在此 BitSet 中也将其设置为 true，则返回true</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BitSet bitSet = <span class="keyword">new</span> BitSet();</span><br><span class="line">        bitSet.set(<span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line">        BitSet bitSet1 = <span class="keyword">new</span> BitSet();</span><br><span class="line">        bitSet1.set(<span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line">        System.out.println(bitSet1.intersects(bitSet));</span><br><span class="line">        System.out.println(bitSet.toString());</span><br><span class="line">        System.out.println(bitSet1.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">	&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>int nextClearBit(int startIndex)</p>
<p>功能：返回第一个设置为false的位的索引，这发生在指定的起始索引或之后的索引上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BitSet bitSet = <span class="keyword">new</span> BitSet();</span><br><span class="line">        bitSet.set(<span class="number">0</span>,<span class="keyword">true</span>);</span><br><span class="line">        bitSet.set(<span class="number">1</span>,<span class="keyword">false</span>);</span><br><span class="line">        System.out.println(bitSet.nextClearBit(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><p>int nextSetBit(int startIndex)</p>
<p>功能：返回第一个设置为 true 的位的索引，这发生在指定的起始索引或之后的索引上。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BitSet bitSet = <span class="keyword">new</span> BitSet();</span><br><span class="line">        bitSet.set(<span class="number">0</span>,<span class="keyword">true</span>);</span><br><span class="line">        bitSet.set(<span class="number">1</span>,<span class="keyword">false</span>);</span><br><span class="line">        System.out.println(bitSet.nextSetBit(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">0</span></span><br></pre></td></tr></table></figure></li>
<li><p>void and(BitSet set)</p>
<p>功能：目标为 set 和参数位 set 执行逻辑与操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BitSet bitSet1 = <span class="keyword">new</span> BitSet();</span><br><span class="line">        BitSet bitSet2 = <span class="keyword">new</span> BitSet();</span><br><span class="line">        bitSet1.set(<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">        bitSet2.set(<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">        bitSet2.set(<span class="number">1</span>,<span class="keyword">false</span>);</span><br><span class="line">        System.out.println(bitSet1.toString());</span><br><span class="line">        System.out.println(bitSet2.toString());</span><br><span class="line">        bitSet1.and(bitSet2);</span><br><span class="line">        System.out.println(bitSet1.toString());</span><br><span class="line">        System.out.println(bitSet2.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	&#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	&#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	&#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>void or(BitSet bitSet)</p>
<p>功能：目标为 set 和参数位 set 执行逻辑或操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BitSet bitSet1 = <span class="keyword">new</span> BitSet();</span><br><span class="line">        BitSet bitSet2 = <span class="keyword">new</span> BitSet();</span><br><span class="line">        bitSet1.set(<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">        bitSet2.set(<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">        bitSet2.set(<span class="number">1</span>,<span class="keyword">false</span>);</span><br><span class="line">        System.out.println(bitSet1.toString());</span><br><span class="line">        System.out.println(bitSet2.toString());</span><br><span class="line">        bitSet1.or(bitSet2);</span><br><span class="line">        System.out.println(bitSet1.toString());</span><br><span class="line">        System.out.println(bitSet2.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	&#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	&#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>void xor(BitSet bitSet)</p>
<p>功能：目标为 set 和参数位 set 执行逻辑异或操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BitSet bitSet1 = <span class="keyword">new</span> BitSet();</span><br><span class="line">        BitSet bitSet2 = <span class="keyword">new</span> BitSet();</span><br><span class="line">        bitSet1.set(<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">        bitSet2.set(<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">        bitSet2.set(<span class="number">1</span>,<span class="keyword">false</span>);</span><br><span class="line">        System.out.println(bitSet1.toString());</span><br><span class="line">        System.out.println(bitSet2.toString());</span><br><span class="line">        bitSet1.xor(bitSet2);</span><br><span class="line">        System.out.println(bitSet1.toString());</span><br><span class="line">        System.out.println(bitSet2.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	&#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	&#123;<span class="number">1</span>&#125;</span><br><span class="line">	&#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>void andNot(BitSet set)</p>
<p>功能：清除此 BitSet 中所有位，其相应的位在指定的 BitSet 中已设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BitSet bitSet1 = <span class="keyword">new</span> BitSet();</span><br><span class="line">        BitSet bitSet2 = <span class="keyword">new</span> BitSet();</span><br><span class="line">        bitSet1.set(<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">        bitSet2.set(<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">        bitSet2.set(<span class="number">1</span>,<span class="keyword">false</span>);</span><br><span class="line">        System.out.println(bitSet1.toString());</span><br><span class="line">        System.out.println(bitSet2.toString());</span><br><span class="line">        bitSet1.andNot(bitSet2);</span><br><span class="line">        System.out.println(bitSet1.toString());</span><br><span class="line">        System.out.println(bitSet2.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	&#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	&#123;<span class="number">1</span>&#125;</span><br><span class="line">	&#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="3-向量-Vector"><a href="#3-向量-Vector" class="headerlink" title="3. 向量 (Vector)"></a>3. 向量 (Vector)</h4><p>Vector 类和传统数组非常相似，但Vector可以根据需要动态的改变大小，Vector对象的元素也能通过索引访问，创建的时候不必给出对象指定的大小。</p>
<p>Vector 类实现了一个动态数组，与 ArrayList 相似，但是 Vector 是同步访问的，包含了许多传统的方法，这些方法不属于集合框架。</p>
<blockquote>
<p>构造方法：</p>
<ul>
<li>Vector()：创建一个默认的向量，默认大小为 10</li>
<li>Vector(int size)：创建指定大小的向量</li>
<li>Vector(int size, int incr)：创建指定大小的向量，并且增量用 incr 指定，增量表示向量每次增加的元素数目</li>
<li>Vector(Collection c)：创建一个包含集合 c 元素的向量</li>
</ul>
</blockquote>
<blockquote>
<p>常用方法：</p>
</blockquote>
<ol>
<li><p>void add()</p>
<ul>
<li>void add(int index, Object element)：在此向量的指定位置插入指定的元素</li>
<li>boolean add(Object o)：将指定元素添加到此向量的末尾</li>
<li>boolean addAll(Collection c)：将指定 Collection 中的所有元素添加到此向量的末尾，按照指定 collection 的迭代器所返回的顺序添加这些元素</li>
<li>boolean addAll(int index, Collection c)：在指定位置将 Collection 中的所有元素插入到此向量中</li>
<li>void addElement(Object obj)：将指定的组件添加到此向量的末尾，将其大小增加 1</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;Object&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        vector.addElement(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        System.out.println(vector.toString());</span><br><span class="line">        <span class="comment">//String toString()：返回此变量的字符串表示形式，其中包含每个元素的String表示形式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    [aaa]</span><br></pre></td></tr></table></figure></li>
<li><p>int capacity()</p>
<p>功能：返回此向量的当前容量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;Object&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        System.out.println(vector.capacity());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">10</span></span><br></pre></td></tr></table></figure></li>
<li><p>void clear()</p>
<p>功能：从此向量中移除所有元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;Object&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        vector.addElement(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        vector.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Object clone()</p>
<p>功能：返回向量的一个副本</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;Object&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        vector.addElement(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        Object clone = vector.clone();</span><br><span class="line">        System.out.println(clone.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    [aaa]</span><br></pre></td></tr></table></figure></li>
<li><p>void copyInto(Object[] anArray)</p>
<p>功能：将此向量的组件复制到指定的数组中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;Object&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        vector.addElement(<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">        vector.addElement(<span class="string">&quot;bbbb&quot;</span>);</span><br><span class="line">        String[] str = <span class="keyword">new</span> String[<span class="number">5</span>];</span><br><span class="line">        vector.copyInto(str);</span><br><span class="line">        <span class="keyword">for</span> (String s : str) &#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    aaaa</span><br><span class="line">    bbbb</span><br><span class="line">    <span class="keyword">null</span></span><br><span class="line">    <span class="keyword">null</span></span><br><span class="line">    <span class="keyword">null</span></span><br></pre></td></tr></table></figure></li>
<li><p>Object elementAt(int index)</p>
<p>功能：返回指定索引处的组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;Object&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        vector.addElement(<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">        vector.addElement(<span class="string">&quot;bbbb&quot;</span>);</span><br><span class="line">        System.out.println(vector.elementAt(<span class="number">0</span>));</span><br><span class="line">        System.out.println(vector.elementAt(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    aaaa</span><br><span class="line">    bbbb</span><br></pre></td></tr></table></figure></li>
<li><p>Enumeration elements()</p>
<p>功能：返回此向量的组件的枚举</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;Object&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        vector.addElement(<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">        vector.addElement(<span class="string">&quot;bbbb&quot;</span>);</span><br><span class="line">        Enumeration&lt;Object&gt; elements = vector.elements();</span><br><span class="line">        <span class="keyword">while</span> (elements.hasMoreElements())&#123;</span><br><span class="line">            System.out.println(elements.nextElement());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    aaaa</span><br><span class="line">    bbbb</span><br></pre></td></tr></table></figure></li>
<li><p>Object firstElement()</p>
<p>功能：返回此向量的第一个组件，索引值 为 0处</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;Object&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        vector.addElement(<span class="number">1</span>);</span><br><span class="line">        System.out.println(vector.firstElement());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果:</span><br><span class="line">	<span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><p>Object lastElement()</p>
<p>功能：返回此向量的最后一个组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;Object&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        vector.addElement(<span class="number">1</span>);</span><br><span class="line">        System.out.println(vector.lastElement());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><p>Object get(int index)</p>
<p>功能：返回向量中指定位置的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;Object&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        vector.addElement(<span class="number">1</span>);</span><br><span class="line">        System.out.println(vector.get(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><p>int hashCode()</p>
<p>功能：返回此向量的哈希码值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;Object&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        vector.addElement(<span class="number">1</span>);</span><br><span class="line">        System.out.println(vector.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">32</span></span><br></pre></td></tr></table></figure></li>
<li><p>int indexOf()</p>
<ul>
<li>int indexOf(Object elem)：返回此向量中第一次出现的指定元素的索引，如果此向量不包含该元素，返回 -1</li>
<li>int indexOf(Object elem, int index)：返回此向量中第一次出现的指定元素的索引，从 index 处正向搜索，如果没有找到 返回 -1</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;Object&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        vector.addElement(<span class="number">1</span>);</span><br><span class="line">        vector.addElement(<span class="number">2</span>);</span><br><span class="line">        vector.addElement(<span class="number">3</span>);</span><br><span class="line">        System.out.println(vector.indexOf(<span class="number">3</span>));</span><br><span class="line">        System.out.println(vector.indexOf(<span class="string">&quot;aa&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">2</span></span><br><span class="line">    -<span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><p>void insertElementAt(Object obj, int index)</p>
<p>功能：将指定对象作为此向量中的组件插入到指定的index处</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;Object&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        vector.addElement(<span class="number">1</span>);</span><br><span class="line">        vector.addElement(<span class="number">2</span>);</span><br><span class="line">        vector.addElement(<span class="number">3</span>);</span><br><span class="line">        vector.insertElementAt(<span class="string">&quot;aaa&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(vector.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    [<span class="number">1</span>, aaa, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>boolean isEmpty()</p>
<p>功能：测试此向量是否不包含组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;Object&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        System.out.println(vector.isEmpty());</span><br><span class="line">        vector.addElement(<span class="number">1</span>);</span><br><span class="line">        vector.addElement(<span class="number">2</span>);</span><br><span class="line">        vector.addElement(<span class="number">3</span>);</span><br><span class="line">        System.out.println(vector.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">false</span></span><br></pre></td></tr></table></figure></li>
<li><p>int lastIndexOf()</p>
<ul>
<li>int lastIndexOf(Object elem)：返回此向量中最后一次出现的指定元素的索引；如果不包含返回 -1</li>
<li>int lastIndexOf(Object elem, int index)：返回此向量中最后一次出现的指定元素的索引，从index处逆向搜索，如果找不到返回 -1</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;Object&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        vector.addElement(<span class="number">1</span>);</span><br><span class="line">        vector.addElement(<span class="number">2</span>);</span><br><span class="line">        vector.addElement(<span class="number">3</span>);</span><br><span class="line">        System.out.println(vector.lastIndexOf(<span class="number">1</span>));</span><br><span class="line">        System.out.println(vector.lastIndexOf(<span class="number">3</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">0</span></span><br><span class="line">    -<span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><p>remove()</p>
<ul>
<li><p>Object remove(int index)：移除此向量中指定位置的元素</p>
</li>
<li><p>boolean remove(Object o)：移除此向量中指定元素的第一个匹配项，如果向量不包含该元素，则保持不变</p>
</li>
<li><p>boolean removeAll(Collection c)：从向量中移除包含在指定 Collection 中的元素</p>
</li>
<li><p>void removeAllElements()：从此向量中移除全部组件，并将其大小设置为 0</p>
</li>
<li><p>boolean removeElement(Object obj)：从向量中移除变量的第一个，索引最小的匹配项</p>
</li>
<li><p>void removeElement(Object obj)：删除指定索引处的组件</p>
</li>
<li><p>protected void removeRange(int fromIndex, int toIndex)：从 List 中移除其索引位于 fromIndex(包括) 到 toIndex(不包括)之间的所有元素</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;Object&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        vector.addElement(<span class="number">1</span>);</span><br><span class="line">        vector.addElement(<span class="number">2</span>);</span><br><span class="line">        vector.addElement(<span class="number">3</span>);</span><br><span class="line">        vector.addElement(<span class="number">4</span>);</span><br><span class="line">        vector.addElement(<span class="number">5</span>);</span><br><span class="line">        vector.addElement(<span class="number">6</span>);</span><br><span class="line">        vector.addElement(<span class="number">7</span>);</span><br><span class="line">        vector.addElement(<span class="number">8</span>);</span><br><span class="line">        System.out.println(vector.toString());</span><br><span class="line">        vector.remove(<span class="number">7</span>);</span><br><span class="line">        System.out.println(vector.toString());</span><br><span class="line">        vector.removeAllElements();</span><br><span class="line">        System.out.println(vector.toString());</span><br><span class="line">        System.out.println(vector.capacity());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">	[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">	[]</span><br><span class="line">	<span class="number">10</span></span><br></pre></td></tr></table></figure></li>
<li><p>boolean retainAll(Collection c)</p>
<p>功能：在此向量中仅保留包含在指定Collection 中的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;Object&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Object&gt; objects = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        objects.add(<span class="number">1</span>);</span><br><span class="line">        vector.addElement(<span class="number">1</span>);</span><br><span class="line">        vector.addElement(<span class="number">2</span>);</span><br><span class="line">        vector.addElement(<span class="number">3</span>);</span><br><span class="line">        vector.addElement(<span class="number">4</span>);</span><br><span class="line">        vector.retainAll(objects);</span><br><span class="line">        System.out.println(vector.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    [<span class="number">1</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>Object set(int index, Object element)</p>
<p>功能：用指定的元素替换此向量中指定位置处的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;Object&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        vector.addElement(<span class="number">1</span>);</span><br><span class="line">        vector.addElement(<span class="number">2</span>);</span><br><span class="line">        vector.addElement(<span class="number">3</span>);</span><br><span class="line">        vector.addElement(<span class="number">4</span>);</span><br><span class="line">        vector.set(<span class="number">1</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        System.out.println(vector.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    [<span class="number">1</span>, aaa, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>void setElementAt(Object obj, int index)</p>
<p>功能：将此向量指定 index 处的组件设置为指定的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;Object&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        vector.addElement(<span class="number">1</span>);</span><br><span class="line">        vector.addElement(<span class="number">2</span>);</span><br><span class="line">        vector.addElement(<span class="number">3</span>);</span><br><span class="line">        vector.addElement(<span class="number">4</span>);</span><br><span class="line">        vector.setElementAt(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(vector.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>size()</p>
<ul>
<li>void setSize(int newSize)：设置此向量的大小</li>
<li>int size()：返回此向量中的组件数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;Object&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        vector.addElement(<span class="number">1</span>);</span><br><span class="line">        vector.addElement(<span class="number">2</span>);</span><br><span class="line">        vector.addElement(<span class="number">3</span>);</span><br><span class="line">        vector.addElement(<span class="number">4</span>);</span><br><span class="line">        System.out.println(vector.size());</span><br><span class="line">        vector.setSize(<span class="number">5</span>);</span><br><span class="line">        System.out.println(vector.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">4</span></span><br><span class="line">    <span class="number">5</span></span><br></pre></td></tr></table></figure></li>
<li><p>List subList(int fromIndex, int toIndex)</p>
<p>功能：返回此 List 的部分视图，元素范围为从 fromIndex(包括) 到 toIndex(不包括)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;Object&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        vector.addElement(<span class="number">1</span>);</span><br><span class="line">        vector.addElement(<span class="number">2</span>);</span><br><span class="line">        vector.addElement(<span class="number">3</span>);</span><br><span class="line">        vector.addElement(<span class="number">4</span>);</span><br><span class="line">        List&lt;Object&gt; objects = vector.subList(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object object : objects) &#123;</span><br><span class="line">            System.out.println(object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">1</span></span><br><span class="line">    <span class="number">2</span></span><br><span class="line">    <span class="number">3</span></span><br></pre></td></tr></table></figure></li>
<li><p>Object[] toArray()</p>
<ul>
<li>Object[] toArray()：返回一个数组，包含此向量中以恰当顺序存放的所有元素</li>
<li>Object[] toArray(Object[] a)：返回一个数组，包含此向量中以恰当顺序存放的所有元素，返回数组的运行时类型为指定数组的类型</li>
</ul>
<p>功能：返回一个数组，包含此向量中以恰当顺序存放的所有元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;Object&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        vector.addElement(<span class="number">1</span>);</span><br><span class="line">        vector.addElement(<span class="number">2</span>);</span><br><span class="line">        vector.addElement(<span class="number">3</span>);</span><br><span class="line">        vector.addElement(<span class="number">4</span>);</span><br><span class="line">        Object[] objects = vector.toArray();</span><br><span class="line">        <span class="keyword">for</span> (Object object : objects) &#123;</span><br><span class="line">            System.out.println(object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">1</span></span><br><span class="line">    <span class="number">2</span></span><br><span class="line">    <span class="number">3</span></span><br><span class="line">    <span class="number">4</span></span><br></pre></td></tr></table></figure></li>
<li><p>void trimToSize()</p>
<p>功能：对此向量的容量进行微调，使其等于向量的当前大小</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;Object&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        vector.addElement(<span class="number">1</span>);</span><br><span class="line">        vector.addElement(<span class="number">2</span>);</span><br><span class="line">        vector.addElement(<span class="number">3</span>);</span><br><span class="line">        vector.addElement(<span class="number">4</span>);</span><br><span class="line">        System.out.println(vector.capacity());</span><br><span class="line">        vector.trimToSize();</span><br><span class="line">        System.out.println(vector.capacity());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">10</span></span><br><span class="line">    <span class="number">4</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="4-栈-Stack"><a href="#4-栈-Stack" class="headerlink" title="4. 栈 (Stack)"></a>4. 栈 (Stack)</h4><p>Stack 实现了一个后进先出的数据结果，当添加一个新元素时放在其他元素的顶部，取元素的时候就从栈顶取一个元素。栈是 Vector 的一个子类，实现了一个标准的后进先出的栈，堆栈只定义了默认构造函数，用来创建一个空栈。</p>
<blockquote>
<p>构造方法：</p>
<p>Stack()</p>
</blockquote>
<p>常用方法：</p>
<ol>
<li><p>boolean empty()</p>
<p>功能：测试堆栈是否为空</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Object&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        System.out.println(stack.empty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>Object push(Object element)</p>
<p>功能：把element压入堆栈顶部</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Object&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        System.out.println(stack.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    [aaa]</span><br></pre></td></tr></table></figure></li>
<li><p>Object peek()</p>
<p>功能：查看堆栈顶部的对象，但不从堆栈中移除它</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Object&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        System.out.println(stack.peek());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    aaa</span><br></pre></td></tr></table></figure></li>
<li><p>Object pop()</p>
<p>功能：移除堆栈顶部的对象，并作为此函数的返回值返回该对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Object&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        System.out.println(stack.isEmpty());</span><br><span class="line">        System.out.println(stack.pop());</span><br><span class="line">        System.out.println(stack.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">false</span></span><br><span class="line">    aaa</span><br><span class="line">    <span class="keyword">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>int search(Object element)</p>
<p>功能：返回对象在堆栈中的位置，以 1 为基数 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Object&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        stack.push(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        System.out.println(stack.search(<span class="string">&quot;aaa&quot;</span>));</span><br><span class="line">        System.out.println(stack.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">2</span></span><br><span class="line">    [aaa, bbb]</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="5-哈希表-Hashtable"><a href="#5-哈希表-Hashtable" class="headerlink" title="5. 哈希表 (Hashtable)"></a>5. 哈希表 (Hashtable)</h4><p>Hashtable 类提供了一种在用户定义键结构的基础上来组织数据的手段。Hashtable 在哈希表中存储 键/值对，当使用一个哈希表，要指定用作键的对象，以及要连接到该键的值。然后该键经过哈希处理，所得到的散列码被用作存储在该表中值的索引</p>
<blockquote>
<p>构造方法：</p>
<ul>
<li>Hashtable()：默认构造方法</li>
<li>Hashtable(int size)：创建指定大小的哈希表</li>
<li>Hashtable(int size, float fillRatio)：创建了一个指定大小的哈希表，并且通过 filRatio 指定填充比例，填充比例必须介于 0.0 和 1.0 之间，它决定了哈希表在重新调整大小之前的充满程度</li>
<li>Hashtable(Map m)：创建了一个以 M 中元素为初始化元素的哈希表，哈希表的容量被设置为 M 的两倍</li>
</ul>
</blockquote>
<p><strong>常用方法：</strong></p>
<ol>
<li><p>boolean isEmpty()</p>
<p>功能：测试此哈希表是否没有键映射到值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hashtable&lt;Object, Object&gt; hashtable = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line">        System.out.println(hashtable.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>Object put(Object key, Object value)</p>
<p>功能：将指定 key 映射到此哈希表中的指定 value</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hashtable&lt;Object, Object&gt; hashtable = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line">        hashtable.put(<span class="number">1</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        System.out.println(hashtable.toString());</span><br><span class="line">        <span class="comment">//String toString()：返回此 Hashtable 对象的字符串表示形式，</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    &#123;<span class="number">1</span>=aaa&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>int size()</p>
<p>功能：返回此哈希表中的键的数量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hashtable&lt;Object, Object&gt; hashtable = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line">        hashtable.put(<span class="number">1</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        System.out.println(hashtable.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果:</span><br><span class="line">	<span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><p>Enumeration elements()，Enumeration keys()</p>
<p>功能：Enumeration elements() 返回此哈希表中的值的枚举</p>
<p>功能：Enumeration keys() 返回此哈希表中的键的枚举</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hashtable&lt;Object, Object&gt; hashtable = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line">        hashtable.put(<span class="number">1</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        hashtable.put(<span class="number">2</span>,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        Enumeration&lt;Object&gt; elements = hashtable.elements();</span><br><span class="line">        <span class="keyword">while</span> (elements.hasMoreElements())&#123;</span><br><span class="line">            System.out.println(elements.nextElement());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    bbb</span><br><span class="line">    aaa</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hashtable&lt;Object, Object&gt; hashtable = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line">        hashtable.put(<span class="number">1</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        hashtable.put(<span class="number">2</span>,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        hashtable.put(<span class="number">3</span>,<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        Enumeration&lt;Object&gt; keys = hashtable.keys();</span><br><span class="line">        <span class="keyword">while</span> (keys.hasMoreElements())&#123;</span><br><span class="line">            System.out.println(keys.nextElement());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">3</span></span><br><span class="line">    <span class="number">2</span></span><br><span class="line">    <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><p>Object get(Object key)</p>
<p>功能：返回指定键所映射到的值，如果此映射不包含此键的映射，则返回 null</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hashtable&lt;Object, Object&gt; hashtable = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line">        hashtable.put(<span class="number">1</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        hashtable.put(<span class="number">2</span>,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        System.out.println(hashtable.get(<span class="number">1</span>));</span><br><span class="line">        System.out.println(hashtable.get(<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    aaa</span><br><span class="line">    <span class="keyword">null</span></span><br></pre></td></tr></table></figure></li>
<li><p>contains()</p>
<ul>
<li>boolean contains(Object value)：测试此映射表中是否存在与指定值关联的键</li>
<li>boolean containsKey(Object key)：测试指定对象是否为哈希表中的值</li>
<li>boolean containsValue(Object value)：如果此Hashtable 将一个或多个键映射到此值，则返回true</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hashtable&lt;Object, Object&gt; hashtable = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line">        hashtable.put(<span class="number">1</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        hashtable.put(<span class="number">2</span>,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        hashtable.put(<span class="number">2</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        System.out.println(hashtable.contains(<span class="string">&quot;aaa&quot;</span>));</span><br><span class="line">        System.out.println(hashtable.containsKey(<span class="number">2</span>));</span><br><span class="line">        System.out.println(hashtable.containsValue(<span class="string">&quot;aaa&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>Object remove(Object key)</p>
<p>功能：从哈希表中移除该键及其相应的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hashtable&lt;Object, Object&gt; hashtable = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line">        hashtable.put(<span class="number">1</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        hashtable.put(<span class="number">2</span>,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        hashtable.put(<span class="number">3</span>,<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        System.out.println(hashtable.toString());</span><br><span class="line">        hashtable.remove(<span class="number">3</span>);</span><br><span class="line">        System.out.println(hashtable.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    &#123;<span class="number">3</span>=ccc, <span class="number">2</span>=bbb, <span class="number">1</span>=aaa&#125;</span><br><span class="line">	&#123;<span class="number">2</span>=bbb, <span class="number">1</span>=aaa&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Object clone()</p>
<p>功能：创建此哈希表的副本</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hashtable&lt;Object, Object&gt; hashtable = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line">        hashtable.put(<span class="number">1</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        hashtable.put(<span class="number">2</span>,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        hashtable.put(<span class="number">3</span>,<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        Object clone = hashtable.clone();</span><br><span class="line">        System.out.println(hashtable.toString());</span><br><span class="line">        System.out.println(clone.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    &#123;<span class="number">3</span>=ccc, <span class="number">2</span>=bbb, <span class="number">1</span>=aaa&#125;</span><br><span class="line">	&#123;<span class="number">3</span>=ccc, <span class="number">2</span>=bbb, <span class="number">1</span>=aaa&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>void clear()</p>
<p>功能：将此哈希表清空，使其不包含任何键</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hashtable&lt;Object, Object&gt; hashtable = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line">        hashtable.put(<span class="number">1</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        hashtable.put(<span class="number">2</span>,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        hashtable.put(<span class="number">3</span>,<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        System.out.println(hashtable.toString());</span><br><span class="line">        hashtable.clear();</span><br><span class="line">        System.out.println(hashtable.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    &#123;<span class="number">3</span>=ccc, <span class="number">2</span>=bbb, <span class="number">1</span>=aaa&#125;</span><br><span class="line">	&#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="6-属性-Properties"><a href="#6-属性-Properties" class="headerlink" title="6. 属性 (Properties)"></a>6. 属性 (Properties)</h4><p>Properties 继承于 Hashtable.Properties 类表示了一个持久的属性集.属性列表中每个键及其对应值都是一个字符串。</p>
<p>Properties 定义了 Properties defaults; 这个变量持有一个 Properties 对象相关的默认属性列表。</p>
<blockquote>
<p>构造方法：</p>
<ul>
<li>Properties()：没有默认值</li>
<li>Properties(Properties propDefault)：用 propDefault 作为默认值，两种情况下属性列表都为空</li>
</ul>
</blockquote>
<p>除了从 Hashtable 中所定义的方法，其他定义的常用方法：</p>
<ol>
<li><p>Object setProperty(String key, String value)</p>
<p>功能：调用 Hashtable 的方法 put</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        System.out.println(properties.getProperty(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    aaa</span><br></pre></td></tr></table></figure></li>
<li><p>String getProperty()</p>
<ul>
<li>String getProperty(String key)：用指定的键在此属性列表中搜索属性</li>
<li>String getProperty(String key, String defaultProperty)：用指定的键在属性列表中搜索属性</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        System.out.println(properties.getProperty(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;aaa&quot;</span>));</span><br><span class="line">        System.out.println(properties.getProperty(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    aaa</span><br><span class="line">    bbb</span><br></pre></td></tr></table></figure></li>
<li><p>void list()</p>
<ul>
<li>void list(PrintStream streamOut)：将属性列表输出到指定的输出流</li>
<li>void list(PrintWriter stream Out)：将属性列表输出到指定的输出流</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:/test.txt&quot;</span>);</span><br><span class="line">        PrintStream printStream = <span class="keyword">new</span> PrintStream(file);</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        properties.list(printStream);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20201122143309300.png#pic_center" alt="在这里插入图片描述"></p>
<ol start="4">
<li><p>void load(InputStream stream) throws IOException</p>
<p>功能：从输入流冲读取属性列表，键和元素对</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:/test.txt&quot;</span>);</span><br><span class="line">        PrintStream out = <span class="keyword">new</span> PrintStream(file);</span><br><span class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        properties.list(out);</span><br><span class="line">        properties.load(in);</span><br><span class="line">        System.out.println(properties.toString());</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    &#123;--=listing properties --, <span class="number">3</span>=ccc, <span class="number">2</span>=bbb, <span class="number">1</span>=aaa&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>void store(OutputStream streamOut, String description)</p>
<p>功能：以适合使用 load(InputStream) 方法加载到 Properties 表中的格式，将此 Properties 表中的属性列表(键和元素对) 写入输出流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:/test.txt&quot;</span>);</span><br><span class="line">        PrintStream out = <span class="keyword">new</span> PrintStream(file);</span><br><span class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        properties.store(out,<span class="string">&quot;4=ddd&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://img-blog.csdnimg.cn/20201122143321283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
</li>
</ol>
<p>学习内容参考自：<a href="https://www.runoob.com/java/java-data-structures.html">https://www.runoob.com/java/java-data-structures.html</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的泛型简单使用</title>
    <url>/2021/08/03/Java/Java%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>Java 泛型是 JDK5 中引入的一个新特性，泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p>
</blockquote>
<h4 id="1-泛型方法"><a href="#1-泛型方法" class="headerlink" title="1. 泛型方法"></a>1. 泛型方法</h4><p>写一个泛型方法，该方法调用时可以接收不同类型的参数，根据传递给泛型方法的参数类型，编译器适当地处理每一个方法调用。</p>
<p>定义泛型方法规则：</p>
<ul>
<li>所有泛型方法声明都有一个类型参数声明部分(由尖括号分隔)，该类型参数声明部分在方法返回类型之前</li>
<li>每一个类型参数声明部分包括一个或多个类型参数，参数间用逗号隔开。一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符。</li>
<li>类型参数能被用来声明返回值类型，并且能够作为泛型方法得到的实际参数类型的占位符</li>
<li>泛型方法体的声明和其他方法一样。注意类型参数只能代表引用类型，不能是原始类型(int，char 等)</li>
</ul>
<blockquote>
<p>自定义一个泛型方法用于输出不同类型的数组数据</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//创建不同类型的数组</span></span><br><span class="line">     Integer[] intArray = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">     Double[] doubleArray = &#123;<span class="number">1.1</span>,<span class="number">1.2</span>,<span class="number">1.3</span>,<span class="number">1.4</span>,<span class="number">1.5</span>&#125;;</span><br><span class="line">     Character[] charArray = &#123;<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">     printArray(intArray);</span><br><span class="line">     printArray(doubleArray);</span><br><span class="line">     printArray(charArray);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//定义一个泛型方法 printArray，用于打印数组</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(E[] inputArray)</span></span>&#123;</span><br><span class="line">     <span class="keyword">for</span> (E e : inputArray) &#123;</span><br><span class="line">         System.out.print(<span class="string">&quot;  &quot;</span>+e);</span><br><span class="line">     &#125;</span><br><span class="line">     System.out.println();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span></span><br><span class="line"><span class="number">1.1</span>  <span class="number">1.2</span>  <span class="number">1.3</span>  <span class="number">1.4</span>  <span class="number">1.5</span></span><br><span class="line">A  B  C  D  E </span><br></pre></td></tr></table></figure>

<h4 id="2-泛型类"><a href="#2-泛型类" class="headerlink" title="2. 泛型类"></a>2. 泛型类</h4><p>泛型类的声明和非泛型类的声明类似，除了在类名后面添加了类型参数声明部分；和泛型方法一样，泛型类的类型参数声明部分也包含一个或多个类型参数，参数间用逗号隔开。一个泛型参数，也被称为一个类型变量，用于指定一个泛型类型名称的标识符。因为它们接收一个或多个参数，这些类被称为参数化的类或参数化的类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个泛型类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T t;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test&lt;Integer&gt; integerTest = <span class="keyword">new</span> Test&lt;&gt;();</span><br><span class="line">        integerTest.add(<span class="number">10</span>);</span><br><span class="line">        System.out.println(integerTest.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h4 id="3-类型通配符"><a href="#3-类型通配符" class="headerlink" title="3. 类型通配符"></a>3. 类型通配符</h4><ol>
<li>类型通配符一般是使用 ？代替具体的类型参数，List&lt;?&gt; 在逻辑上 List<String>,List<Integer> 等所有 List&lt;具体类型实参&gt; 的父类</Integer></String></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; strings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        List&lt;Integer&gt; integers = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        strings.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        integers.add(<span class="number">20</span>);</span><br><span class="line">        getData(strings);</span><br><span class="line">        getData(integers);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//因为 getData() 方法参数是 List&lt;?&gt;,所以不同类型的都可以作为这个方法的实参，这就是通配符</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">(List&lt;?&gt; data)</span></span>&#123;</span><br><span class="line">        System.out.println(data.get(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果:</span><br><span class="line">	aaa</span><br><span class="line">    <span class="number">20</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>类型通配符上集成 Number，则通配符泛型值接收 Number 及其下层子类类型</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; strings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        List&lt;Integer&gt; integers = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        strings.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        integers.add(<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//会报错，因为方法中的参数限定了参数泛型上限为 Number，所以泛型为String不是这个范围内。</span></span><br><span class="line"><span class="comment">//        getData(strings);</span></span><br><span class="line">        getData(integers);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">(List&lt;? extends Number&gt; data)</span></span>&#123;</span><br><span class="line">        System.out.println(data.get(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">20</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的注解和反射</title>
    <url>/2021/08/03/Java/Java%E4%B8%AD%E7%9A%84%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h2 id="1-注解-Annotation"><a href="#1-注解-Annotation" class="headerlink" title="1. 注解(Annotation)"></a>1. 注解(Annotation)</h2><h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h3><p>Annotation 是 JDK5.0 引入的新技术，不是程序本身，可以对程序做出解释，可以被其他程序(如：编译器等)读取，可以附加在 package，class，method，field等上面，相当于给他们添加了额外的辅助信息，我们可以通过反射机制编程实现对这些元数据的访问。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">注解格式：  @注释名</span><br><span class="line">还可以添加一些参数值，<span class="meta">@SuppressWarning(value=&quot;unchecked&quot;)</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-内置注解"><a href="#1-2-内置注解" class="headerlink" title="1.2 内置注解"></a>1.2 内置注解</h3><ul>
<li>@Override：定义在 java.lang.Override 中，只适用于修饰方法，表示一个方法生命打算重写超类中的另一个方法声明</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span>   <span class="comment">//注解，重写注解，具有约束的作用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@Deprecated：定义在 java.lang.Deprecated 中，可以用于修饰方法，属性，类，表示不鼓励使用这样的元素，通常是因为危险或者存在更好的选择</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;</span><br><span class="line">    <span class="meta">@Deprecated</span>	<span class="comment">//表示不推荐使用，但是可以使用或者存在更好的替换方式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;@Deprecated&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20210218203036738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<ul>
<li><p>@SuppressWarnings：定义在 java.lang.SuppressWarnings 中，用来抑制编译时的警告信息，该注解需要添加一个参数才能正确使用，参数是已经定义好的</p>
<blockquote>
<ol>
<li>all   2. unchecked   3. value={“unchecked”,”deprecation”}</li>
</ol>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210218203155779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
</li>
</ul>
<h3 id="1-3-自定义注解"><a href="#1-3-自定义注解" class="headerlink" title="1.3 自定义注解"></a>1.3 自定义注解</h3><ul>
<li><p>使用 <strong>@interface</strong> 自定义注解，自动继承了 java.lang.annotation.Annotation 接口</p>
<ul>
<li><p><strong>@interface</strong> 用来声明一个注解，格式：<strong>public @interface 注解名 {内容}</strong></p>
<blockquote>
<p>其中的每一个方法实际上是声明了一个配置参数，方法的名称就是参数的名称，返回值类型就是参数的类型(返回值只能是基本类型，class，string，enum)，可以通过 default 来声明参数的默认值，如果只有一个参数成员，一般参数名为 value，注解元素必须要有值，我们定义注解元素时，经常使用空字符串，0作为默认值</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span> </span>&#123;</span><br><span class="line">    <span class="meta">@MyAnnotation2(name = &quot;李&quot;)</span></span><br><span class="line">    <span class="meta">@MyAnnotation3(&quot;张&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation2&#123;</span><br><span class="line">    <span class="comment">//注解参数格式：参数类型 参数名()</span></span><br><span class="line">    <span class="comment">//default  有的话使用注解的使用可以不用带有参数</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation3&#123;</span><br><span class="line">    <span class="comment">//如果注解中只有一个参数可以使用value</span></span><br><span class="line">    <span class="comment">//这样使用注解的使用不用加 value=&quot;&quot;</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-元注解"><a href="#1-4-元注解" class="headerlink" title="1.4 元注解"></a>1.4 元注解</h3><p>元注解作用就是负责注解其他注解，Java 定义了 4 个标准的 meta-annotation 类型，他们被用来提供对其他 annotation 类型作说明</p>
<p>这些类型和它们所支持的类在 java.lang.annotation 包中可以找到</p>
<ul>
<li>@Target：用于描述注解的使用范围，即被描述的注解可以用在什么地方</li>
<li>@Retention：表示需要在什么级别保存该注解信息，用于描述注解的生命周期 (source &lt; class &lt; runtime)</li>
<li>@Document：说明该注解被包含在 javadoc 中</li>
<li>@Inherited：说明子类可以继承父类中的该注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//元注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="meta">@MyAnnotation</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个注解</span></span><br><span class="line"><span class="comment">//Target 表示注解可以用在什么地方</span></span><br><span class="line"><span class="meta">@Target(value = ElementType.METHOD)</span></span><br><span class="line"><span class="comment">//Retention 表示注解在什么地方有效， RUNTIME 运行时有效</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="comment">//@Documented 表示是否将我们的注解生成在 Javadoc 中</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">//Inherited  子类可以继承父类的注解</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-反射-Reflection"><a href="#2-反射-Reflection" class="headerlink" title="2. 反射(Reflection)"></a>2. 反射(Reflection)</h2><blockquote>
<p>了解：</p>
<p><strong>动态语言：</strong>在运行时可以改变其结构的语言：如函数、对象、代码可以引进，已有的函数可以被删除或是其他结构上的变化，就是在运行时代码可以根据某些条件改变自身结构。        主要语言：C#、JS、php、py 等</p>
<p><strong>静态语言：</strong>运行时结构不可变，主要语言：Java、C、C++</p>
<p>Java 不是动态语言，但 Java 可以称为 “准动态语言”。即 Java 有一定的动态性，可以利用反射机制获得类似动态语言的特性。Java 的动态性让编程的时候更加灵活</p>
</blockquote>
<h3 id="2-1-反射简介"><a href="#2-1-反射简介" class="headerlink" title="2.1 反射简介"></a>2.1 反射简介</h3><p>反射是 Java 被视为动态语言的关键，反射机制允许程序在执行期借助于 Reflection API 取得任何类的内部信息，并能直接操作任意对象的内部属性及方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c = Class.forName(<span class="string">&quot;java.lang.String&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>加载完类之后，在堆内存的方法区中就产生了一个 Class 类型的对象(一个类只有一个 Class 对象)，这个对象就包含了完整的类的结构信息，我们可以通过这个对象看到类的结构。通过这个对象就可以清楚的看到类的结构，所以称之为：反射</p>
<p><img src="https://img-blog.csdnimg.cn/20210218203229807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<blockquote>
<p><strong>反射机制提供的功能及优缺点</strong></p>
</blockquote>
<ol>
<li><p><strong>功能</strong></p>
<p>在运行时判断任意一个对象所属的类；在运行时构造任意一个类的对象；在运行时判断任意一个类所具有的成员变量和方法；在运行时获取泛型信息；在运行时调用任意一个对象的成员变量和方法；在运行时处理注解；生成动态代理；</p>
</li>
<li><p><strong>优点</strong></p>
<p>可以实现动态创建对象和编译，体现出很大的灵活性</p>
</li>
<li><p><strong>缺点</strong></p>
<p>对性能有影响，使用反射基本上是一种解释操作，可以告诉 JVM 系统做什么并且它满足我们的要求，这类操作总是慢于直接执行相同的操作</p>
</li>
</ol>
<h3 id="2-2-获得反射对象"><a href="#2-2-获得反射对象" class="headerlink" title="2.2 获得反射对象"></a>2.2 获得反射对象</h3><ul>
<li><p>Class 类</p>
<p>在 Object 类中定义了以下方法，此方法被所有子类继承</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Class <span class="title">getClass</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<p>该方法的返回值类型是一个 Class 类，此类是 Java 反射的源头，实际上所谓反射从程序的运行结果来看也很好理解，即：<strong>可以通过对象反射求出类的名称</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//通过反射获取类的 Class 对象</span></span><br><span class="line">        <span class="comment">//一个类在内存中只有一个 Class 对象，</span></span><br><span class="line">        <span class="comment">// 一个类被加载后，类的整个结构都会被封装在 Class 对象中</span></span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;demo01.User&quot;</span>);</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实体类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">	<span class="comment">//省略 set/get 方法，toString 方法等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-得到-Class-类方法"><a href="#2-3-得到-Class-类方法" class="headerlink" title="2.3 得到 Class 类方法"></a>2.3 得到 Class 类方法</h3><h4 id="2-3-1-Class-类"><a href="#2-3-1-Class-类" class="headerlink" title="2.3.1 Class 类"></a>2.3.1 Class 类</h4><p>对象照镜子后可以得到的信息：类的属性、方法和构造器、类到底实现了那些接口。对于每个类而言，JRE 都为其保留一个不变的 Class 类型的对象。一个 Class 对象包好了特定某个结构 (class/interface/enum/annotation/primitive type/void/[]) 的有关信息</p>
<ul>
<li>Class 本身也是一个类</li>
<li>Class 对象只能由系统建立对象</li>
<li>一个加载的类在 JVM 中只会有一个 Class 实例</li>
<li>一个 Class 对象对应的是一个加载到 JVM 中的一个 .class 文件</li>
<li>每个类的实例都会记得自己是由哪个 Class 实例所生成</li>
<li>通过 Class 可以完整地得到一个类中的所有被加载的结构</li>
<li>Class 类是 Reflection 的根源，针对任何你想动态加载、运行的类，唯有先获得相应的 Class 对象</li>
</ul>
<h4 id="2-3-2-Class-类的常用方法"><a href="#2-3-2-Class-类的常用方法" class="headerlink" title="2.3.2 Class 类的常用方法"></a>2.3.2 Class 类的常用方法</h4><p><img src="https://img-blog.csdnimg.cn/20210218203302394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<h4 id="2-3-3-获取-Class-类的实例"><a href="#2-3-3-获取-Class-类的实例" class="headerlink" title="2.3.3 获取 Class 类的实例"></a>2.3.3 获取 Class 类的实例</h4><ol>
<li><p>若已知具体的类，通过类的 class 属性获取，该方法最为安全可靠，程序性能最高</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class user = User.class;</span><br></pre></td></tr></table></figure></li>
<li><p>已知某个类的实例，调用该实例的 getClass() 方法获取 Class 对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class user1 = user.getClass();</span><br></pre></td></tr></table></figure></li>
<li><p>已知一个类的全类名，且该类在类路径下，可通过 Class 类的静态方法 forName() 获取，可能抛出异常：ClassNotFoundException</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class user1 = Class.forName(<span class="string">&quot;demo01.User&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>内置基本数据类型可以直接使用  类名.TYPE</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c4 = Integer.TYPE;</span><br></pre></td></tr></table></figure></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试 Class 类的创建方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//方式一：通过对象获得</span></span><br><span class="line">        Class c1 = person.getClass();</span><br><span class="line">        System.out.println(c1.hashCode());</span><br><span class="line">        <span class="comment">//方式二：forName 获得</span></span><br><span class="line">        Class c2 = Class.forName(<span class="string">&quot;demo01.Student&quot;</span>);</span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line">        <span class="comment">//方式三：通过类名.class 获得</span></span><br><span class="line">        Class c3 = Student.class;</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line">        <span class="comment">//方式四：基本内置类型的包装类都有一个 TYPE 属性</span></span><br><span class="line">        Class c4 = Integer.TYPE;</span><br><span class="line">        System.out.println(c4);</span><br><span class="line">        <span class="comment">//获得父类类型</span></span><br><span class="line">        System.out.println(c1.getSuperclass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;学生&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;老师&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-不同类型的-class"><a href="#2-4-不同类型的-class" class="headerlink" title="2.4 不同类型的 class"></a>2.4 不同类型的 class</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所有类型的 class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class c1 = Object.class;<span class="comment">//类</span></span><br><span class="line">        Class c2 = Comparable.class;<span class="comment">//接口</span></span><br><span class="line">        Class c3 = String[].class;<span class="comment">//一维数组</span></span><br><span class="line">        Class c4 = <span class="keyword">int</span>[][].class;<span class="comment">//二维数组</span></span><br><span class="line">        Class c5 = Override.class;<span class="comment">//注解</span></span><br><span class="line">        Class c6 = ElementType.class;<span class="comment">//枚举</span></span><br><span class="line">        Class c7 = Integer.class;<span class="comment">//基本数据类型</span></span><br><span class="line">        Class c8 = <span class="keyword">void</span>.class;<span class="comment">//void</span></span><br><span class="line">        Class c9 = Class.class;<span class="comment">//Class</span></span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        System.out.println(c3);</span><br><span class="line">        System.out.println(c4);</span><br><span class="line">        System.out.println(c5);</span><br><span class="line">        System.out.println(c6);</span><br><span class="line">        System.out.println(c7);</span><br><span class="line">        System.out.println(c8);</span><br><span class="line">        System.out.println(c9);</span><br><span class="line">        <span class="comment">//只要元素类型与维度一样，就是同一个 class</span></span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        System.out.println(a.getClass().hashCode());</span><br><span class="line">        System.out.println(b.getClass().hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br><span class="line"><span class="class">	<span class="title">interface</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Comparable</span></span></span><br><span class="line"><span class="class">	<span class="title">class</span> [<span class="title">Ljava</span>.<span class="title">lang</span>.<span class="title">String</span></span>;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> [[<span class="title">I</span></span></span><br><span class="line"><span class="class">	<span class="title">interface</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Override</span></span></span><br><span class="line"><span class="class">	<span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">annotation</span>.<span class="title">ElementType</span></span></span><br><span class="line"><span class="class">	<span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Integer</span></span></span><br><span class="line"><span class="class">	<span class="title">void</span></span></span><br><span class="line"><span class="class">	<span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Class</span></span></span><br><span class="line"><span class="class">    356573597</span></span><br><span class="line"><span class="class">	356573597	</span></span><br></pre></td></tr></table></figure>

<h3 id="2-5-创建运行时类的对象"><a href="#2-5-创建运行时类的对象" class="headerlink" title="2.5 创建运行时类的对象"></a>2.5 创建运行时类的对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获得类的信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException </span>&#123;</span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;demo01.User&quot;</span>);</span><br><span class="line">        <span class="comment">//获得类的名字</span></span><br><span class="line">        System.out.println(c1.getName());<span class="comment">//获得包名 + 类名</span></span><br><span class="line">        System.out.println(c1.getSimpleName());<span class="comment">//只获得类名</span></span><br><span class="line">        <span class="comment">//获得类的属性</span></span><br><span class="line">        Field[] fields = c1.getFields();<span class="comment">//只能找到 public 属性</span></span><br><span class="line">        fields = c1.getDeclaredFields();<span class="comment">//找到全部属性</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取指定属性的值</span></span><br><span class="line">        Field name = c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="comment">//获得类的方法</span></span><br><span class="line">        Method[] methods = c1.getMethods();<span class="comment">//获得本类及其父类的全部 public 方法</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">        methods = c1.getDeclaredMethods();<span class="comment">//获得本类的所有方法</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得指定方法</span></span><br><span class="line">        Method getName = c1.getMethod(<span class="string">&quot;getName&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">        Method setName = c1.getMethod(<span class="string">&quot;setName&quot;</span>,String.class);</span><br><span class="line">        System.out.println(getName);</span><br><span class="line">        System.out.println(setName);</span><br><span class="line">        <span class="comment">//获得指定的构造器</span></span><br><span class="line">        Constructor[] constructors = c1.getConstructors();<span class="comment">//public</span></span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        constructors = c1.getDeclaredConstructors();<span class="comment">//全部</span></span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得指定的构造器</span></span><br><span class="line">        System.out.println(c1.getDeclaredConstructor(String.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-6-动态创建对象执行"><a href="#2-6-动态创建对象执行" class="headerlink" title="2.6 动态创建对象执行"></a>2.6 动态创建对象执行</h3><p>创建类的对象：调用 Class 对象的 newInstance() 方法</p>
<ul>
<li>必须有一个无参数的构造器</li>
<li>类的构造器的访问权限需要足够</li>
</ul>
<p>创建步骤：</p>
<ol>
<li>通过 Class 类的 getDeclaredConstructor(Class … parameterTypes) 取得本类的指定形参类型的构造器</li>
<li>向构造器的形参中传递一个对象数组进去，里面包含了构造器中所需的各个参数</li>
<li>通过 Constructor 实例化对象</li>
</ol>
<blockquote>
<p>调用指定方法</p>
</blockquote>
<p>通过反射，调用类中的方法，通过 Method 类完成</p>
<ol>
<li><p>通过 Class 类的 getMethod(String name,Class … parameterTypes) 方法取得一个 Method 对象，并设置此方法操作时所需要的参数类型</p>
</li>
<li><p>之后使用 Object invoke(Object obj, Object[] args) 进行调用，并向方法中传递要设置的 obj 对象的参数信息</p>
<p><img src="https://img-blog.csdnimg.cn/20210218203340566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
</li>
</ol>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Object <span class="title">invoke</span><span class="params">(Object obj, Object[] args)</span></span></span><br><span class="line"><span class="function">- Object 对应原方法的返回值，若原方法无法返回值，此时返回 <span class="keyword">null</span></span></span><br><span class="line"><span class="function">- 若原方法若为静态方法，此时形参 Object obj 可以为 <span class="keyword">null</span></span></span><br><span class="line"><span class="function">- 若原方法形参列表为空，则 Obejct[] args 为 <span class="keyword">null</span></span></span><br><span class="line"><span class="function">- 若原方法声明为 <span class="keyword">private</span>，则需要在调用此 <span class="title">invoke</span><span class="params">()</span> 方法前，显式调用方法对象的 			<span class="title">setAccessible</span><span class="params">(<span class="keyword">true</span>)</span> 方法，将可访问 <span class="keyword">private</span> 的方法</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">setAccessible：</span></span><br><span class="line"><span class="function">    Method 和 Field、Constructor 对象都有 <span class="title">setAccessible</span><span class="params">()</span> 方法</span></span><br><span class="line"><span class="function">    setAccessible 作用是启动和禁用访问安全检查的开关</span></span><br><span class="line"><span class="function">    参数值为 <span class="keyword">true</span> 则表示反射的对象在使用时应该取消 Java 语言访问检查</span></span><br><span class="line"><span class="function">       提高反射的效率，如果代码中必须用反射，而该句代码需要频繁的被调用，那么请设置为 		   <span class="keyword">true</span></span></span><br><span class="line"><span class="function">    	使得原本无法访问的私有成员也可以访问</span></span><br><span class="line"><span class="function">    参数值为 <span class="keyword">false</span> 则表示反射的对象应该实施 Java 语言访问检查</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//动态的创建对象，通过反射</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test09</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException </span>&#123;</span><br><span class="line">        <span class="comment">//获得Class对象</span></span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;demo01.User&quot;</span>);</span><br><span class="line">        <span class="comment">//构造一个对象</span></span><br><span class="line">        User user = (User) c1.newInstance();<span class="comment">//调用了类的无参构造器</span></span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="comment">//通过构造器创建对象</span></span><br><span class="line">        Constructor constructor = c1.getDeclaredConstructor(String.class);</span><br><span class="line">        User user1 = (User) constructor.newInstance(<span class="string">&quot;李&quot;</span>);</span><br><span class="line">        System.out.println(user1);</span><br><span class="line">        <span class="comment">//通过反射调用普通方法</span></span><br><span class="line">        User user2 = (User) c1.newInstance();</span><br><span class="line">        <span class="comment">//通过反射获取一个方法</span></span><br><span class="line">        Method setName = c1.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">//invoke : 激活</span></span><br><span class="line">        <span class="comment">//(对象，“方法值”)</span></span><br><span class="line">        setName.invoke(user2,<span class="string">&quot;李丽&quot;</span>);</span><br><span class="line">        System.out.println(user2.getName());</span><br><span class="line">        <span class="comment">//通过反射操作属性</span></span><br><span class="line">        User user3 = (User) c1.newInstance();</span><br><span class="line">        Field name = c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">//不能直接操作私有属性，需要关闭程序的安全检测，属性或方法用 setAccessible</span></span><br><span class="line">        name.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        name.set(user3,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(user3.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-7-反射操作泛型"><a href="#2-7-反射操作泛型" class="headerlink" title="2.7 反射操作泛型"></a>2.7 反射操作泛型</h3><p>Java 采用泛型擦除的机制来引入泛型，Java 中的泛型仅仅是给编译器 javac 使用的，确保数据的安全性和免去强制类型转换问题，但是，一旦编译完成，所有和泛型有关的类型全部擦除</p>
<p>为了通过反射操作这些类型，Java 新增了 ParameterizedType，GenericArrayType，TypeVariable 和 WildcardType 几种类型来代表不能被归一到Class类中的类型但是又和原始类型齐名的类型</p>
<ul>
<li>ParameterizedType：表示一种参数化类型，比如 Collection<String></String></li>
<li>GenericArrayType：表示一种元素类型是参数化类型或者类型变量的数组类型</li>
<li>TypeVariable：是各种类型变量的公共父接口</li>
<li>WildcardType：代表一种通配符类型表达式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过反射获取泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">(Map&lt;String, User&gt; map, List&lt;User&gt; list)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, User&gt; <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line">        Method method = Test10.class.getMethod(<span class="string">&quot;test01&quot;</span>, Map.class, List.class);</span><br><span class="line">        <span class="comment">//得到返回值类型</span></span><br><span class="line">        Type[] genericParameterTypes = method.getGenericParameterTypes();</span><br><span class="line">        <span class="keyword">for</span> (Type genericParameterType : genericParameterTypes) &#123;</span><br><span class="line">            System.out.println(genericParameterType);</span><br><span class="line">            <span class="comment">//如果是泛型打印出来</span></span><br><span class="line">            <span class="keyword">if</span> (genericParameterType <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">                Type[] actualTypeArguments = ((ParameterizedType) genericParameterType).getActualTypeArguments();</span><br><span class="line">                <span class="keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">                    System.out.println(actualTypeArgument);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        method = Test10.class.getMethod(<span class="string">&quot;test02&quot;</span>);</span><br><span class="line">        Type genericReturnType = method.getGenericReturnType();</span><br><span class="line">        <span class="keyword">if</span> (genericReturnType <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">            Type[] actualTypeArguments = ((ParameterizedType) genericReturnType).getActualTypeArguments();</span><br><span class="line">            <span class="keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">                System.out.println(actualTypeArgument);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-8-通过反射操作注解"><a href="#2-8-通过反射操作注解" class="headerlink" title="2.8 通过反射操作注解"></a>2.8 通过反射操作注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过反射操作注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test11</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>&#123;</span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;demo01.Students&quot;</span>);</span><br><span class="line">        <span class="comment">//通过反射获得注解</span></span><br><span class="line">        Annotation[] annotations = c1.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(annotation);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得注解的 value 的值</span></span><br><span class="line">        TableCheck tableCheck = (TableCheck) c1.getAnnotation(TableCheck.class);</span><br><span class="line">        String value = tableCheck.value();</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        <span class="comment">//获得类指定的注解</span></span><br><span class="line">        Field name = c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        FieldCheck annotation = name.getAnnotation(FieldCheck.class);</span><br><span class="line">        System.out.println(annotation.columnName());</span><br><span class="line">        System.out.println(annotation.type());</span><br><span class="line">        System.out.println(annotation.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableCheck(&quot;db_Students&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students</span></span>&#123;</span><br><span class="line">    <span class="meta">@FieldCheck(columnName = &quot;db_id&quot;,type = &quot;int&quot;,length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="meta">@FieldCheck(columnName = &quot;db_name&quot;,type = &quot;varchar&quot;,length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Students</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Students</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Students&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类名的注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> TableCheck&#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//属性的注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> FieldCheck&#123;</span><br><span class="line">    <span class="function">String <span class="title">columnName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">type</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="meta">@demo01</span>.TableCheck(value=db_Students)</span><br><span class="line">	db_Students</span><br><span class="line">	db_name</span><br><span class="line">	varchar</span><br><span class="line">	<span class="number">10</span></span><br></pre></td></tr></table></figure>

<h2 id="3-扩展-—-类加载器"><a href="#3-扩展-—-类加载器" class="headerlink" title="3. 扩展 — 类加载器"></a>3. 扩展 — 类加载器</h2><h3 id="3-1-类加载器作用"><a href="#3-1-类加载器作用" class="headerlink" title="3.1 类加载器作用"></a>3.1 类加载器作用</h3><p>将 class 文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的 java.lang.Class 对象，作为方法区中类数据的访问入口。</p>
<p><strong>类缓存：</strong>标准的 JavaSE 类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载(缓存)一段时间。不过 JVM 垃圾回收机制可以回收这些 Class 对象。</p>
<p><img src="https://img-blog.csdnimg.cn/20210218203417113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<p>类加载器作用就是把类class 装载进内存的，JVM 规范定义了下面类型的类加载器</p>
<p><img src="https://img-blog.csdnimg.cn/20210218203432697.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<ul>
<li>引导类加载器：用 C++ 编写的，是 JVM 自带的类加载器，负责 Java 平台核心库(rt.jar 包)，用来装载核心类库，该加载器无法直接获取</li>
<li>扩展类加载器：负责 jre/lib/ext 目录下的 jar 包或 -D java.ext.dirs 指定目录下的 jar 包装入工作库</li>
<li>系统类加载器：负责 java -classpath 或 -D java.class.path 所指的目录下的类与 jar 包装入工作，是常用的加载器。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//获取系统类的加载器</span></span><br><span class="line">        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(systemClassLoader);</span><br><span class="line">        <span class="comment">//获取系统类加载器的父类加载器---扩展类加载器</span></span><br><span class="line">        ClassLoader parent = systemClassLoader.getParent();</span><br><span class="line">        System.out.println(parent);</span><br><span class="line">        <span class="comment">//获取扩展类加载器的父类加载器---根加载器(c/c++)，获取不到为 null</span></span><br><span class="line">        ClassLoader parent1 = parent.getParent();</span><br><span class="line">        System.out.println(parent1);</span><br><span class="line">        <span class="comment">//测试当前类是哪个加载器加载的</span></span><br><span class="line">        ClassLoader classLoader = Class.forName(<span class="string">&quot;demo01.Test07&quot;</span>).getClassLoader();</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line">        <span class="comment">//测试 JDK 内置的类是谁加载的</span></span><br><span class="line">        ClassLoader classLoader1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getClassLoader();</span><br><span class="line">        System.out.println(classLoader1);</span><br><span class="line">        <span class="comment">//获得系统类加载器可以加载的路径</span></span><br><span class="line">        String property = System.getProperty(<span class="string">&quot;java.class.path&quot;</span>);</span><br><span class="line">        System.out.println(property);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.bilibili.com/video/BV1p4411P7V3?p=1">学习参考视频</a> 一起学习一起进步💪</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的网络编程</title>
    <url>/2021/08/03/Java/Java%E4%B8%AD%E7%9A%84%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>网络编程就是指编写运行在多个设备的程序，这些设备通过网络连接起来。</p>
<blockquote>
<p>java.net 包中有网络编程需要的相关 API </p>
<p>提供的两种常见的网络协议支持：</p>
<ul>
<li>TCP：是一种面向连接的，可靠的，基于字节流的传输层通信协议，TCP 层是位于 IP 层之上，应用层之下的中间层。TCP 保障了两个应用程序之间的可靠通信。通常用于互联网协议，被称 TCP/IP</li>
<li>UDP：位于 OSI 模型的传输层。一个无连接的协议。提供了应用程序之间要发送数据的数据报。由于 UDP 缺乏可靠性且属于无连接协议，所以应用程序通常必须容许一些丢失、错误或重复的数据包。</li>
</ul>
</blockquote>
<p><strong>Socket 编程：</strong></p>
<p>套接字使用 TCP 提供了两台计算机之间的通信机制，客户端程序创建一个套接字，并尝试连接服务器的套接字。当连接建立时，服务器会创建一个 Socket 对象。客户端和服务器现在可以通过对 Socket 对象的写入和读取来进行通信。</p>
<p><strong>代码实现：</strong></p>
<ol>
<li><p><strong>TCP 方式</strong></p>
<blockquote>
<p><strong>客户端代码</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.要知道服务器地址</span></span><br><span class="line">            InetAddress serverIp = InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">            <span class="comment">//2. 端口号</span></span><br><span class="line">            <span class="keyword">int</span> port = <span class="number">9990</span>;</span><br><span class="line">            <span class="comment">//3. 创建一个 socket 链接</span></span><br><span class="line">            socket = <span class="keyword">new</span> Socket(serverIp,port);</span><br><span class="line">            <span class="comment">//4. 发送消息</span></span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            os.write(<span class="string">&quot;你好&quot;</span>.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (os != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>服务器端代码</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">null</span>;</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.得有一个地址</span></span><br><span class="line">            <span class="comment">//Socket 套接字</span></span><br><span class="line">            serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">9990</span>);</span><br><span class="line">            <span class="comment">//2. 等待客户端连接过来</span></span><br><span class="line">            socket = serverSocket.accept();</span><br><span class="line">            <span class="comment">//3. 读取客户端消息</span></span><br><span class="line">            is = socket.getInputStream();</span><br><span class="line">            <span class="comment">//管道流</span></span><br><span class="line">            baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                baos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(baos.toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (baos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    baos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (is != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (socket!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (serverSocket!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    serverSocket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>UDP 方式</strong></p>
<p>这种方式不用使用服务器</p>
<blockquote>
<p><strong>发送方</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1. 建立一个 Socket</span></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">        <span class="comment">//2. 建个包</span></span><br><span class="line">        String msg = <span class="string">&quot;你好&quot;</span>;</span><br><span class="line">        InetAddress localhost = InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">9090</span>;</span><br><span class="line">        <span class="comment">//数据，数据起始位置，数据长度，地址，端口</span></span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(msg.getBytes(),<span class="number">0</span>,msg.length(),localhost,port);</span><br><span class="line">        <span class="comment">//3. 发送包</span></span><br><span class="line">        socket.send(packet);</span><br><span class="line">        <span class="comment">//4. 关闭流</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>接收方</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//1. 开放端口</span></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">9090</span>);</span><br><span class="line">        <span class="comment">//2. 接收数据包</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line">        <span class="comment">//3. 阻塞接收</span></span><br><span class="line">        socket.receive(packet);</span><br><span class="line">        System.out.println(packet.getAddress().getHostAddress());</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(packet.getData(),<span class="number">0</span>,packet.getLength()));</span><br><span class="line">        <span class="comment">//4. 关闭流</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Url 下载资源</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlDown</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//1. 下载地址</span></span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;&quot;</span>);<span class="comment">//引号里填写 url 地址</span></span><br><span class="line">        <span class="comment">//2. 连接到这个资源 Http</span></span><br><span class="line">        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();</span><br><span class="line">        InputStream inputStream = urlConnection.getInputStream();</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;aaa.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(buffer,<span class="number">0</span>,len);<span class="comment">//写出这个数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        fos.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        urlConnection.disconnect();<span class="comment">//断开连接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>更多常用 API 方法可以参考文档：<a href="https://www.matools.com/api/java8">https://www.matools.com/api/java8</a></strong></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的集合框架：ArrayList</title>
    <url>/2021/08/03/Java/Java%E4%B8%AD%E7%9A%84%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%9AArrayList/</url>
    <content><![CDATA[<h4 id="ArrayList-类"><a href="#ArrayList-类" class="headerlink" title="ArrayList 类"></a>ArrayList 类</h4><p>该类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，可以添加或删除元素。相当于一个数组队列</p>
<blockquote>
<p>import java.util.ArrayList;        //导入包</p>
<p>ArrayList<E> objectName = new ArrayList&lt;&gt;();        //初始化</E></p>
<ul>
<li>E：数据类型，设置 objectName 的数据类型，只能为引用数据类型</li>
<li>objectName ：对象名</li>
</ul>
</blockquote>
<p>常用方法：</p>
<ol>
<li><p>add()，插入</p>
<p>功能：将元素插入到指定位置的动态数组中</p>
<p>语法：arraylist.add(int index, E lement)</p>
<ul>
<li>index：可选参数，表示元素所插入处的索引值，若没有添加到末尾</li>
<li>element：要插入的元素</li>
</ul>
<p>返回值：成功插入返回 true，如果index超出范围，抛出 IndexOutOfBoundsException 异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        integers.add(<span class="number">1</span>);</span><br><span class="line">        integers.add(<span class="number">2</span>);</span><br><span class="line">        integers.add(<span class="number">3</span>);</span><br><span class="line">        integers.add(<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">        System.out.println(integers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    [<span class="number">5</span>，<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>addAll()</p>
<p>功能：将给定结合中的所有元素添加到 arraylist 中</p>
<p>语法：arraylist.addAll(int index, Collection c)</p>
<ul>
<li>index：可选参数，表示元素所插入处的索引值，若没有添加到末尾</li>
<li>c：要插入的集合元素</li>
</ul>
<p>返回值：插入成功返回 true，如果给定的集合为 null，则超出 NullPointerExceptoin 异常，如果 index 超出范围，方法抛出 IndexOutOfBoundsException 异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        integers.add(<span class="number">1</span>);</span><br><span class="line">        integers.add(<span class="number">2</span>);</span><br><span class="line">        ArrayList&lt;Integer&gt; integers1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        integers1.add(<span class="number">3</span>);</span><br><span class="line">        integers1.add(<span class="number">4</span>);</span><br><span class="line">        integers.addAll(integers1);</span><br><span class="line">        System.out.println(integers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>clear()</p>
<p>功能：方法用于删除动态数组冲的所有元素</p>
<p>方法：arraylist.clear()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        integers.add(<span class="number">1</span>);</span><br><span class="line">        integers.add(<span class="number">2</span>);</span><br><span class="line">        System.out.println(integers);</span><br><span class="line">        integers.clear();</span><br><span class="line">        System.out.println(integers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">	[]</span><br></pre></td></tr></table></figure></li>
<li><p>clone()</p>
<p>功能：拷贝一份动态数组，浅拷贝</p>
<blockquote>
<p>浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存，所以如果其中一个对象改变这个地址，就会影响到另一个对象</p>
<p>深拷贝是将一个对象从内存中完整的拷贝一份出来，从堆内存中开辟一个新的区域存放新对象，且修改新对象不会影响原对象</p>
</blockquote>
<p>语法：arraylist.clone()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        integers.add(<span class="number">1</span>);</span><br><span class="line">        integers.add(<span class="number">2</span>);</span><br><span class="line">        Object clone = integers.clone();</span><br><span class="line">        System.out.println(integers);</span><br><span class="line">        System.out.println(clone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">	[<span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>contains()</p>
<p>功能：用于判断元素是否在动态数组中</p>
<p>语法：arraylist.contains(Object obj)</p>
<p>参数：obj：要检测的元素</p>
<p>返回值：如果存在返回 true，如果不存在返回 false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;Object&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        integers.add(<span class="number">1</span>);</span><br><span class="line">        integers.add(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line">        integers.add(b);</span><br><span class="line">        System.out.println(integers.contains(b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>set()，替换</p>
<p>功能：替换动态数组中的指定索引的数组</p>
<p>语法：arraylist.set(int index, E element)</p>
<ul>
<li>index：索引位置</li>
<li>element：替换的新元素</li>
</ul>
<p>返回值：返回之前在 index 位置的元素，如果 index 超出范围，抛出 IndexOutOfBoundsException 异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;Object&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        integers.add(<span class="number">1</span>);</span><br><span class="line">        integers.add(<span class="number">2</span>);</span><br><span class="line">        integers.set(<span class="number">0</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        System.out.println(integers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    [aaa, <span class="number">2</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>get()</p>
<p>功能：通过索引值获取动态数组中的元素</p>
<p>语法：arraylist.get(int index)</p>
<ul>
<li>index：索引值</li>
</ul>
<p>返回值：返回动态数组中索引处的元素，如果index超出了范围，抛出 IndexOutOfBoundsException 异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;Object&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        integers.add(<span class="number">1</span>);</span><br><span class="line">        integers.add(<span class="number">2</span>);</span><br><span class="line">        System.out.println(integers.get(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><p>indexOf()</p>
<p>功能：返回动态数组中元素的索引值</p>
<p>语法：arraylist.indexOf(Object obj)</p>
<ul>
<li>obj：查找的元素</li>
</ul>
<p>返回值：从动态数组中返回指定元素的位置的索引值，如果 obj 元素在动态数组中重复出现，返回数组中最先出现 obj 的元素索引值，如果不存在返回 -1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;Object&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        integers.add(<span class="number">1</span>);</span><br><span class="line">        integers.add(<span class="number">2</span>);</span><br><span class="line">        System.out.println(integers.indexOf(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><p>removeAll()</p>
<p>功能：用于删除存在于指定集合中的动态数组元素</p>
<p>语法：arraylist.removeAll(Collection c)</p>
<ul>
<li>c：动态数组列表中要删除的元素集合</li>
</ul>
<p>返回值：如果从动态数组成功删除元素返回 true，如果动态数组中存在的元素类与指定 collection 的元素类不兼容抛出 ClassCastException 异常，如果动态数组中包含 null 元素，并且指定 collection 不允许 null 元素，则抛出 NullPointerException 异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;Object&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        integers.add(<span class="number">1</span>);</span><br><span class="line">        integers.add(<span class="number">2</span>);</span><br><span class="line">        System.out.println(integers);</span><br><span class="line">        System.out.println(integers.removeAll(integers));</span><br><span class="line">        System.out.println(integers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">	<span class="keyword">true</span></span><br><span class="line">	[]</span><br></pre></td></tr></table></figure></li>
<li><p>remove()</p>
<p>功能：删除动态数组里的单个元素</p>
<p>语法：</p>
<blockquote>
<ul>
<li>arraylist.remove(Object obj)：删除指定元素，obj 要删除的元素，如果 obj 出现多次，则删除第一次出现的元素</li>
<li>arraylist.remove(int index)：删除指定索引位置的元素，index 要删除元素索引值</li>
</ul>
</blockquote>
<p>返回值：如果是 obj 删除成功返回 true，如果是 index 则返回删除的元素，如果索引范围超出范围抛出 IndexOutOfBoundsException 异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;Object&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        integers.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        System.out.println(integers.remove(<span class="number">1</span>));</span><br><span class="line">        System.out.println(integers.remove(<span class="string">&quot;aaa&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    bbb</span><br><span class="line">    <span class="keyword">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>size()</p>
<p>功能：返回动态数组中元素的数量</p>
<p>语法：arraylist.size()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;Object&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        integers.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        System.out.println(integers.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">2</span></span><br></pre></td></tr></table></figure></li>
<li><p>isEmpty()</p>
<p>功能：用于判断动态数组是否为空</p>
<p>语法：arraylist.isEmpty()</p>
<p>返回值：数组中不存在任何元素返回 true，存在元素返回 false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;Object&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        integers.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        System.out.println(integers.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">false</span></span><br></pre></td></tr></table></figure></li>
<li><p>subList()</p>
<p>功能：截取并返回动态数组中的一部分</p>
<p>语法：arraylist.subList(int fromIndex, int toIndex)</p>
<ul>
<li>fromIndex：截取元素的起始位置，包含</li>
<li>toIndex：截取元素的结束位置，不包含</li>
</ul>
<p>返回值：返回截取部分，如果 fromIndex 小于 0 或大于数组长度抛出 IndexOutOfBoundsException 异常，如果 fromIndex 大于 toIndex 抛出 lllegalArgumentException 异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;Object&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        integers.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">        System.out.println(integers.subList(<span class="number">1</span>, <span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">   [bbb, ccc]</span><br></pre></td></tr></table></figure></li>
<li><p>sort()</p>
<p>功能：根据指定顺序对动态数组中的元素进行排序</p>
<p>语法：arraylist.sort(Comparator c)</p>
<ul>
<li>Comparator.naturalOrder()：自然排序</li>
<li>Comparator.reverseOrder()：反转排序</li>
</ul>
<p>返回值：不返回值，只是更改动态数组列表中元素的顺序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        integers.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">        System.out.println(integers);</span><br><span class="line">        integers.sort(Comparator.naturalOrder());</span><br><span class="line">        System.out.println(integers);</span><br><span class="line">        integers.sort(Comparator.reverseOrder());</span><br><span class="line">        System.out.println(integers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    [ccc, bbb, aaa, ddd]</span><br><span class="line">	[aaa, bbb, ccc, ddd]</span><br><span class="line">    [ddd, ccc, bbb, aaa]</span><br></pre></td></tr></table></figure></li>
<li><p>toArray()</p>
<p>功能：将 ArrayList 对象转换为数组</p>
<p>语法：arraylist.toArray(T[] arr)</p>
<ul>
<li>T[] arr，可选参数，用于存储数组元素的数组，T 是数组的类型</li>
</ul>
<p>返回值：如果有 T[] arr，则返回 T 类型的数组，如果没有返回 Object 类型的数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        integers.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">        String[] strs = <span class="keyword">new</span> String[integers.size()];</span><br><span class="line">        integers.toArray(strs);</span><br><span class="line">        <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    ccc</span><br><span class="line">    bbb</span><br><span class="line">    aaa</span><br><span class="line">    ddd</span><br></pre></td></tr></table></figure></li>
<li><p>toString()</p>
<p>功能：将整个 arraylist 转换为一个 String 类型</p>
<p>语法：arraylist.toString()</p>
<p>返回值：返回 arraylist 的字符串表示形式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        integers.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">        System.out.println(integers.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    [ccc, bbb, aaa, ddd]</span><br></pre></td></tr></table></figure></li>
<li><p>ensureCapacity()</p>
<p>功能：设置具有指定容量大小的动态数组</p>
<p>语法：arraylist.ensureCapacity(int minCapacity)</p>
<ul>
<li>minCapacity：动态数组的容量</li>
</ul>
<p>无返回值</p>
<p>设置大小为3，但是还是可以添加进去，因为arraylist 会自动调整大小</p>
<p>使用ensureCapacity()方法：如果我们使用 ensureCapacity() 方法调整 arraylist 的大小，那么 arraylist 将会马上调整为指定的容量大小。否则，每次添加元素时都会调整 arraylist 的大小。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        integers.ensureCapacity(<span class="number">3</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">        System.out.println(integers.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    [ccc, bbb, aaa, ddd]</span><br></pre></td></tr></table></figure></li>
<li><p>lastIndexOf()</p>
<p>功能：返回指定元素在动态数组中最后一次出现的位置</p>
<p>语法：arraylist.lastIndexOf(Object obj)</p>
<ul>
<li>obj：查找的元素</li>
</ul>
<p>返回值：返回指定元素最后出现的位置的索引值，如果 obj 元素在动态数组中重复出现，返回在数组中最后出现 obj 的元素索引值，如果动态数组中不存在指定元素返回 -1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        integers.ensureCapacity(<span class="number">3</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">        System.out.println(integers.lastIndexOf(<span class="string">&quot;aaa&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">4</span></span><br></pre></td></tr></table></figure></li>
<li><p>retainAll()</p>
<p>功能：用于保留 arraylist 中在指定集合中也存在的那些元素，也就是删除指定集合中不存在的那些元素</p>
<p>语法：arraylist.retainAll(Collection c)</p>
<ul>
<li>collection：集合参数</li>
</ul>
<p>返回值：如果arraylist 中删除了元素则返回 true；如果arraylist类中存在的元素与指定 collection 的类中元素不兼容抛出 ClassCastException 异常；如果 arraylist 包含 null 元素，并且指定 collection 不允许 null 元素抛出 NullPointerException</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; integers1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        integers.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">        integers1.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        System.out.println(integers.retainAll(integers1));</span><br><span class="line">        System.out.println(integers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">	[bbb]</span><br></pre></td></tr></table></figure></li>
<li><p>containsAll()</p>
<p>功能：用于检测 arraylist 是否包含指定集合中的所有元素</p>
<p>语法：arraylist.containsAll(Collection c)</p>
<ul>
<li>collection：集合参数</li>
</ul>
<p>返回值：如果动态数组中包含的集合中的所有元素，则返回true；如果arraylist中存在的元素与指定collection中的元素不兼容抛出 ClassCastException；如果collection中包含 null 元素，并且arraylist中不允许 null 值抛出 NullPointerException 异常</p>
<p>理解为：containsAll() 方法检查了 collection 是否是动态数组中的一个子集</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; integers1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        integers.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">        integers1.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        System.out.println(integers.containsAll(integers1));</span><br><span class="line">        System.out.println(integers1.containsAll(integers));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">false</span></span><br></pre></td></tr></table></figure></li>
<li><p>trimToSize()</p>
<p>功能：将动态数组中的容量调整为数组中的元素个数</p>
<p>语法：arraylist.trimToSize()</p>
<p>没有返回值，仅更改 arraylist 的容量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        integers.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">        integers.trimToSize();</span><br><span class="line">        System.out.println(integers.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果；</span><br><span class="line">    <span class="number">3</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>ArrayList trimToSize() 优点：</p>
<p>ArrayList 工作原理：内部使用数组存储元素，当数组将被存满会创建一个新的数组，容量是当前数组的1.5倍，同时，所有元素都将移至新的元素，假设内部数组已满，又添加一个元素，ArrayList容量就会以相同的比例扩展(即前一个数组的 1.5 倍)。这种情况下，内部数组中将有一些未分配的空间，这时 trimToSize() 方法可以删除未分配的空间并更改 ArrayList 的容量，使其等于 ArrayList 中的元素个数。</p>
</blockquote>
</li>
<li><p>removeRange()</p>
<p>功能：用于删除指定索引之间存在的元素</p>
<p>语法：arraylist.removeRange(int fromIndex, int toIndex)</p>
<ul>
<li>fromIndex：索引起始位置，包含</li>
<li>toIndex：索引结束位置，不包含</li>
</ul>
<p>返回值：无，仅删除一部分动态数组元素，从 fromIndex 到 toIndex -1 的动态数组元素；如果 fromIndex 或者 toIndex 索引超出范围，或者 toIndex &lt; fromIndex 抛出 IndexOutOfBoundException 异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> <span class="keyword">extends</span> <span class="title">ArrayList</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        test integers = <span class="keyword">new</span> test();</span><br><span class="line">        integers.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;eee&quot;</span>);</span><br><span class="line">        integers.removeRange(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        System.out.println(integers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果；</span><br><span class="line">    [aaa, ddd, eee]</span><br></pre></td></tr></table></figure>

<p>removeRange() 方法是受保护的，所以通常需要继承 ArrayList 类，继承后使用 test 类来创建一个动态数组。</p>
<p>removeRange() 不常用，通常使用 ArrayList subList() 和 ArrayList clear() 方法实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        integers.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;eee&quot;</span>);</span><br><span class="line">        integers.subList(<span class="number">1</span>,<span class="number">3</span>).clear();</span><br><span class="line">        System.out.println(integers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    [aaa, ddd, eee]</span><br></pre></td></tr></table></figure></li>
<li><p>removeIf()</p>
<p>功能：用于删除所有满足特定条件的数组元素</p>
<p>语法：arraylist.removeIf(Predicate<E> filter)</E></p>
<ul>
<li>filter：过滤器，判断元素是否要删除</li>
</ul>
<p>返回值：如果删除返回 true</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        integers.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;eee&quot;</span>);</span><br><span class="line">        <span class="comment">//删除名称带有 b 的元素</span></span><br><span class="line">        integers.removeIf(e -&gt; e.contains(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">        System.out.println(integers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    [aaa, ccc, ddd, eee]</span><br></pre></td></tr></table></figure>

<p><strong>e -&gt; e.contains(“b”)：如果元素中包含 b，返回true</strong></p>
<p><strong>removeIf()如果e -&gt; e.contains(“b”)返回 true 删除该元素</strong></p>
</li>
<li><p>replaceAll()</p>
<p>功能：用于将给定的操作内容替换掉数组中每一个元素</p>
<p>语法：arraylist.replaceAll(UnaryOperator<E> operator)    </E></p>
<ul>
<li>operator：要替换到动态数组的元素或者一系列操作</li>
</ul>
<p>没有返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        integers.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">        integers.add(<span class="string">&quot;eee&quot;</span>);</span><br><span class="line">        <span class="comment">//将所有元素更改为大写</span></span><br><span class="line">        integers.replaceAll(e -&gt; e.toUpperCase());</span><br><span class="line">        System.out.println(integers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    [AAA, BBB, CCC, DDD, EEE]</span><br></pre></td></tr></table></figure></li>
<li><p>forEach()</p>
<p>功能：遍历动态数组中每一个元素并执行特定操作</p>
<p>语法：arraylist.forEach(Consumer<E> action)</E></p>
<ul>
<li>action：对每个元素执行的操作</li>
</ul>
<p>没有返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        integers.add(<span class="number">1</span>);</span><br><span class="line">        integers.add(<span class="number">2</span>);</span><br><span class="line">        integers.add(<span class="number">3</span>);</span><br><span class="line">        integers.add(<span class="number">4</span>);</span><br><span class="line">        integers.add(<span class="number">5</span>);</span><br><span class="line">        integers.forEach((e) -&gt; &#123;</span><br><span class="line">            e *= <span class="number">10</span>;</span><br><span class="line">            System.out.println(e + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">10</span></span><br><span class="line">    <span class="number">20</span></span><br><span class="line">    <span class="number">30</span></span><br><span class="line">    <span class="number">40</span></span><br><span class="line">    <span class="number">50</span></span><br></pre></td></tr></table></figure>

<p>学习内容参考自：<a href="https://www.runoob.com/java/java-arraylist.html">https://www.runoob.com/java/java-arraylist.html</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的集合框架：HashMap</title>
    <url>/2021/08/03/Java/Java%E4%B8%AD%E7%9A%84%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%9AHashMap/</url>
    <content><![CDATA[<h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><blockquote>
<p>​        HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。实现了 Map 接口，根据键的 HashCode 值存储数据, 具有很快的访问速度，最多允许一条记录的键为 null，不支持线程同步；无序的，不会记录插入的顺序；集成了 AbstracMap ，实现了 Map、Cloneable、java.io.Serializable 接口；</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210201220656128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<ul>
<li>HashMap 的 key 与 value 类型可以相同也可以不同的</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20210201220706190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<p><img src="https://img-blog.csdnimg.cn/20210201220714669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<blockquote>
<p>java.util.HashMap;    //包</p>
<ul>
<li>HshMap&lt;Integer, String&gt;() list= new HshMap&lt;Integer, String&gt;();</li>
</ul>
</blockquote>
<ol>
<li><p>添加元素，put(key,value) 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建 HashMap 对象</span></span><br><span class="line">        HashMap&lt;Integer, String&gt; list = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//向对象中添加键值对</span></span><br><span class="line">        list.put(<span class="number">1</span>,<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">        list.put(<span class="number">2</span>,<span class="string">&quot;bbbb&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    &#123;<span class="number">1</span>=aaaa, <span class="number">2</span>=bbbb&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>访问元素，get(key) 方法获取 key 对应的 value 值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建 HashMap 对象</span></span><br><span class="line">        HashMap&lt;Integer, String&gt; list = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//向对象中添加键值对</span></span><br><span class="line">        list.put(<span class="number">1</span>,<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">        list.put(<span class="number">2</span>,<span class="string">&quot;bbbb&quot;</span>);</span><br><span class="line">        System.out.println(list.get(<span class="number">1</span>));</span><br><span class="line">        System.out.println(list.get(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    aaaa</span><br><span class="line">	bbbb</span><br></pre></td></tr></table></figure></li>
<li><p>删除元素，remove(key)，删除 key 对应的键值对(key - value)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建 HashMap 对象</span></span><br><span class="line">        HashMap&lt;Integer, String&gt; list = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//向对象中添加键值对</span></span><br><span class="line">        list.put(<span class="number">1</span>,<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">        list.put(<span class="number">2</span>,<span class="string">&quot;bbbb&quot;</span>);</span><br><span class="line">        list.remove(<span class="number">2</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    &#123;<span class="number">1</span>=aaaa&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>删除所有键值对，clear() 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建 HashMap 对象</span></span><br><span class="line">        HashMap&lt;Integer, String&gt; list = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//向对象中添加键值对</span></span><br><span class="line">        list.put(<span class="number">1</span>,<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">        list.put(<span class="number">2</span>,<span class="string">&quot;bbbb&quot;</span>);</span><br><span class="line">        list.remove(<span class="number">2</span>);</span><br><span class="line">        list.clear();</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    &#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>计算大小，size() 方法计算 HashMap 中的元素数量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建 HashMap 对象</span></span><br><span class="line">        HashMap&lt;Integer, String&gt; list = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//向对象中添加键值对</span></span><br><span class="line">        list.put(<span class="number">1</span>,<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">        list.put(<span class="number">2</span>,<span class="string">&quot;bbbb&quot;</span>);</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">2</span></span><br></pre></td></tr></table></figure></li>
<li><p>迭代集合，for-each</p>
<p>通过 keySet() 方法获取key，然后通过 get(key) 获取对应的 value</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建 HashMap 对象</span></span><br><span class="line">        HashMap&lt;Integer, String&gt; list = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//向对象中添加键值对</span></span><br><span class="line">        list.put(<span class="number">1</span>,<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">        list.put(<span class="number">2</span>,<span class="string">&quot;bbbb&quot;</span>);</span><br><span class="line">        <span class="comment">//通过 keySet 获取元素的 key</span></span><br><span class="line">        <span class="keyword">for</span> (Integer i : list.keySet()) &#123;</span><br><span class="line">            <span class="comment">//然后通过 get(key) 得到值输出</span></span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    aaaa</span><br><span class="line">	bbbb</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>更多常用 API 方法可以参考文档：<a href="https://www.matools.com/api/java8">https://www.matools.com/api/java8</a></strong></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的集合框架：HashSet</title>
    <url>/2021/08/03/Java/Java%E4%B8%AD%E7%9A%84%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%9AHashSet/</url>
    <content><![CDATA[<h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><blockquote>
<p> HashSet 基于 HashMap 来实现的，是一个不允许有重复元素的集合；允许有 null 值；是无序的，不会记录插入的顺序；不是线程安全的，如果多个线程尝试同时修改 HashSet，则最终结果是不确定的，必须在多线程访问时显示同步对 HashSet 的开发访问；实现了 Set 接口</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210201221941524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<blockquote>
<p>java.util.HashSet;    //包</p>
<ul>
<li>HashMap<String> list = new HashMap<String>();        //创建</String></String></li>
</ul>
</blockquote>
<ol>
<li><p>添加元素，add() 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建 HashSet 对象</span></span><br><span class="line">        HashSet&lt;String&gt; list = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;two&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;three&quot;</span>);</span><br><span class="line">        <span class="comment">//重复的不会添加进去，因为集合中每个元素必须是唯一的</span></span><br><span class="line">        list.add(<span class="string">&quot;two&quot;</span>);    </span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    [one, two, three]</span><br></pre></td></tr></table></figure></li>
<li><p>判断元素是否存在，contains() 方法判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建 HashSet 对象</span></span><br><span class="line">        HashSet&lt;String&gt; list = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;two&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;three&quot;</span>);</span><br><span class="line">        System.out.println(list.contains(<span class="string">&quot;one&quot;</span>));</span><br><span class="line">        System.out.println(list.contains(<span class="string">&quot;four&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">false</span></span><br></pre></td></tr></table></figure></li>
<li><p>删除元素，remove() 方法，可以使用 clear() 方法删除集合中的所有元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建 HashSet 对象</span></span><br><span class="line">        HashSet&lt;String&gt; list = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;two&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;three&quot;</span>);</span><br><span class="line">        list.remove(<span class="string">&quot;two&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    [one, three]</span><br></pre></td></tr></table></figure></li>
<li><p>计算大小，size() 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建 HashSet 对象</span></span><br><span class="line">        HashSet&lt;String&gt; list = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;two&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;three&quot;</span>);</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">3</span></span><br></pre></td></tr></table></figure></li>
<li><p>迭代，for-each</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建 HashSet 对象</span></span><br><span class="line">        HashSet&lt;String&gt; list = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;two&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;three&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果:</span><br><span class="line">	one</span><br><span class="line">	two</span><br><span class="line">	three</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>更多常用 API 方法可以参考文档：<a href="https://www.matools.com/api/java8">https://www.matools.com/api/java8</a></strong></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的集合框架：LinkedList</title>
    <url>/2021/08/03/Java/Java%E4%B8%AD%E7%9A%84%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%9ALinkedList/</url>
    <content><![CDATA[<h4 id="LinkedList-类"><a href="#LinkedList-类" class="headerlink" title="LinkedList 类"></a>LinkedList 类</h4><p>链表（LinkedList）是一种常见的基础数据结构，是一种线性表，但是并不是会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的地址。</p>
<blockquote>
<p>链表可以分为单向链表和双向链表：</p>
<ul>
<li><p>一个单向链表包含两个值，当前节点的值和一个指向下一个节点的链接</p>
<p><img src="https://img-blog.csdnimg.cn/20210201214358343.png#pic_center"></p>
</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>一个双向链表有三个整数值：数值、向后的节点链接、向前的节点链接</li>
</ul>
<p> <img src="https://img-blog.csdnimg.cn/20210201214407887.png#pic_center"></p>
</blockquote>
<p>与 ArrayList 相似，是一种常用的数据容器。相比：LinkedList 的增加和删除对操作效率更高，而查找和删除的操作效率较低。</p>
<p><strong>使用情况：ArrayList：</strong></p>
<ul>
<li>频繁访问列表中的某一个元素</li>
<li>只需要在列表末尾进行添加和删除元素操作</li>
</ul>
<p><strong>使用情况：LinkedList：</strong></p>
<ul>
<li>需要通过循环迭代来访问列表中的某些元素</li>
<li>需要频繁的在列表开头、中间、末尾等位置进行添加或删除元素操作</li>
</ul>
<blockquote>
<p>LinkeList 继承了 AbstractSequentiaList 类</p>
<p>实现了 Queue 接口，可以作为队列使用；实现了 List 接口，可以进行列表的相关操作；实现了 Deque 接口，可以作为队列使用；实现了 Cloneable 接口，可以实现克隆；实现了 java.io.Serializable 接口，支持序列化，能够通过序列化传输；</p>
<p><img src="https://img-blog.csdnimg.cn/20210201214500930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
</blockquote>
<blockquote>
<p>在 java.util.LinkedList 包中</p>
<ul>
<li>LinkedList<E> list = new LinkedList<E>();    //创建方法</E></E></li>
<li>LinkedList<E> list = new LinkedList(Collection&lt;? extends E&gt; c); // 使用集合创建链表</E></li>
</ul>
</blockquote>
<h3 id="1-创建一个简单链表实例"><a href="#1-创建一个简单链表实例" class="headerlink" title="1. 创建一个简单链表实例"></a>1. 创建一个简单链表实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    []</span><br></pre></td></tr></table></figure>

<h3 id="2-添加元素"><a href="#2-添加元素" class="headerlink" title="2. 添加元素"></a>2. 添加元素</h3><ul>
<li><strong>addFirst()，addLast()</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;two&quot;</span>);	<span class="comment">//添加一个元素</span></span><br><span class="line">        list.addFirst(<span class="string">&quot;one&quot;</span>);		<span class="comment">//在头部添加元素</span></span><br><span class="line">        list.addLast(<span class="string">&quot;three&quot;</span>);		<span class="comment">//在尾部添加元素</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    [one, two, three]</span><br></pre></td></tr></table></figure>

<h3 id="3-移除元素"><a href="#3-移除元素" class="headerlink" title="3. 移除元素"></a>3. 移除元素</h3><ul>
<li><strong>removeFirst()，removeLast()</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;two&quot;</span>);</span><br><span class="line">        list.addFirst(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">        list.addLast(<span class="string">&quot;three&quot;</span>);</span><br><span class="line">        list.remove(<span class="number">1</span>);     <span class="comment">//移除一个元素</span></span><br><span class="line">        list.removeFirst();     <span class="comment">//移除头部元素</span></span><br><span class="line">        list.removeLast();      <span class="comment">//移除尾部元素</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    []</span><br></pre></td></tr></table></figure>

<h3 id="4-获取元素"><a href="#4-获取元素" class="headerlink" title="4. 获取元素"></a>4. 获取元素</h3><ul>
<li><strong>getFirst()，getLast()</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;two&quot;</span>);</span><br><span class="line">        list.addFirst(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">        list.addLast(<span class="string">&quot;three&quot;</span>);</span><br><span class="line">        <span class="comment">//根据下标得到值输出</span></span><br><span class="line">        System.out.println(list.get(<span class="number">1</span>));</span><br><span class="line">        <span class="comment">//得到头部元素</span></span><br><span class="line">        System.out.println(list.getFirst());</span><br><span class="line">        <span class="comment">//得到尾部元素</span></span><br><span class="line">        System.out.println(list.getLast());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    two</span><br><span class="line">	one</span><br><span class="line">	three</span><br></pre></td></tr></table></figure>

<h3 id="5-迭代元素"><a href="#5-迭代元素" class="headerlink" title="5. 迭代元素"></a>5. 迭代元素</h3><ol>
<li><strong>使用 for 和 size()</strong> </li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;two&quot;</span>);</span><br><span class="line">        list.addFirst(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">        list.addLast(<span class="string">&quot;three&quot;</span>);</span><br><span class="line">        <span class="comment">//通过 size() 方法计算链表大小</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果:</span><br><span class="line">	one</span><br><span class="line">	two</span><br><span class="line">	three</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>通过 fro-each</strong> </li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;two&quot;</span>);</span><br><span class="line">        list.addFirst(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">        list.addLast(<span class="string">&quot;three&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果:</span><br><span class="line">	one</span><br><span class="line">	two</span><br><span class="line">	three</span><br></pre></td></tr></table></figure>

<p><strong>更多常用 API 方法可以参考文档：<a href="https://www.matools.com/api/java8">https://www.matools.com/api/java8</a></strong></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础语法</title>
    <url>/2021/08/02/Java/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="1、认识基础"><a href="#1、认识基础" class="headerlink" title="1、认识基础"></a>1、认识基础</h2><h3 id="1-1-注释"><a href="#1-1-注释" class="headerlink" title="1.1 注释"></a>1.1 注释</h3><p>平时我们编写代码，在代码量比较少的时候，我们还可以看懂自己写的，但是当项目结构一旦复杂起来，我们就需要用到注释了。</p>
<p>注释并不会执行，是给我们写代码的人看的。书写注释是一个非常好的习惯。</p>
<p>Java 中的注释有三种：</p>
<p>1.单行注释( // 需要注释的内容)</p>
<p><img src="https://img-blog.csdnimg.cn/20200730101406303.png#pic_center"><br>2.多行注释(/<em>需要注释掉的内容</em>/)</p>
<p><img src="https://img-blog.csdnimg.cn/20200730101434988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70"><br>3.文档注释<br><img src="https://img-blog.csdnimg.cn/20200730101545577.png#pic_center"></p>
<p><strong>有趣的注释代码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/***</span><br><span class="line"> *                    _ooOoo_</span><br><span class="line"> *                   o8888888o</span><br><span class="line"> *                   88&quot; . &quot;88</span><br><span class="line"> *                   (| -_- |)</span><br><span class="line"> *                    O\ = /O</span><br><span class="line"> *                ____/`---&#x27;\____</span><br><span class="line"> *              .   &#x27; \\| |// `.</span><br><span class="line"> *               / \\||| : |||// \</span><br><span class="line"> *             / _||||| -:- |||||- \</span><br><span class="line"> *               | | \\\ - /// | |</span><br><span class="line"> *             | \_| &#x27;&#x27;\---/&#x27;&#x27; | |</span><br><span class="line"> *              \ .-\__ `-` ___/-. /</span><br><span class="line"> *           ___`. .&#x27; /--.--\ `. . __</span><br><span class="line"> *        .&quot;&quot; &#x27;&lt; `.___\_&lt;|&gt;_/___.&#x27; &gt;&#x27;&quot;&quot;.</span><br><span class="line"> *       | | : `- \`.;`\ _ /`;.`/ - ` : | |</span><br><span class="line"> *         \ \ `-. \_ __\ /__ _/ .-` / /</span><br><span class="line"> * ======`-.____`-.___\_____/___.-`____.-&#x27;======</span><br><span class="line"> *                    `=---=&#x27;</span><br><span class="line"> *</span><br><span class="line"> * .............................................</span><br><span class="line"> *          佛祖保佑             永无BUG</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<h3 id="1-2-标识符"><a href="#1-2-标识符" class="headerlink" title="1.2 标识符"></a>1.2 标识符</h3><ul>
<li>关键字</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200730101714607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center" alt="&lt;img src=&quot;C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200728191919602.png&quot; alt=&quot;image-20200728191919602&quot; style=&quot;zoom: 67%;&quot; /&gt;"></p>
<p>Java所有的组成部分都需要名字。类名、变量名以及方法名都被成为标识符。</p>
<p><strong>标识符注意：</strong></p>
<ul>
<li>所有的标识符都只能以字母（A<del>Z，a</del>z），$，或者下划线（_）开始</li>
<li>不能使用关键字作为变量名或方法名。</li>
<li>标识符是大小写不一的</li>
<li>可以使用中文命名，但是一般不建议使用中文。</li>
</ul>
<h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2.数据类型"></a>2.数据类型</h2><p>强类型语言：要求变量的使用要严格符合规定，所有变量都必须先定义后才能使用<br>弱类型语言：不要求变量的使用要严格符合规定，所有变量都必须先定义后才能使用</p>
<h3 id="2-1-基本数据类型-primitive-type"><a href="#2-1-基本数据类型-primitive-type" class="headerlink" title="2.1 基本数据类型(primitive type)"></a>2.1 基本数据类型(primitive type)</h3><table>
<thead>
<tr>
<th>简单介绍</th>
<th>类型</th>
<th>占用字节(byte)</th>
<th>取值范围</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>整型</td>
<td>int</td>
<td>4</td>
<td>-2147483648~+2147483647</td>
<td>0</td>
</tr>
<tr>
<td>字节型，最小数据类型</td>
<td>byte</td>
<td>1</td>
<td>-128~127</td>
<td>0</td>
</tr>
<tr>
<td>短整型</td>
<td>short</td>
<td>2</td>
<td>-32768~32717</td>
<td>0</td>
</tr>
<tr>
<td>长整型</td>
<td>long</td>
<td>8</td>
<td>-2^63~2^63-1</td>
<td>0L</td>
</tr>
<tr>
<td>浮点，带小数点</td>
<td>float</td>
<td>4</td>
<td></td>
<td>0.0f</td>
</tr>
<tr>
<td>双精度浮点型</td>
<td>double</td>
<td>8</td>
<td></td>
<td>0.0d</td>
</tr>
<tr>
<td>字符型，存储单个字符</td>
<td>char</td>
<td>2</td>
<td>0~65535</td>
<td>空</td>
</tr>
<tr>
<td>布尔型，true 或者 false</td>
<td>boolean</td>
<td>1</td>
<td>true   false</td>
<td>false</td>
</tr>
</tbody></table>
<h3 id="2-2-引用类型-reference-type"><a href="#2-2-引用类型-reference-type" class="headerlink" title="2.2 引用类型(reference type)"></a>2.2 引用类型(reference type)</h3><p>除了基本数据类型外的都是引用类型(类、接口、数组 …)</p>
<p>引用类型就是指向一个对象，指向对象的变量是引用变量。这些变量在声明被制定为一个特定的类型，一旦声明后，类型不能被改变。</p>
<h3 id="2-3-数据类型扩展"><a href="#2-3-数据类型扩展" class="headerlink" title="2.3 数据类型扩展"></a>2.3 数据类型扩展</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class HelloWorld &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //二进制0b  十进制  八进制0  十六进制0x</span><br><span class="line">        int i = 10;</span><br><span class="line">        int i2 = 010;   //八进制</span><br><span class="line">        int i3 = 0x10;  //十六进制</span><br><span class="line"></span><br><span class="line">        System.out.println(i2);   //结果  8</span><br><span class="line">        System.out.println(i3);   //结果  16</span><br><span class="line">        //-------------------------------------</span><br><span class="line">        //浮点数  ，银行不会用浮点表示，BigDecimal 数学工具类</span><br><span class="line">        //最好不要使用浮点数进行比较</span><br><span class="line">        //float  有限  离散  舍入误差  大约   接近但不等于</span><br><span class="line">        float f = 0.1f;   //0.1</span><br><span class="line">        double d = 1.0/10;   //0.1</span><br><span class="line"></span><br><span class="line">        System.out.println(f == d);  //false</span><br><span class="line"></span><br><span class="line">        float d1 = 34343434343f;</span><br><span class="line">        float d2 = d1+1;</span><br><span class="line"></span><br><span class="line">        System.out.println(d1 == d2);   //true</span><br><span class="line">        //-------------------------------------</span><br><span class="line">        //强制类型转换</span><br><span class="line">        char c1 = &#x27;A&#x27;;</span><br><span class="line">        char c2 = &#x27;我&#x27;;</span><br><span class="line"></span><br><span class="line">        System.out.println(c1);       //A</span><br><span class="line">        System.out.println((int)c1);  //65</span><br><span class="line">        System.out.println(c2);       //我</span><br><span class="line">        System.out.println((int)c2);  //25105</span><br><span class="line">        //-------------------------------------</span><br><span class="line">        //所有字符的本质还是数字   Unicode表</span><br><span class="line">        char c3 = &#x27;\u0061&#x27;;</span><br><span class="line">        System.out.println(c3);   //a</span><br><span class="line">        //-------------------------------------</span><br><span class="line">        //转义字符</span><br><span class="line">            //  \t   制表符</span><br><span class="line">            //  \n   换行</span><br><span class="line">        //-------------------------------------</span><br><span class="line">        String a = new String(&quot;Hello World&quot;);</span><br><span class="line">        String b = new String(&quot;Hello World&quot;);</span><br><span class="line">        System.out.println(a == b);    //false</span><br><span class="line"></span><br><span class="line">        String c = &quot;Hello World&quot;;</span><br><span class="line">        String e = &quot;Hello World&quot;;</span><br><span class="line">        System.out.println(c == e);    //false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-类型转换"><a href="#3-类型转换" class="headerlink" title="3.类型转换"></a>3.类型转换</h2><blockquote>
<p>由低到高：byte, short,char —- int —- long —- float —- double</p>
</blockquote>
<p>在运算过程中，不同类型的数据会先转换为同一类型，然后进行运算。</p>
<p><strong>注意事项：</strong></p>
<ol>
<li><p>不能对boolean类型进行转换</p>
</li>
<li><p>不能把对象类型转换为不相干的类型</p>
</li>
<li><p>将类型比较高的转换为低的时候需要强制转换<strong>：(需要转换为的类型)变量</strong></p>
</li>
<li><p>转换的时候可能存在内存溢出或者精度问题</p>
</li>
<li><p>强制转换   (类型)变量名    高 – 低</p>
<p>自动转换    低 – 高</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo01 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //内存溢出或精度问题</span><br><span class="line">        System.out.println((int)23.7);    //23</span><br><span class="line">        System.out.println((int)-45.89f); //-45</span><br><span class="line">        //===============================</span><br><span class="line">        char  c = &#x27;a&#x27;;</span><br><span class="line">        int d = c + 1;</span><br><span class="line">        System.out.println(d);        //98</span><br><span class="line">        System.out.println((char)d);  //b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-变量"><a href="#4-变量" class="headerlink" title="4.变量"></a>4.变量</h2><p>变量就是可以变化的量，Java是一种强类型语言，所以每一个变量都必须声明类型，Java变量是程序中最基本的存储单元，其要素包括变量名，变量类型和作用域。</p>
<p><strong>注意事项：</strong></p>
<ul>
<li>每个变量都有类型，类型可以是基本类型，也可以是引用类型</li>
<li>变量名必须是合法的标识符。</li>
<li>变量声明是一条完整的语句，因此每一个声明都必须以分号结束。</li>
</ul>
<p><strong>变量作用域：</strong></p>
<p>局部变量，类变量，实例变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo02 &#123;</span><br><span class="line"></span><br><span class="line">    //类变量 static</span><br><span class="line">    static double salary = 2500;</span><br><span class="line"></span><br><span class="line">    //除了基本类型，其余的默认值都是null；</span><br><span class="line">    String name;</span><br><span class="line">    int age;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //局部变量：必须声明和初始化值</span><br><span class="line">        int i = 10;</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">        //变量类型 变量名字=new Demo02();</span><br><span class="line">        Demo02 demo02 = new Demo02();</span><br><span class="line">        System.out.println(demo02.age);</span><br><span class="line">        System.out.println(demo02.name);</span><br><span class="line"></span><br><span class="line">        //类变量 static</span><br><span class="line">        System.out.println(salary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-常量"><a href="#5-常量" class="headerlink" title="5.常量"></a>5.常量</h2><p>常量(Constant)：初始化后不能再改变值，不会变的值</p>
<p>常量就是一种特殊的变量，它的值一旦被设定后，在程序运行过程中不允许被改变。 </p>
<p>常量名一般用大写字符。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static final double PI = 3.14;</span><br></pre></td></tr></table></figure>

<p><strong>常量变量的命名规范：</strong></p>
<ul>
<li>所有变量、方法、类型：见名知意</li>
<li>类成员变量：首字母小写和驼峰原则</li>
<li>局部变量：首字母小写和驼峰原则</li>
<li>常量：大写字母和下划线 ： PI</li>
<li>类型：首字母大写和驼峰原则</li>
<li>方法名：首字母小写和驼峰原则</li>
</ul>
<h2 id="6-运算符"><a href="#6-运算符" class="headerlink" title="6.运算符"></a>6.运算符</h2><p><img src="https://img-blog.csdnimg.cn/20200730101805517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<p><img src="https://img-blog.csdnimg.cn/20200730101832505.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<p><strong>注意</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo03 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        int a = 10 ;</span><br><span class="line">        int b = 20 ;</span><br><span class="line">        //当 + 左面出现String类型后按照连接，后面进行计算</span><br><span class="line">        System.out.println(&quot;&quot;+a+b);   //运行结果为：1020</span><br><span class="line">        System.out.println(a+b+&quot;&quot;);   //运行结果为：30</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-JavaDoc生成文档"><a href="#7-JavaDoc生成文档" class="headerlink" title="7.JavaDoc生成文档"></a>7.JavaDoc生成文档</h2><p>javadoc命令是用来生成自己API文档的</p>
<p><strong>参数信息</strong></p>
<pre><code>    1. @author  作者名

         2. @version  版本号
                   3. @since  指明需要最早使用的jdk版本
                             4. @param   参数名
                                       5. @return  返回值情况
                                                 6. @throws  异常抛出情况
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo04 &#123;</span><br><span class="line">    </span><br><span class="line">        String name;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * </span><br><span class="line">     * @param li</span><br><span class="line">     * @version 1.0</span><br><span class="line">     * @return name</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    public String test(String name) throws Exception &#123;</span><br><span class="line">            return name;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>命令行生成Doc文档：javadoc 参数 java文件</p>
</li>
<li><p>IDEA生成JavaDoc文档：Tools菜单 –&gt; Generate Java Doc scope –&gt;Output directory(选择生成文档的位置)</p>
<p><img src="https://img-blog.csdnimg.cn/20200730101943504.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center" alt="&lt;img src=&quot;C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200729190853304.png&quot; alt=&quot;image-20200729190853304&quot; style=&quot;zoom:67%;&quot; /&gt;"></p>
<p><a href="https://www.bilibili.com/video/BV12J41137hu?p=21">本章知识点学习自</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java异常知识</title>
    <url>/2021/08/03/Java/Java%E5%BC%82%E5%B8%B8%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h3 id="1-什么是异常"><a href="#1-什么是异常" class="headerlink" title="1.什么是异常"></a>1.什么是异常</h3><ul>
<li><p>实际工作中，遇到的情况不可能是非常完美的。比如：写一个模块，用户输入的不一定符合要求，程序要打开某个文件，这个文件可能不存在或格式不对，要读数据库的数据，数据可能是空的，程序跑着，内存或者硬盘满了等等</p>
</li>
<li><p>软件程序在运行过程中，非常可能遇到以上的异常问题(Exception)。</p>
</li>
<li><p>异常指程序运行中出现的不期而至的各种情况，如：文件找不到，网络连接失败，非法参数等</p>
</li>
<li><p>异常发生在程序运行期间，它影响了正常的程序执行流程。</p>
</li>
<li><p>三种类型的异常</p>
<ol>
<li>检查性异常：最具代表的检查性异常是用户输入错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在的文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</li>
<li>运行时异常：运行时异常是可能被程序员避免的异常，与检查性异常相反，运行时异常可以在编译时被忽略。</li>
<li>错误：错误不是异常，而是脱离程序员控制的问题。错误代码中通常被忽略。例如：当栈溢出时，一个错误就发生了，它们在编译也检查不到的。</li>
</ol>
</li>
<li><p>java中把异常当作对象处理，并定义了一个基类 java.lang.Throwable作为所有异常的超类。</p>
</li>
<li><p>异常分为两大类：错误Error和异常Exception</p>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/2020073115180195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center" alt="&lt;img src=&quot;C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200731133703234.png&quot; alt=&quot;image-20200731133703234&quot; style=&quot;zoom: 50%;&quot; /&gt;"></p>
<blockquote>
<p><strong>Error</strong></p>
</blockquote>
<ul>
<li>Error类对象由Java虚拟机生成抛出，大多数错误与代码编写者所执行的操作无关。</li>
<li>Java虚拟机运行错误(Virtual MachineError)，当JVM不再有继续执行操作所需的内存资源时，将出现OutOfMemoryError。这些异常发生时，Java虚拟机(JVM)一般会选择线程终止；</li>
<li>还有发生在虚拟机试图执行应用时，如类定义错误(NoClassDefFoundError)、链接错误(LinkageError)。这些错误是不可查的，因为他们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。</li>
</ul>
<blockquote>
<p><strong>Exception</strong></p>
</blockquote>
<ul>
<li><p>在Exception分支中有一个重要的子类RuntimeException(运行时异常)</p>
<ol>
<li>ArrayIndexOutOfBoundsException（数组下标越界）</li>
<li>NullPointerException（空指针异常）</li>
<li>ArithmeticException（算术异常）</li>
<li>MissingResourceException（丢失资源）</li>
<li>ClassNotFoundException（找不到类）等异常，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。</li>
</ol>
</li>
<li><p>这些异常一般都是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生</p>
</li>
<li><p>Error和Exception的区别：Error通常是灾难性的致命的错误，是程序无法控制和处理的，当出现这些异常时，Java虚拟机(JVM)一般会选择终止线程；Exception通常情况下是可以被程序处理的，并且在程序中应该尽可能的去处理这些异常。</p>
</li>
</ul>
<h3 id="2-异常处理机制"><a href="#2-异常处理机制" class="headerlink" title="2.异常处理机制"></a>2.异常处理机制</h3><ul>
<li>抛出异常，捕获异常</li>
<li>异常处理5个关键字：try、catch、finally、throw、throws</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//假如要捕获多个异常：从小到大</span></span><br><span class="line">        <span class="comment">//Ctrl+Alt+T 快捷键语句</span></span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">//try监控区域</span></span><br><span class="line">            <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;<span class="comment">//throw</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException();<span class="comment">//主动的抛出异常，一般用在方法中</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(a / b);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Error e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;<span class="comment">//catch(想要捕捉的异常类型)捕获异常</span></span><br><span class="line">            System.out.println(<span class="string">&quot;程序出现异常，变量b不能为0&quot;</span>);</span><br><span class="line">            e.printStackTrace();<span class="comment">//打印错误的栈信息</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Throwable&quot;</span>);<span class="comment">//Throwable是最大的异常</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;<span class="comment">//处理善后工作</span></span><br><span class="line">            System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//假设这个方法中，处理不了这个异常，方法上抛出异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> <span class="keyword">throws</span> ArithmeticException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;<span class="comment">//throw</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException();<span class="comment">//主动的抛出异常，一般用在方法中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-自定义异常"><a href="#3-自定义异常" class="headerlink" title="3.自定义异常"></a>3.自定义异常</h3><ul>
<li><p>处理运行时异常时，采用逻辑去合理规避同时辅助 try-catch 处理</p>
</li>
<li><p>在多重catch块后面，可以加一个catch(Exception)来处理可能会被遗漏的异常</p>
</li>
<li><p>对于不确定的代码，也可以加上 try-catch，处理潜在的异常</p>
</li>
<li><p>尽量去处理异常，切忌只是简单地调用printStackTrace()去打印输出</p>
</li>
<li><p>具体如何处理异常，要根据不同的业务需求和异常类型去决定</p>
</li>
<li><p>尽量添加finally语句块去释放占用的资源</p>
</li>
<li><p>使用Java内置的异常类可以描述在编程时出现的大部分异常情况。除此之外，用户还可以自定义异常。用户自定义异常类，只需继承Exception类即可。</p>
</li>
<li><p>在程序中使用自定义异常类，大体可以分为以下几个步骤：</p>
<ol>
<li>创建自定义异常类</li>
<li>在方法中通过throw关键字抛出异常对象</li>
<li>如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；否则在方法的声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步操作。</li>
<li>在出现异常方法的调用者中捕获并处理异常。</li>
</ol>
</li>
</ul>
<blockquote>
<p><strong>MyException 类（自定义的异常类）</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义异常类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="comment">//传递数字&gt;10；抛出异常</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> detail;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.detail = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//toString:异常的打印信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyException&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;detail=&quot;</span> + detail +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>Test1 类</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可能会存在异常的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span> <span class="keyword">throws</span> MyException </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;传递的参数为：&quot;</span> + a);</span><br><span class="line">        <span class="keyword">if</span> (a &gt; <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyException(a);<span class="comment">//抛出</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test(<span class="number">11</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MyException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;MyException=&gt;&quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.bilibili.com/video/BV12J41137hu?p=77">本章知识点学习自</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java数组</title>
    <url>/2021/08/02/Java/Java%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h3 id="1-数组概述"><a href="#1-数组概述" class="headerlink" title="1.数组概述"></a>1.数组概述</h3><ul>
<li>数组是相同类型数据（数据类型可以为任何类型）的有序集合</li>
<li>数组描述的是相同类型的若干个数据，按照一定的先后次序排列组合而成</li>
<li>每一个数据成为一个数组元素，每个数组元素可以通过一个下标来访问他们</li>
<li>数组的下标从 0 开始的</li>
<li>数组也是对象，数组元素相当于对象的成员变量</li>
<li>数组长度的确定，不可变的。越界报错：ArrayIndexOutofBoundsException</li>
<li>下标的合法区间：[0,length-1]</li>
</ul>
<h3 id="2-数组声明创建"><a href="#2-数组声明创建" class="headerlink" title="2.数组声明创建"></a>2.数组声明创建</h3><ul>
<li><p>首先声明数组变量，才能使用数组，声明语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dataType[] arrayRefVar;		//首选的方法</span><br><span class="line">或</span><br><span class="line">dataType arrayRefVar[];		//效果相同，但不是首选方法</span><br></pre></td></tr></table></figure></li>
<li><p>使用new操作符来创建数组，语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dataType[] arrayRefVar = new dataType[arraySize];</span><br></pre></td></tr></table></figure></li>
<li><p>数组的元素是通过索引访问的，数组索引从0 开始</p>
</li>
<li><p>获取数组的长度：arrays.length</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo01 &#123;</span><br><span class="line">    //变量的类型 变量名= 变量值;</span><br><span class="line">    //数组类型 变量名[] = 变量值;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] nums;     //1.声明一个数组</span><br><span class="line"></span><br><span class="line">        nums = new int[10];     //2.创建一个数组</span><br><span class="line"></span><br><span class="line">        //3.给数组元素赋值</span><br><span class="line">        for (int i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">            nums[i]=i+1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(nums[0]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200731090219848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p> <strong>三种初始化</strong></p>
</blockquote>
<ul>
<li><p>静态初始化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int[] a = &#123;1,2,3&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>动态初始化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int[] a = new int[2];</span><br><span class="line">a[0] = 1;</span><br><span class="line">a[1] = 2;</span><br></pre></td></tr></table></figure></li>
<li><p>数组的默认初始化</p>
<p>数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照    实例变量同样的方式被隐式初始化。</p>
<h4 id="数组的基本特点"><a href="#数组的基本特点" class="headerlink" title="数组的基本特点"></a>数组的基本特点</h4><ol>
<li>长度是确定的，数组一旦被创建，它的大小就是不可以改变的。</li>
<li>元素必须是相同的类型，不允许出现混合类型</li>
<li>数组中的元素可以是任何数据类型，包括基本类型和引用类型</li>
<li>数组变量属于引用类型，数组也可以看成是对象，数组中 每个元素相当于该对象的成员变量。</li>
<li>数组本身就是对象，Java中对象是在堆中的，因此数组无论保存原始类型还是其他对象理性，数组对象本身是在堆中的。</li>
</ol>
</li>
</ul>
<h3 id="3-数组使用"><a href="#3-数组使用" class="headerlink" title="3.数组使用"></a>3.数组使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo02 &#123;</span><br><span class="line">//数组的简单操作</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] arrays = &#123;1,2,3,4,5&#125;;</span><br><span class="line"></span><br><span class="line">        //打印全部的数组元素</span><br><span class="line">        for (int i = 0; i &lt; arrays.length; i++) &#123;</span><br><span class="line">            System.out.println(arrays[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //计算所有元素的和</span><br><span class="line">        int sum = 0;</span><br><span class="line">        for (int i = 0; i &lt; arrays.length; i++) &#123;</span><br><span class="line">            sum += arrays[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;sum=&quot;+sum);</span><br><span class="line"></span><br><span class="line">        //查找最大元素</span><br><span class="line">        int max = arrays[0];</span><br><span class="line">        for (int i = 1; i &lt; arrays.length; i++) &#123;</span><br><span class="line">            if (arrays[i]&gt;max)&#123;</span><br><span class="line">                max = arrays[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;max=&quot;+max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo03 &#123;</span><br><span class="line">//数组的进阶操作</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] arrays = &#123;1, 2, 3, 4, 5&#125;;</span><br><span class="line"></span><br><span class="line">        //JDK1.5, 没有下标</span><br><span class="line">        for (int array : arrays) &#123;</span><br><span class="line">            System.out.println(array);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        printArray(arrays);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        int[] reverse = reverse(arrays);</span><br><span class="line">        printArray(reverse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //打印数组元素</span><br><span class="line">    public static void printArray(int[] arrays) &#123;</span><br><span class="line">        for (int i = 0; i &lt; arrays.length; i++) &#123;</span><br><span class="line">            System.out.print(arrays[i] + &quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //反转数组</span><br><span class="line">    public static int[] reverse(int[] arrays) &#123;</span><br><span class="line">        int[] result = new int[arrays.length];</span><br><span class="line"></span><br><span class="line">        //反转的操作</span><br><span class="line">        for (int i = 0, j = result.length - 1; i &lt; arrays.length; i++, j--) &#123;</span><br><span class="line">            result[j] = arrays[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-多维数组"><a href="#4-多维数组" class="headerlink" title="4.多维数组"></a>4.多维数组</h3><ul>
<li><p>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其中每一个元素都是一个一维数组</p>
</li>
<li><p>语法格式：int a[] [] = new int[n] [m];       // 可以看成n行 m列<br><img src="https://img-blog.csdnimg.cn/20200731090328565.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center" alt="&lt;img src=&quot;C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200730144908896.png&quot; alt=&quot;image-20200730144908896&quot; style=&quot;zoom: 67%;&quot; /&gt;"></p>
</li>
</ul>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo04 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        int[][] array = &#123;&#123;1, 2&#125;, &#123;2, 3&#125;, &#123;3, 4&#125;, &#123;4, 5&#125;&#125;;</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; array.length; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; array[i].length; j++) &#123;</span><br><span class="line">                System.out.print(array[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-Arrays类"><a href="#5-Arrays类" class="headerlink" title="5.Arrays类"></a>5.Arrays类</h3><ul>
<li><p>数组的工具类java.util.Arrays</p>
</li>
<li><p>由于数组对象本身并没有什么方法可以供我们调用，但API中提供了一个工具类Arrays供我们使用，从而可以对数据对象进行一些基本的操作</p>
</li>
<li><p>Arrays类中的方法都是static修饰的静态方法，在使用的时候可以直接使用类名进行调用，而“不用”使用对象来调用(注意：是“不用”而不是“不能”)</p>
</li>
<li><p>具有以下常用功能</p>
<ol>
<li>给数组赋值：通过 fill 方法</li>
<li>对数组排序：通过 sort 方法，按升序。</li>
<li>比较数组：通过 equals 方法比较数组中元素值是否相等。</li>
<li>查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。</li>
</ol>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo05 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] a = &#123;1,4,7,2,9&#125;;</span><br><span class="line"></span><br><span class="line">        //打印数组元素Arrays.toString</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line"></span><br><span class="line">        Arrays.sort(a);//对数组元素进行排序   升序</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line"></span><br><span class="line">        Arrays.fill(a,0); //填充数组</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>冒泡排序</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public class Demo07 &#123;</span><br><span class="line">    //冒泡排序</span><br><span class="line">    //时间复杂度：O(n的二次方)</span><br><span class="line">    //1.比较数组中，两个相邻的元素，如果第一个数比第二个数大，就交换</span><br><span class="line">    //2.每一次比较，都会产生出一个最大，或者最小的数</span><br><span class="line">    //3.下轮少一次排序</span><br><span class="line">    //4.依次循环，知道结束</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] a = &#123;1,6,9,6,4,3&#125;;</span><br><span class="line"></span><br><span class="line">        int[] sort = sort(a);//调用sort方法 ，返回排序后的数组</span><br><span class="line">        System.out.println(Arrays.toString(sort));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static int[] sort(int[] array) &#123;</span><br><span class="line">        //临时变量</span><br><span class="line">        int temp = 0;</span><br><span class="line">        //外层循环，判断要走多少次</span><br><span class="line">        for (int i = 0; i &lt; array.length - 1; i++) &#123;</span><br><span class="line">            //内层循环，比较判断两个方法，如果第一个数比第二个大，则交换</span><br><span class="line">            for (int j = 0; j &lt; array.length - 1 - i; j++) &#123;</span><br><span class="line">                if (array[j + 1] &gt; array[j]) &#123;</span><br><span class="line">                    temp = array[j];</span><br><span class="line">                    array[j] = array[j + 1];</span><br><span class="line">                    array[j + 1] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return array;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-稀疏数组"><a href="#6-稀疏数组" class="headerlink" title="6.稀疏数组"></a>6.稀疏数组</h3><ul>
<li><p>当一个数组中大部分元素为0，或者为同一值的数组时，可以使用稀疏数组来保存该数组。</p>
</li>
<li><p>稀疏数组的处理方式是：</p>
<ol>
<li>记录数组一共有几行几列，有多少个不同值</li>
<li>把具有不同值得元素和行列及值记录在一个小规模的数据中，从而缩小程序的规模</li>
</ol>
<p><strong>左边是原始数组，右边是稀疏数组</strong></p>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200731090406364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center" alt="&lt;img src=&quot;C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200730161635012.png&quot; alt=&quot;image-20200730161635012&quot; style=&quot;zoom: 67%;&quot; /&gt;"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo08 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //1.创建一个二维数组 11*11    0：没有棋子 1：黑棋 2：白棋</span><br><span class="line">        int[][] array1 = new int[11][11];</span><br><span class="line">        array1[1][2] = 1;</span><br><span class="line">        array1[2][3] = 2;</span><br><span class="line">        //输出原始的数组</span><br><span class="line">        System.out.println(&quot;输出原始的数组&quot;);</span><br><span class="line">        for (int[] ints : array1) &#123;</span><br><span class="line">            for (int anInt : ints) &#123;</span><br><span class="line">                System.out.print(anInt + &quot;\t&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;===================================&quot;);</span><br><span class="line">        //转换为稀疏数组保存</span><br><span class="line">        //获取有效值的个数</span><br><span class="line">        int sum = 0;</span><br><span class="line">        for (int i = 0; i &lt; 11; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; 11; j++) &#123;</span><br><span class="line">                if (array1[i][j] != 0) &#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;有效值的个数；&quot; + sum);</span><br><span class="line"></span><br><span class="line">        //2.创建一个稀疏数组的数组</span><br><span class="line">        int[][] array2 = new int[sum + 1][3];</span><br><span class="line"></span><br><span class="line">        array2[0][0] = 11;</span><br><span class="line">        array2[0][1] = 11;</span><br><span class="line">        array2[0][2] = sum;</span><br><span class="line"></span><br><span class="line">        //遍历二维数组，将非零的值，存放稀疏数组中</span><br><span class="line">        int count = 0;</span><br><span class="line">        for (int i = 0; i &lt; array1.length; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; array1[i].length; j++) &#123;</span><br><span class="line">                if (array1[i][j]!=0)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    array2[count][0] = i;</span><br><span class="line">                    array2[count][1] = j;</span><br><span class="line">                    array2[count][2] = array1[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //输出稀疏数组</span><br><span class="line">        System.out.println(&quot;输出稀疏数组&quot;);</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; array2.length; i++) &#123;</span><br><span class="line">            System.out.println(array2[i][0]+&quot;\t&quot;+array2[i][1]+&quot;\t&quot;+array2[i][2]+&quot;\t&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;===================================&quot;);</span><br><span class="line">        System.out.println(&quot;还原稀疏数组&quot;);</span><br><span class="line">        //1.读取稀疏数组</span><br><span class="line">        int[][] array3 = new int[array2[0][0]][array2[0][1]];</span><br><span class="line">        //2.给其中的元素还原它的值</span><br><span class="line">        for (int i = 1; i &lt; array2.length; i++) &#123;</span><br><span class="line">            array3[array2[i][0]][array2[i][1]]=array2[i][2];</span><br><span class="line">        &#125;</span><br><span class="line">        //3.打印</span><br><span class="line">        System.out.println(&quot;输出还原的数组&quot;);</span><br><span class="line">        for (int[] ints : array3) &#123;</span><br><span class="line">            for (int anInt : ints) &#123;</span><br><span class="line">                System.out.print(anInt + &quot;\t&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.bilibili.com/video/BV12J41137hu?p=51">本章知识点学习自</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java方法详解</title>
    <url>/2021/08/02/Java/Java%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="1-什么是方法"><a href="#1-什么是方法" class="headerlink" title="1. 什么是方法"></a>1. 什么是方法</h2><p><strong>Java方法是语句的集合，他们在一起执行一个功能。</strong></p>
<ul>
<li><p>方法是解决一类问题的步骤的有序结合</p>
</li>
<li><p>方法包含于类或对象中</p>
</li>
<li><p>方法在程序中被创建，在其他地方被引用</p>
<p><strong>设计方法的原则：</strong>方法的本意是功能快，就是实现某个功能的语句块的集合。在设计方法的时候，最好保持方法的原子性，就是一个方法只能完成1个功能，有利于后期扩展。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo07 &#123;</span><br><span class="line"></span><br><span class="line">    //main 方法</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int sum = add(1,2);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //加法方法</span><br><span class="line">    public static int add(int a,int b)&#123;</span><br><span class="line">        return a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-方法的定义"><a href="#2-方法的定义" class="headerlink" title="2.方法的定义"></a>2.方法的定义</h2><p>Java的方法类似于其他语言的函数，是一段用来完成特定功能的代码片段</p>
<ul>
<li><p>方法包含一个方法头和一个方法体，下面是一个方法的所有部分</p>
<ol>
<li><p>修饰符：可选，告诉编译器如何调用该方法，定义了该方法的访问类型</p>
</li>
<li><p>返回值类型：方法可能会返回值，</p>
</li>
<li><p>方法名：方法的实际名称，方法名和参数表共同构成方法签名。</p>
</li>
<li><p>参数类型：参数像是一个占位符。当方法被调用时，传递值给参数。这个值称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。</p>
<ul>
<li><p>形式参数：在方法调用时用于接收外界输入的数据</p>
</li>
<li><p>实参：调用方法是实际传给方法的数据</p>
</li>
</ul>
</li>
<li><p>方法体：方法体包含具体的语句，定义该方法的功能</p>
</li>
</ol>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型 参数名)&#123;</span><br><span class="line">	...</span><br><span class="line">	方法体</span><br><span class="line">	...</span><br><span class="line">	return 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-方法调用"><a href="#3-方法调用" class="headerlink" title="3.方法调用"></a>3.方法调用</h2><ul>
<li><strong>调用方法：对象名.方法名(实参列表)</strong></li>
</ul>
<p>Java支持两种调用方法的方式，根据方法是否返回值来选择。</p>
<ul>
<li><p>当方法返回一个值的时候，方法调用通常被当作一个值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例如：int larger = max(30,40);</span><br></pre></td></tr></table></figure></li>
<li><p>如果方法返回值void,方法调用一定是一条语句。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例如：System.out.println(&quot;Hello World!&quot;);</span><br></pre></td></tr></table></figure>

<p><strong>Java中都是值传递</strong></p>
</li>
</ul>
<h2 id="4-方法的重载"><a href="#4-方法的重载" class="headerlink" title="4.方法的重载"></a>4.方法的重载</h2><ul>
<li>重载就是在一个类中，有相同的函数名称，但形参不同的参数。</li>
<li>方法的重载的规则：<ol>
<li>方法名称必须相同</li>
<li>参数列表必须不同(个数不同、或类型不同、参数排列顺序不同等)。</li>
<li>方法的返回类型可以相同也可以不相同。</li>
<li>仅仅返回类型不同不足以成为方法的重载。</li>
</ol>
</li>
</ul>
<p><strong>理论：</strong>方法名称相同时，编译器会根据调用方法的参数个数、参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。</p>
<h2 id="5-可变参数"><a href="#5-可变参数" class="headerlink" title="5.可变参数"></a>5.可变参数</h2><ul>
<li>在方法声明中，在指定参数类型后加一个省略号(…)</li>
<li>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo09 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Demo09 demo09 = new Demo09();</span><br><span class="line">        demo09.test(1,2,3,4,5);     //参数可以随意添加或删除</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void test(int... i)&#123;</span><br><span class="line">        System.out.println(i[0]);</span><br><span class="line">        System.out.println(i[1]);</span><br><span class="line">        System.out.println(i[2]);</span><br><span class="line">        System.out.println(i[3]);</span><br><span class="line">        System.out.println(i[4]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-递归"><a href="#6-递归" class="headerlink" title="6.递归"></a>6.递归</h2><ul>
<li>递归就是：A方法调用A方法，就是自己调用自己</li>
<li>利用递归可以用简单的程序解决一些复杂问题。通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来解决，递归策略只需要少量的程序就可以描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合。</li>
<li>递归结构包括两个部分：<ol>
<li>递归头：什么时候不调用自身方法。如果没有头，将陷入死循环。</li>
<li>递归体：什么时候需要调用自身方法</li>
</ol>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo010 &#123;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">        使用递归算法实现5！</span><br><span class="line">        对于数比较少可以使用，但比较大的计算尽量避免递归算法</span><br><span class="line">        主要是学习递归算法的思想</span><br><span class="line">     */</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(f(5));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static int f(int n)&#123;</span><br><span class="line">        if (n==1)&#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            return n * f(n-1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a href="https://www.bilibili.com/video/BV12J41137hu?p=45">本章知识点学习自</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java日期时间</title>
    <url>/2021/08/03/Java/Java%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<p>在 java.util 包中提供了 Date 类来封装当前的日期和时间，Date 类提供两个构造函数来实例化 Date 对象。</p>
<ol>
<li><p>构造函数使用当前日期和时间来初始化对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date date = <span class="keyword">new</span> Date();</span><br></pre></td></tr></table></figure></li>
<li><p>构造函数接收一个参数，该参数是从 1970年1月1日起的毫秒数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date date = <span class="keyword">new</span> Date(<span class="number">10000</span>);		--参数类型 <span class="keyword">long</span> millisec</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="1-Date-对象创建后，常用的方法"><a href="#1-Date-对象创建后，常用的方法" class="headerlink" title="1. Date 对象创建后，常用的方法"></a>1. Date 对象创建后，常用的方法</h3><ol>
<li><p><strong>boolean after(Date date)</strong></p>
<p>功能：可以用于两个日期的比较，如果调用此方法的Date对象在指定日期之后返回true，否则为false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date.after(<span class="keyword">new</span> Date(<span class="number">1000</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>boolean before(Date date)</strong></p>
<p>功能：可以用于两个日期的比较，如果调用此方法的Date对象在指定日期之前返回true，否则为false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);		<span class="comment">//休眠3秒</span></span><br><span class="line">        System.out.println(date.before(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>int compareTo(Date date)</strong></p>
<p>功能：可以用于两个日期的比较，比较当调用此方法的Date对象和指定日期。两者相同时候返回 0，调用对象在指定日期之前返回负数，之后返回正数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(date.compareTo(date));</span><br><span class="line">        System.out.println(date.compareTo(<span class="keyword">new</span> Date()));</span><br><span class="line">        System.out.println(date.compareTo(<span class="keyword">new</span> Date(<span class="number">10000</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">0</span></span><br><span class="line">    -<span class="number">1</span></span><br><span class="line">    <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>boolean equals(Object date)</strong></p>
<p>功能：可以用于两个日期的比较，调用此方法的Date对象和指定日期相等时候返回true，否则返回false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Date date1 = <span class="keyword">new</span> Date(<span class="number">10000</span>);</span><br><span class="line">        Date date2 = <span class="keyword">new</span> Date(<span class="number">10000</span>);</span><br><span class="line">        System.out.println(date1.equals(date2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>long getTime()</strong></p>
<p>功能：可以用于两个日期的比较，返回 1970年1月1日00：00：00以来此Date对象表示的毫秒数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Date date1 = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date1.getTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">1605070329120</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>int hashCode()</strong></p>
<p>功能：返回此对象的哈希码值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Date date1 = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date1.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    -<span class="number">1247371646</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>void setTime(long time)</strong></p>
<p>功能：根据1970年1月1日00：00：00以后时间毫秒数设置时间和日期</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Date date1 = <span class="keyword">new</span> Date();</span><br><span class="line">        date1.setTime(<span class="number">1</span>);</span><br><span class="line">        System.out.println(date1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    Thu Jan <span class="number">01</span> 08:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1970</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>String toString()</strong></p>
<p>功能：把Date对象转换成String类型格式：</p>
<p><code>周几(Sun,Mon,Tue,Wed,Thu,Fri,Sat) mon dd hh:mm:ss zzz yyyy</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Date date1 = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date1.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    Wed Nov <span class="number">11</span> <span class="number">12</span>:<span class="number">56</span>:<span class="number">39</span> CST <span class="number">2020</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-SimpleDateFormat-格式化日期"><a href="#2-SimpleDateFormat-格式化日期" class="headerlink" title="2. SimpleDateFormat 格式化日期"></a>2. SimpleDateFormat 格式化日期</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(simpleDateFormat.format(date));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">2020</span>-<span class="number">11</span>-<span class="number">11</span> <span class="number">01</span>:<span class="number">05</span>:<span class="number">29</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>SimpleDateFormat simpleDateFormat = new SimpleDateFormat(“yyyy-MM-dd hh:mm:ss”);</p>
<p>这一行确立转换的格式，yyyy是完整的公元年，MM是月份，dd是日期，hh：mm：ss是时、分、秒。</p>
</blockquote>
<h4 id="2-1-解析字符串为时间"><a href="#2-1-解析字符串为时间" class="headerlink" title="2.1 解析字符串为时间"></a><strong>2.1 解析字符串为时间</strong></h4><p>parse()，附加方法，按照给定的 SimpleDateFormat 对象的格式化存储来解析字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        System.out.println(simpleDateFormat.parse(<span class="string">&quot;2020-11-11&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    Wed Nov <span class="number">11</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">2020</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-使用-pringf-格式化日期"><a href="#2-2-使用-pringf-格式化日期" class="headerlink" title="2.2 使用 pringf 格式化日期"></a>2.2 使用 pringf 格式化日期</h4><p>printf 方法可以很轻松地格式化时间和日期。使用字符的格式，以 %t 开头并且，以表格中的一个字母结尾。</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>说明</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>c</td>
<td>包括全部日期和时间信息</td>
<td>星期三 十一月 11 12:00:00 CST 2020</td>
</tr>
<tr>
<td>F</td>
<td>年-月-日</td>
<td>2020-11-11</td>
</tr>
<tr>
<td>D</td>
<td>月/日/年</td>
<td>11/11/2020</td>
</tr>
<tr>
<td>r</td>
<td>HH:MM:SS PM    –12时制</td>
<td>12：00：00 中午</td>
</tr>
<tr>
<td>T</td>
<td>HH:MM:SS     –24时制</td>
<td>13：00：00</td>
</tr>
<tr>
<td>R</td>
<td>HH:MM     –24时制</td>
<td>13：00</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.printf(<span class="string">&quot;%tc%n&quot;</span>, date); <span class="comment">//%n是换行</span></span><br><span class="line">        System.out.printf(<span class="string">&quot;%tF%n&quot;</span>, date);</span><br><span class="line">        System.out.printf(<span class="string">&quot;%tD%n&quot;</span>, date);</span><br><span class="line">        System.out.printf(<span class="string">&quot;%tr%n&quot;</span>, date);</span><br><span class="line">        System.out.printf(<span class="string">&quot;%tT%n&quot;</span>, date);</span><br><span class="line">        System.out.printf(<span class="string">&quot;%tR%n&quot;</span>, date);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    星期三 十一月 <span class="number">11</span> <span class="number">13</span>:<span class="number">17</span>:<span class="number">25</span> CST <span class="number">2020</span></span><br><span class="line">	<span class="number">2020</span>-<span class="number">11</span>-<span class="number">11</span></span><br><span class="line">	<span class="number">11</span>/<span class="number">11</span>/<span class="number">20</span></span><br><span class="line">	<span class="number">01</span>:<span class="number">17</span>:<span class="number">25</span> 下午</span><br><span class="line">	<span class="number">13</span>:<span class="number">17</span>:<span class="number">25</span></span><br><span class="line">	<span class="number">13</span>:<span class="number">17</span></span><br></pre></td></tr></table></figure>

<h3 id="3-Java-中的休眠和测量时间"><a href="#3-Java-中的休眠和测量时间" class="headerlink" title="3. Java 中的休眠和测量时间"></a>3. Java 中的休眠和测量时间</h3><h4 id="3-1-休眠，sleep"><a href="#3-1-休眠，sleep" class="headerlink" title="3.1 休眠，sleep"></a>3.1 休眠，sleep</h4><p>sleep()  使当前的线程变成停滞状态，阻塞当前线程，让出 CPU 的使用，目的是不让当前的线程独占该进程所获取的 CPU 资源，以留一定时间给其他线程执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);<span class="comment">//休眠3秒</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    Wed Nov <span class="number">11</span> <span class="number">13</span>:<span class="number">36</span>:<span class="number">29</span> CST <span class="number">2020</span></span><br><span class="line">	Wed Nov <span class="number">11</span> <span class="number">13</span>:<span class="number">36</span>:<span class="number">32</span> CST <span class="number">2020</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-测量时间，以毫秒为单位"><a href="#3-2-测量时间，以毫秒为单位" class="headerlink" title="3.2 测量时间，以毫秒为单位"></a>3.2 测量时间，以毫秒为单位</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">            System.out.println(<span class="keyword">new</span> Date());</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            System.out.println(<span class="keyword">new</span> Date());</span><br><span class="line">            <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">            System.out.println(end - start);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    Wed Nov <span class="number">11</span> <span class="number">13</span>:<span class="number">39</span>:<span class="number">52</span> CST <span class="number">2020</span></span><br><span class="line">	Wed Nov <span class="number">11</span> <span class="number">13</span>:<span class="number">39</span>:<span class="number">55</span> CST <span class="number">2020</span></span><br><span class="line">	<span class="number">3018</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java正则表达式常用知识点总结</title>
    <url>/2021/08/03/Java/Java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>一个正则表达式是含有一些具有特殊意义字符的字符串，这些特殊字符称作正则表达式中的元字符。正则表达式定义了字符串的模式，可以用来搜索、编辑或处理文本，并不仅限于某一种语言，但是在每种语言中有细微的差别。</p>
<h4 id="1-正则表达式语法"><a href="#1-正则表达式语法" class="headerlink" title="1. 正则表达式语法"></a>1. 正则表达式语法</h4><p>在 Java 中，\ \ 有着特殊的意义，这个表示要插入一个正则表达式的反斜线，\ 后面有的字符具有特殊的意义。一个 \ 有着转义的作用。</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>在正则表达式中的写法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>.</td>
<td>匹配除了 “\r\n”之外的任何一个字符</td>
</tr>
<tr>
<td>\d</td>
<td>\ \d</td>
<td>代表 0 到 9 的任何一个数字，等效于 [0-9]</td>
</tr>
<tr>
<td>\D</td>
<td>\ \D</td>
<td>代表任何一个非数字字符，等效于 [ ^ 0-9]</td>
</tr>
<tr>
<td>\s</td>
<td>\ \s</td>
<td>匹配任何空白字符，包括空格，‘\t’，‘\n’，‘\x0B’，‘\f’，‘\r’，\s+可以匹配多个空格</td>
</tr>
<tr>
<td>\S</td>
<td>\ \S</td>
<td>代表非空格类字符</td>
</tr>
<tr>
<td>\w</td>
<td>\ \w</td>
<td>代表可用于标识符的字符(不包括美元符号)</td>
</tr>
<tr>
<td>\W</td>
<td>\ \W</td>
<td>代表不能用于标识符的字符</td>
</tr>
<tr>
<td>\p{Lower}</td>
<td>\ \p{Lower}</td>
<td>小写字母[a~z]</td>
</tr>
<tr>
<td>\p{Upper}</td>
<td>\ \p{Upper}</td>
<td>大写字母[A~Z]</td>
</tr>
<tr>
<td>\p{ASCII}</td>
<td>\ \p{ASCII}</td>
<td>ASCII字符</td>
</tr>
<tr>
<td>\p{Alpha}</td>
<td>\ \p{Alpha}</td>
<td>字母</td>
</tr>
<tr>
<td>\p{Digit}</td>
<td>\ \p{Digit}</td>
<td>数字字符，即[0~9]</td>
</tr>
<tr>
<td>\p{Alnum}</td>
<td>\ \p{Alnum}</td>
<td>字母或数字</td>
</tr>
<tr>
<td>\p{Punct}</td>
<td>\ \p{Punct}</td>
<td>标点符号：！“ # $ % &amp; ‘ ( ) * + , - . / : ; &lt; = &gt; ? @ [ \ ] ^ _ ` { | } ~</td>
</tr>
<tr>
<td>\p{Graph}</td>
<td>\ \p{Graph}</td>
<td>可视字符：\p{Alnum}\p{Punct}</td>
</tr>
<tr>
<td>\p{Print}</td>
<td>\ \p{Print}</td>
<td>可打印字符：\p{Graph}</td>
</tr>
<tr>
<td>\p{Blank}</td>
<td>\ \p{Blank}</td>
<td>空格或制表符 [\t]</td>
</tr>
<tr>
<td>\p{Cntrl}</td>
<td>\ \p{Cntrl}</td>
<td>控制字符： [\x00-\x1F\x7F]</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>字符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>\</td>
<td>转义字符，将下一个字符标记为特殊字符，文本，反向引用或八进制转义符。\n 匹配换行符，\ \ ( 匹配  （</td>
</tr>
<tr>
<td>^</td>
<td>匹配输入字符串开始的位置</td>
</tr>
<tr>
<td>$</td>
<td>匹配输入字符串结尾的位置</td>
</tr>
<tr>
<td>*</td>
<td>零次或多次匹配前面的字符或子表达式。例如：ab* 匹配 “ab”，”abb”，等效于 {0，}</td>
</tr>
<tr>
<td>+</td>
<td>一次或多次匹配前面的字符或子表达式。例如：ab+ 匹配 “ab” ，“abb”但不匹配“a”，等效于{1，}</td>
</tr>
<tr>
<td>？</td>
<td>零次或一次匹配匹配钱前面的字符或子表达式。例如：ab 匹配 “ab”，“a”，等效于{0,1}</td>
</tr>
<tr>
<td>{n}</td>
<td>n 是非负正数，正好匹配 n 次。例如：a{2} 匹配 ”aa“</td>
</tr>
<tr>
<td>{n，}</td>
<td>n 是非负整数。至少匹配 n 次。例如：a{2，} 匹配 ”aaaaaa“，a{1，} 等效于”a+“，a{n，}等效于 ”o*“</td>
</tr>
<tr>
<td>{n，m}</td>
<td>m和n都是非负整数，其中 n &lt;= m。匹配至少 n 次，至多 m 次。例如：a{1，3} 匹配 ”baa“ ，”o{0，1}“等效于 ”o？“，注意：不能将空格插入逗号和数字之间。</td>
</tr>
<tr>
<td>？</td>
<td>当次字符紧随任何其他限定符(*,+,?,{n},{n,},{n,m})之后时，匹配模式是“非贪心的”。“非贪心的”模式匹配搜索到的，尽可能短的字符串，而默认的“贪心的”模式匹配搜索到的，尽可能长的字符串。例如：在“aaaa”中，“a+?”只匹配单个 a，o+匹配所有的 a</td>
</tr>
<tr>
<td>(pattern)</td>
<td>匹配 pattern 并捕获该匹配的子表达式。例如：要匹配 （  ，java使用 (“\ \ (”)</td>
</tr>
<tr>
<td>(?:pattern)</td>
<td>匹配pattern但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。例如：（?:a|b）cc    匹配 acc，bcc</td>
</tr>
<tr>
<td>(?=pattern)</td>
<td>执行正向预测先行搜索的子表达式,该表达式匹配处于匹配 pattern 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如：’Windows (?=95|98|2000）`匹配 Windows 2000 中的 Window，但不匹配 Windows 3 中的 Windows。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td>
</tr>
<tr>
<td>(?!pattern)</td>
<td>执行反向预测先行搜索的子表达式该表达式，该表达式匹配不处于匹配 pattern 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如：’Windows (?!95|98|2000)`  匹配 Windows 3 中的 Windows，但不匹配 Windows 2000 中的 Windows。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td>
</tr>
<tr>
<td>x|y</td>
<td>匹配 x 或 y。例如：a|b  匹配 a 或 b</td>
</tr>
<tr>
<td>[xyz]</td>
<td>字符集。匹配包含的任一字符。例如： [abc]  匹配 book 中的 b</td>
</tr>
<tr>
<td>[^xyz]</td>
<td>反向字符集。匹配未包含的任何字符。例如：[ ^ abc] 匹配 book 中的 o k</td>
</tr>
<tr>
<td>[a-z]</td>
<td>字符范围。匹配指定范围内的任何字符。例如：[a-z] 匹配 a 到 z 内的任何小写字母</td>
</tr>
<tr>
<td>[^a-z]</td>
<td>反向字符范围。匹配不在指定的范围内的任何字符。例如：[ ^a-z] 匹配任何不在 a 到 z 范围内的任何字符</td>
</tr>
<tr>
<td>\b</td>
<td>匹配一个字边界，即字与空格间的位置。例如：“er\b” 匹配 never 中的 er ，但不匹配 verb 中 er</td>
</tr>
<tr>
<td>\B</td>
<td>非字边界匹配。“er\B” 匹配 verb 中的 er，但不匹配 never 中的 er</td>
</tr>
<tr>
<td>\cx</td>
<td>匹配 x 指示的控制字符。例如：\cM 匹配 Control-M 或 回车符。x 的值必须在 A -Z 或 a - z 之间。如果不是这样，则假定 c 就是 “c” 字符本身。</td>
</tr>
<tr>
<td>\f</td>
<td>换页符匹配。等效于 \x0c 和 \cL</td>
</tr>
<tr>
<td>\n</td>
<td>换行符匹配。等效于 \x0a 和 \cJ</td>
</tr>
<tr>
<td>\r</td>
<td>匹配一个回车符。等效于 \x0d 和 \cM</td>
</tr>
<tr>
<td>\t</td>
<td>制表符匹配。等效于 \x09 和 \cl</td>
</tr>
<tr>
<td>\v</td>
<td>垂直制表符匹配。等效于 \x0b 和 \cK</td>
</tr>
<tr>
<td>\w</td>
<td>匹配任何字类字符，包括下划线。等效于 [A-Za-z0-9_]</td>
</tr>
<tr>
<td>\W</td>
<td>匹配任何非单词字符，等效于[ ^ fA-Za-z0-9_]</td>
</tr>
<tr>
<td>\xn</td>
<td>匹配 n，此处的 n 是一个十六进制转义码。十六进制转义码必须正好是两位数长。例如：\x041 匹配 A。\x041 与 \x04 &amp; 1 等效，允许在正则表达式中使用 ASCII 代码</td>
</tr>
<tr>
<td>\num</td>
<td>匹配 num，此处的 num 是一个正整数，到捕获匹配的反向引用。例如：“(.)\1” 匹配两个连续的相同字符</td>
</tr>
<tr>
<td>\n</td>
<td>标识一个八进制转义码或反向引用。如果 \n 前面至少有 n 个捕获子表达式，那么 n 是反向引用。否则，如果 n 是八进制数(0-7)，那么 n 是八进制转义码</td>
</tr>
<tr>
<td>\nm</td>
<td>标识一个八进制转义码或反向引用。如果 \nm 前面至少有 nm 个捕获子表达式，那么 nm 是反向引用。如果 \nm 前面至少有 n  个捕获，则 n 是反向引用，后面跟有字符 m。如果两种前面的情况都不存在，则 \nm 匹配 八进制值 nm，其中 n 和 m 是八进制数字 (0-7)</td>
</tr>
<tr>
<td>\nml</td>
<td>当 n 是八进制数(0-3)，m 和 / 是八进制数 (0-7) 时，匹配八进制转义码 nml</td>
</tr>
<tr>
<td>\un</td>
<td>匹配 n，其中 n 是以四位十六进制数表示的 Unicode 字符。例如：\u00A9 匹配版权符号 @</td>
</tr>
</tbody></table>
<h4 id="2-捕获组"><a href="#2-捕获组" class="headerlink" title="2. 捕获组"></a>2. 捕获组</h4><p>捕获组就是把多个字符当一个单独单元进行处理的方法，它通过对括号内的字符分组来创建。</p>
<p>捕获组是通过从从左至右计算其开括号来编号。例如：在表达式 （（A）（B（C））），有四个组：</p>
<ul>
<li>（（A）（B（C）））</li>
<li>（A）</li>
<li>（B（C））</li>
<li>（C）</li>
</ul>
<p>可以通过调用 matcher 对象的 groupCount 方法来查看表达式有多少个分组。groupCount 方法返回一个 int 值，表示 matcher 对象当前有多少个捕获组，特殊组(group(0))，它总是代表整个表达式，不包括在groupCount的返回值中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pattern regex = Pattern.compile(<span class="string">&quot;((A)(B(C)))&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Matcher matcher = regex.matcher(<span class="string">&quot;ABC&quot;</span>);</span><br><span class="line">        System.out.println(matcher.groupCount());</span><br><span class="line">        matcher.find();</span><br><span class="line">        System.out.println(matcher.group(<span class="number">0</span>));</span><br><span class="line">        System.out.println(matcher.group(<span class="number">1</span>));</span><br><span class="line">        System.out.println(matcher.group(<span class="number">2</span>));</span><br><span class="line">        System.out.println(matcher.group(<span class="number">3</span>));</span><br><span class="line">        System.out.println(matcher.group(<span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="number">4</span></span><br><span class="line">    ABC</span><br><span class="line">    ABC</span><br><span class="line">    A</span><br><span class="line">    BC</span><br><span class="line">    C</span><br></pre></td></tr></table></figure>

<h4 id="3-Pattern-类"><a href="#3-Pattern-类" class="headerlink" title="3.  Pattern 类"></a>3.  Pattern 类</h4><p>Pattern 类用于创建一个正则表达式，也可以说创建一个匹配模式。它的构造方法是私有的，不可以直接创建，但可以通过 Pattern.complie(String  regex) 简单工厂方法创建一个正则表达式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pattern regex = Pattern.compile(<span class="string">&quot;\\d+&quot;</span>);</span><br><span class="line">        System.out.println(regex.pattern());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    \d+</span><br><span class="line">返回的是 regex 的参数</span><br></pre></td></tr></table></figure>

<h5 id="3-1-Pattern-split-CharSequence-input"><a href="#3-1-Pattern-split-CharSequence-input" class="headerlink" title="3.1.Pattern.split(CharSequence input)"></a>3.1.Pattern.split(CharSequence input)</h5><p>功能：用于分隔字符串，并返回一个 String[]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pattern regex = Pattern.compile(<span class="string">&quot;\\d+&quot;</span>);</span><br><span class="line">        String[] str = regex.split(<span class="string">&quot;a1b2c3d4&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : str) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    a</span><br><span class="line">    b</span><br><span class="line">    c</span><br><span class="line">    d</span><br></pre></td></tr></table></figure>

<h5 id="3-2-Pattern-matches-String-regex-CharSequence-input"><a href="#3-2-Pattern-matches-String-regex-CharSequence-input" class="headerlink" title="3.2 Pattern.matches(String regex, CharSequence input)"></a>3.2 Pattern.matches(String regex, CharSequence input)</h5><p>功能：静态方法，用于快速匹配字符串，该方法适合用于只匹配一次，且匹配全部字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Pattern.matches(<span class="string">&quot;\\d+&quot;</span>, <span class="string">&quot;33&quot;</span>));</span><br><span class="line">        System.out.println(Pattern.matches(<span class="string">&quot;\\d+&quot;</span>, <span class="string">&quot;33aa&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">false</span></span><br></pre></td></tr></table></figure>

<h5 id="3-3-Pattern-matcher-CharSequence-input"><a href="#3-3-Pattern-matcher-CharSequence-input" class="headerlink" title="3.3 Pattern.matcher(CharSequence input)"></a>3.3 Pattern.matcher(CharSequence input)</h5><p>返回一个 Matcher 对象，Matcher 类的构造方法也是私有的，不能随意创建，只能通过 Pattern.matcher(CharSequence input)方法得到该类似的实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">&quot;\\d+&quot;</span>);</span><br><span class="line">        Matcher matcher = pattern.matcher(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        System.out.println(matcher.pattern());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    \d+</span><br><span class="line">返回的 pattern，也就是返回 Mathcer 对象是由那个 Pattern 对象创建的</span><br></pre></td></tr></table></figure>

<p>Pattern 类只能做一些简单的匹配操作，要想得到更好的正则匹配操作需要将 Pattern 和 Matcher 一起合作。Matcher 类提供了对正则表达式的分组支持，以及对正则表达式的多次匹配操作。</p>
<h4 id="4-Matcher-类"><a href="#4-Matcher-类" class="headerlink" title="4. Matcher 类"></a>4. Matcher 类</h4><h5 id="4-1-Matcher-matches"><a href="#4-1-Matcher-matches" class="headerlink" title="4.1 Matcher.matches()"></a>4.1 Matcher.matches()</h5><p>功能：匹配操作方法，返回 boolean 类型，当匹配到时返回true，否则返回 false。</p>
<p>matches 是对整个字符串进行匹配，只有整个字符串都匹配了才返回 true</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">&quot;\\d+&quot;</span>);</span><br><span class="line">        Matcher matcher = pattern.matcher(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        System.out.println(matcher.matches());</span><br><span class="line">        Matcher matcher1 = pattern.matcher(<span class="string">&quot;123abc&quot;</span>);</span><br><span class="line">        System.out.println(matcher1.matches());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">false</span></span><br></pre></td></tr></table></figure>

<h5 id="4-2-Matcher-lookingAt"><a href="#4-2-Matcher-lookingAt" class="headerlink" title="4.2 Matcher.lookingAt()"></a>4.2 Matcher.lookingAt()</h5><p>功能：匹配操作方法，返回 boolean 类型，对前面的字符串进行匹配，只有匹配的字符串在最前面才返回true，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">&quot;\\d+&quot;</span>);</span><br><span class="line">        Matcher matcher = pattern.matcher(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        System.out.println(matcher.lookingAt());</span><br><span class="line">        Matcher matcher1 = pattern.matcher(<span class="string">&quot;123abc&quot;</span>);</span><br><span class="line">        System.out.println(matcher1.lookingAt());</span><br><span class="line">        Matcher matcher2 = pattern.matcher(<span class="string">&quot;abc123&quot;</span>);</span><br><span class="line">        System.out.println(matcher2.lookingAt());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">false</span></span><br></pre></td></tr></table></figure>

<h5 id="4-3-Matcher-find"><a href="#4-3-Matcher-find" class="headerlink" title="4.3 Matcher.find()"></a>4.3 Matcher.find()</h5><p>功能：匹配操作方法，返回 boolean 类型，匹配到的字符串可以在任何位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">&quot;\\d+&quot;</span>);</span><br><span class="line">        Matcher matcher = pattern.matcher(<span class="string">&quot;a123b&quot;</span>);</span><br><span class="line">        System.out.println(matcher.find());</span><br><span class="line">        Matcher matcher1 = pattern.matcher(<span class="string">&quot;123abc&quot;</span>);</span><br><span class="line">        System.out.println(matcher1.find());</span><br><span class="line">        Matcher matcher2 = pattern.matcher(<span class="string">&quot;abc123&quot;</span>);</span><br><span class="line">        System.out.println(matcher2.find());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<h5 id="4-4-Matcher-start"><a href="#4-4-Matcher-start" class="headerlink" title="4.4  Matcher.start()"></a>4.4  Matcher.start()</h5><p>功能：返回匹配到的字符串在字符串中的索引位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">&quot;\\d+&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Matcher matcher = pattern.matcher(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        System.out.println(matcher.matches());</span><br><span class="line">        System.out.println(matcher.start());</span><br><span class="line"></span><br><span class="line">        Matcher matcher1 = pattern.matcher(<span class="string">&quot;123abc&quot;</span>);</span><br><span class="line">        System.out.println(matcher1.lookingAt());</span><br><span class="line">        System.out.println(matcher1.start());</span><br><span class="line"></span><br><span class="line">        Matcher matcher2 = pattern.matcher(<span class="string">&quot;abc123&quot;</span>);</span><br><span class="line">        System.out.println(matcher2.find());</span><br><span class="line">        System.out.println(matcher2.start());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span> </span><br><span class="line">    <span class="number">0</span></span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    <span class="number">0</span></span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h5 id="4-5-Matcher-end"><a href="#4-5-Matcher-end" class="headerlink" title="4.5 Matcher.end()"></a>4.5 Matcher.end()</h5><p>功能：返回匹配到的字符串的最后一个字符在字符串中的索引位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">&quot;\\d+&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Matcher matcher = pattern.matcher(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        System.out.println(matcher.matches());</span><br><span class="line">        System.out.println(matcher.end());</span><br><span class="line"></span><br><span class="line">        Matcher matcher1 = pattern.matcher(<span class="string">&quot;123abc&quot;</span>);</span><br><span class="line">        System.out.println(matcher1.lookingAt());</span><br><span class="line">        System.out.println(matcher1.end());</span><br><span class="line"></span><br><span class="line">        Matcher matcher2 = pattern.matcher(<span class="string">&quot;abc123&quot;</span>);</span><br><span class="line">        System.out.println(matcher2.find());</span><br><span class="line">        System.out.println(matcher2.end());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    <span class="number">3</span></span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    <span class="number">3</span></span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    <span class="number">6</span></span><br></pre></td></tr></table></figure>

<h5 id="4-6-Matcher-group"><a href="#4-6-Matcher-group" class="headerlink" title="4.6 Matcher.group()"></a>4.6 Matcher.group()</h5><p>功能：返回匹配到的子字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">&quot;\\d+&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Matcher matcher = pattern.matcher(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        System.out.println(matcher.matches());</span><br><span class="line">        System.out.println(matcher.group());</span><br><span class="line"></span><br><span class="line">        Matcher matcher1 = pattern.matcher(<span class="string">&quot;123abc&quot;</span>);</span><br><span class="line">        System.out.println(matcher1.lookingAt());</span><br><span class="line">        System.out.println(matcher1.group());</span><br><span class="line"></span><br><span class="line">        Matcher matcher2 = pattern.matcher(<span class="string">&quot;abc123&quot;</span>);</span><br><span class="line">        System.out.println(matcher2.find());</span><br><span class="line">        System.out.println(matcher2.group());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    <span class="number">123</span></span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    <span class="number">123</span></span><br><span class="line">    <span class="keyword">true</span></span><br><span class="line">    <span class="number">123</span></span><br></pre></td></tr></table></figure>

<h5 id="4-7-replaceFirst和replaceAll方法"><a href="#4-7-replaceFirst和replaceAll方法" class="headerlink" title="4.7 replaceFirst和replaceAll方法"></a>4.7 replaceFirst和replaceAll方法</h5><p>功能：替换匹配正则表达式的文本，replaceFirst替换首次匹配，replaceAll替换所有匹配</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;I am a student, he is a student&quot;</span>;</span><br><span class="line">        String regex = <span class="string">&quot;student&quot;</span>;</span><br><span class="line">        Pattern pattern = Pattern.compile(regex);</span><br><span class="line">        Matcher matcher = pattern.matcher(str);</span><br><span class="line">        System.out.println(matcher.replaceFirst(<span class="string">&quot;teacher&quot;</span>));</span><br><span class="line">        System.out.println(matcher.replaceAll(<span class="string">&quot;teacher&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    I am a teacher,he is a student</span><br><span class="line">    I am a teacher,he is a teacher</span><br></pre></td></tr></table></figure>

<p>学习内容参考自：<a href="https://www.runoob.com/java/java-regular-expressions.html%E5%92%8Chttps://blog.csdn.net/qq_18298439/article/details/88974940">https://www.runoob.com/java/java-regular-expressions.html和https://blog.csdn.net/qq_18298439/article/details/88974940</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java流程控制语句</title>
    <url>/2021/08/02/Java/Java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h2 id="1-用户交互Scanner"><a href="#1-用户交互Scanner" class="headerlink" title="1.用户交互Scanner"></a>1.用户交互Scanner</h2><blockquote>
<p>头文件：java.util.Scanner</p>
<p>通过 Scanner 类获取用户的输入</p>
</blockquote>
<p><strong>基础语法：Scanner scanner = new Scanner(System.in);</strong></p>
<ul>
<li><p><strong>next();</strong></p>
<ol>
<li>一定要读取到有效字符后才可以结束输入。</li>
<li>对输入有效字符之前遇到的空白，next（）方法会自动将其去掉</li>
<li>只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符</li>
<li>next()不能得到带有空格的字符串。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Demo05 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        //创建一个扫描器对象，用于接收键盘数据</span><br><span class="line">        Scanner scanner = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;使用next方式接受：&quot;);</span><br><span class="line"></span><br><span class="line">        //判断用户有没有输入字符串</span><br><span class="line">        if (scanner.hasNext())&#123;         //判断语句可以省略</span><br><span class="line">            //使用next方法接收</span><br><span class="line">            String str = scanner.next();   //等待用户输入完毕</span><br><span class="line">            System.out.println(&quot;输出的内容为：&quot;+str);    //加入输入a a a</span><br><span class="line">                                                       //输入结果为：a</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //凡是属于IO流的类如果不关闭会一直占用资源，记得关掉</span><br><span class="line">        scanner.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p><strong>nextLine( ) :</strong></p>
<ol>
<li>以Enter为结束符，nextLine()方法返回的是输入回车之前的所有字符。</li>
<li>可以获得带有空格的字符串</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Demo05 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        //创建一个扫描器对象，用于接收键盘数据</span><br><span class="line">        Scanner scanner = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;使用next方式接受：&quot;);</span><br><span class="line"></span><br><span class="line">        //判断用户有没有输入字符串</span><br><span class="line">        if (scanner.hasNextLine())&#123;         //判断语句可以省略</span><br><span class="line">            //使用next方法接收</span><br><span class="line">            String str = scanner.nextLine();   //等待用户输入完毕</span><br><span class="line">            System.out.println(&quot;输出的内容为：&quot;+str);    //加入输入a a a</span><br><span class="line">                                                       //输入结果为：a a a </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //凡是属于IO流的类如果不关闭会一直占用资源，记得关掉</span><br><span class="line">        scanner.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-顺序结构"><a href="#2-顺序结构" class="headerlink" title="2.顺序结构"></a>2.顺序结构</h2><p>JAVA的基本结构就是顺序结构，除非特别指明，否则就按照顺序一句一句执行。</p>
<p>顺序结构是最简单的算法结构</p>
<p><img src="https://img-blog.csdnimg.cn/20200730102748949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<h2 id="3-选择结构"><a href="#3-选择结构" class="headerlink" title="3.选择结构"></a>3.选择结构</h2><ul>
<li><p><strong>if 单选择结构</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(布尔表达式)&#123;</span><br><span class="line">	//如果布尔表达式为ture将执行的语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200730102825399.png#pic_center" alt="&lt;img src=&quot;C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200729212656292.png&quot; alt=&quot;image-20200729212656292&quot; style=&quot;zoom:50%;&quot; /&gt;"></p>
</li>
</ul>
<ul>
<li><p><strong>if 双选择结构</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(布尔表达式)&#123;</span><br><span class="line">	//如果布尔表达式的值为true执行的语句</span><br><span class="line">&#125;else&#123;</span><br><span class="line">	//如果布尔表达式的值为false执行的语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200730102849132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center" alt="&lt;img src=&quot;C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200729213016106.png&quot; alt=&quot;image-20200729213016106&quot; style=&quot;zoom:50%;&quot; /&gt;"></p>
</li>
</ul>
<ul>
<li><p><strong>if 多选择结构</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(布尔表达式 1)&#123;</span><br><span class="line">	//如果布尔表达式 1的值为true执行的代码</span><br><span class="line">&#125;else if(布尔表达式 2)&#123;</span><br><span class="line">	//如果布尔表达式 2的值为true执行的代码</span><br><span class="line">&#125;else if(布尔表达式 3)&#123;</span><br><span class="line">	//如果布尔表达式 3的值为true执行的代码</span><br><span class="line">&#125;else &#123;</span><br><span class="line">	//如果以上布尔表达式都不为true执行的代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200730102915692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center" alt="&lt;img src=&quot;C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200729213407692.png&quot; alt=&quot;image-20200729213407692&quot; style=&quot;zoom:67%;&quot; /&gt;"></p>
</li>
</ul>
<ul>
<li><p><strong>嵌套的if结构</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(布尔表达式 1)&#123;</span><br><span class="line">	//如果布尔表达式1的值为true执行的代码</span><br><span class="line">	if(布尔表达式2)&#123;</span><br><span class="line">		//如果布尔表达式2的值为true执行的代码</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>switch多选择结构</strong></p>
<p>switch case语句判断一个变量与一些列值中某个值是否相等，每个值称为一个分支。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">switch(expression)&#123;</span><br><span class="line">	case value;</span><br><span class="line">		//语句</span><br><span class="line">		break;   //可选</span><br><span class="line">	case value;</span><br><span class="line">		//语句</span><br><span class="line">		break;   //可选</span><br><span class="line">	//可以任意数量的case语句</span><br><span class="line">	default ; //可选</span><br><span class="line">		//语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>switch 语句中的变量类型可以是：</p>
<pre><code>1. byte  short  int  char
2. 从Java SE7开始switch支持字符串String类型
3. case标签必须为字符串常量或字面量。
</code></pre>
</li>
</ul>
<h2 id="4-循环结构"><a href="#4-循环结构" class="headerlink" title="4.循环结构"></a>4.循环结构</h2><ul>
<li><p><strong>while循环</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while(布尔表达式)&#123;</span><br><span class="line">	//循环内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>只要布尔表达式为true，循环就会一直执行</li>
<li>大多数情况会让循环停止，需要布尔表达式为false</li>
<li>布尔表达式一直为true会造成无限循环（死循环），应避免死循环</li>
</ol>
</li>
<li><p><strong>do…while循环</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">do&#123;</span><br><span class="line">	//代码语句</span><br><span class="line">&#125;while(布尔表达式);</span><br></pre></td></tr></table></figure>

<p>对于while语句而言，不满足条件则不能进入循环，但有时候需要即使不满足条件也至少执行一次。</p>
<p>do…while会至少执行一次。</p>
<p><strong>while和do…while的区别</strong></p>
<pre><code>1. while先判断后执行，do...while是先执行后判断。
2. do...while总是保证循环会被至少执行一次，主要区别。
</code></pre>
</li>
<li><p><strong>for循环</strong></p>
<p>for循环执行的次数是在执行前就确定的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(初始值；布尔表达式；更新值)&#123;</span><br><span class="line">	//代码语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>主要用于数组的增强型for循环</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(声明语句:表达式)&#123;</span><br><span class="line">	//代码句子</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>声明语句：</strong>声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</p>
<p><strong>表达式：</strong>表达式是要访问的数组名，或者是返回值为数组的方法。</p>
</li>
</ul>
<h2 id="5-break-和-continue"><a href="#5-break-和-continue" class="headerlink" title="5.break 和 continue"></a>5.break 和 continue</h2><p>​    <strong>break</strong> 在任何循环语句的主体部分，均可用break控制循环的流程。break用于强化退出循环，不执行循环中剩余的语句。(break语句也在switch语句中使用)</p>
<p>​    <strong>continue</strong>用在循环语句体中，用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判定。</p>
<p><a href="https://www.bilibili.com/video/BV12J41137hu?p=33">本章知识点学习自</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java的StringBuffer和StringBuilder类</title>
    <url>/2021/08/03/Java/Java%E7%9A%84StringBuffer%E5%92%8CStringBuilder%E7%B1%BB/</url>
    <content><![CDATA[<p>对字符串进行修改的时候需要使用 StringBuffer 和 StringBuilder 类。</p>
<p>String 类在操作字符串的时候如果重新赋值会重新产生新的对象。</p>
<p>不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不会产生新的未使用对象的。</p>
<p>StringBuffer 和 StringBuilder 最大的不同在于 StringBuilder 的方法不是线程安全的，也就是不能同步访问的，由于StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类的，但是在应用程序要求线程安全的情况下，就必须使用StringBuffer类。</p>
<h4 id="StringBuffer-常用的主要方法-StringBuilder-类同"><a href="#StringBuffer-常用的主要方法-StringBuilder-类同" class="headerlink" title="StringBuffer 常用的主要方法,StringBuilder 类同"></a>StringBuffer 常用的主要方法,StringBuilder 类同</h4><ol>
<li><p><strong>append(String s)</strong></p>
<p>功能：将指定的字符串追加到此字符序列中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        stringBuffer.append(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        System.out.println(stringBuffer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    student</span><br></pre></td></tr></table></figure></li>
<li><p><strong>reverse()</strong></p>
<p>功能：将此字符序列用其反转形式取代</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        stringBuffer.reverse();</span><br><span class="line">        System.out.println(stringBuffer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">   tneduts </span><br></pre></td></tr></table></figure></li>
<li><p><strong>insert(int offset, int i)</strong></p>
<p>功能：将 int i 参数的字符串表示形式插入此序列中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        stringBuffer.insert(<span class="number">0</span>,<span class="number">6</span>);</span><br><span class="line">        System.out.println(stringBuffer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    6student</span><br></pre></td></tr></table></figure></li>
<li><p><strong>delete(int start, int end)</strong></p>
<p>功能：移除此序列的子字符串中的字符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        stringBuffer.delete(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(stringBuffer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    tudent</span><br></pre></td></tr></table></figure></li>
<li><p><strong>replace(int start, int end, String str)</strong></p>
<p>功能：给定 String 字符替换字符序列中指定位置的字符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        stringBuffer.replace(<span class="number">0</span>,<span class="number">1</span>,<span class="string">&quot;S&quot;</span>);</span><br><span class="line">        System.out.println(stringBuffer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    Student</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面向对象知识点</title>
    <url>/2021/08/02/Java/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h3 id="1-初识面向对象"><a href="#1-初识面向对象" class="headerlink" title="1.初识面向对象"></a>1.初识面向对象</h3><ul>
<li><p>面向过程思想</p>
<p>步骤清晰简单，第一步做什么，第二步做什么…</p>
<p>面对过程适合处理一些较为简单的问题</p>
</li>
<li><p>面向对象思想</p>
<p>物以类聚，分类的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。</p>
<p>面向对象适合处理复杂的问题，适合处理需要多人协作的问题</p>
<ul>
<li>对于描述复杂的事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统，但是，具体到微观操作，仍然需要面向过程的思路去处理。</li>
</ul>
<blockquote>
<p>什么是面向对象</p>
</blockquote>
<ul>
<li>面向对象编程（Object-Oriented Programming,OOP）</li>
<li>面向对象编程的本质是：以类的方式组织代码，以对象的组织(封装)数据</li>
<li>对象是具体的事物，类是抽象的，是对对象的抽象</li>
</ul>
<blockquote>
<p>类与对象的关系</p>
</blockquote>
<ul>
<li><p>类是一种抽象的数据类型，它是对某一类事物整体描述/定义，但是并不能代表某一个具体的事物。</p>
<ol>
<li>动物、植物、手机、电脑…</li>
<li>Person类、Pet类、Car类等，这些类都是用来描述/定义某一类具体的事物应具备的特点和行为</li>
</ol>
</li>
<li><p>对象是抽象概念的具体实例</p>
<ol>
<li>张三就是人的一个具体实例，张三家里的旺财就是狗的一个具体实例。</li>
<li>能够体现出特点，展现出功能的是具体的实例而不是一个抽象的概念</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="2-对象的创建分析"><a href="#2-对象的创建分析" class="headerlink" title="2.对象的创建分析"></a>2.对象的创建分析</h3><ul>
<li><p>使用 new 关键字创建对象</p>
</li>
<li><p>创建一个类包括：属性(字段)和方法</p>
</li>
<li><p>使用 new 关键字创建的时候，除了分配内存空间外，还会给床加你好的对象进行默认的初始化以及类中构造器的调用</p>
</li>
<li><p>类中构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：</p>
<ol>
<li>必须和类的名字相同</li>
<li>必须没有返回类型，也不能写void</li>
</ol>
</li>
<li><p>构造器</p>
<ol>
<li>构造器和类名相同</li>
<li>没有返回值</li>
</ol>
</li>
<li><p>构造器作用</p>
<ol>
<li>new 本质在调用构造方法</li>
<li>初始化对象的值</li>
</ol>
</li>
<li><p>注意点：</p>
<ol>
<li>定义有参构造后，如果想要使用无参构造，显示的定义一个无参的构造</li>
<li>Alt + Insert 构造器创建的快捷键</li>
</ol>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200731131721252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<blockquote>
<p><strong>小结</strong></p>
</blockquote>
<ol>
<li><p>类与对象</p>
<p>类是一个模板：抽象，对象是一个具体的实例</p>
</li>
<li><p>方法：定义、调用</p>
</li>
<li><p>对应的引用</p>
<p>引用类型：基本类型（8）</p>
<p>对象是通过引用来操作的：栈 – &gt; 堆</p>
</li>
<li><p>属性：字段Field成员变量</p>
<p>默认初始化</p>
<p>数字： 0   0.0<br>char：u0000<br>boolean：false<br>引用：null<br>修饰符 属性类型 属性名 = 属性值;</p>
</li>
<li><p>对象的创建和使用</p>
<p>必须使用 new 关键字创造对象，构造器 Person li = new Person();</p>
<p>对象的属性 li.name;</p>
<p>对象的方法 li.sleep();</p>
</li>
<li><p>类(两部分：属性，方法)</p>
<p>静态的属性 属性(字段)</p>
<p>动态的行为 方法</p>
</li>
</ol>
<h3 id="3-面向对象三大特性"><a href="#3-面向对象三大特性" class="headerlink" title="3.面向对象三大特性"></a>3.面向对象三大特性</h3><h4 id="3-1-封装"><a href="#3-1-封装" class="headerlink" title="3.1 封装"></a>3.1 封装</h4><ul>
<li><p>该露的露，该藏的藏</p>
<p>程序设计要追求“高内聚，低耦合”。高内聚：就是类的内部数据操作细节自己完成，不允许外部干涉；低耦合：仅暴露少量的方法给外部使用。</p>
</li>
<li><p>封装(数据的隐藏)：通常，应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏</p>
</li>
<li><p><strong>属于私有，get/set</strong></p>
</li>
<li><p>封装提高程序的安全性，保护数据</p>
</li>
<li><p>隐藏代码的实现细节，统一接口</p>
</li>
<li><p>系统可维护增加</p>
</li>
</ul>
<p><strong>1. Student 类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类 private：私有</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性私有</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;<span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> sex;<span class="comment">//性别</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一些可以操作这个属性的方法</span></span><br><span class="line">    <span class="comment">//提供一些public的get、set方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//get获得这个数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//set 给这个数据设置值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">char</span> sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2. Application 类(含 main 函数)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        student.setName(<span class="string">&quot;lishisen&quot;</span>);</span><br><span class="line">        System.out.println(student.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-继承"><a href="#3-2-继承" class="headerlink" title="3.2 继承"></a>3.2 继承</h4><ul>
<li>继承本质是对某一批类的抽象，从而实现对现实世界更好的建模</li>
<li>extends的意思是扩展，子类是父类的扩展</li>
<li>java中类只有单继承，没有多继承</li>
<li>继承是类和类之间的一种关系。除此之外，类和类之间的关系还有依赖、组合、聚合等。继承关系的两个类，一个为子类(派生类)，一个为父类(基类)。子类和父类之间，从意义上讲应该具有“is a”的关系</li>
</ul>
<p><strong>1. Teacher (子类)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在java中，所有的类，都默认直接或间接继承Object</span></span><br><span class="line"><span class="comment">//老师 is 人 : 派生类，子类</span></span><br><span class="line"><span class="comment">//子类继承了父类，就会拥有父类的全部方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2. Person (父类)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Person 人：父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;说了一句话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3. Application (含 main 方法)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Teacher teacher = <span class="keyword">new</span> Teacher();</span><br><span class="line">        teacher.say();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>super关键字</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">super</span>注意点：</span><br><span class="line"></span><br><span class="line">	<span class="number">1.</span> <span class="keyword">super</span>调用父类的构造方法，必须在构造方法的第一个</span><br><span class="line"></span><br><span class="line"> 		<span class="number">2.</span> <span class="keyword">super</span>必须只能出现在子类的方法或者构造方法中</span><br><span class="line">          		<span class="number">3.</span> <span class="keyword">super</span>和<span class="keyword">this</span>不能同时调用构造方法</span><br></pre></td></tr></table></figure>

<p><strong>与this关键字的区别：</strong></p>
<ul>
<li>代表的对象不同：<pre><code>    this：本身调用者这个对象
      super：代表父类对象的应用
</code></pre>
</li>
<li>前提：<pre><code>this：没有继承也可以使用
super：只能在继承条件才可以使用
</code></pre>
</li>
<li>构造方法：<pre><code>this()：本类的构造
super()：父类的构造
</code></pre>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/2020073113182759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<p><img src="https://img-blog.csdnimg.cn/20200731131848290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<ul>
<li><strong>方法的重写</strong></li>
</ul>
<p>重写(只针对于方法)：需要有继承关系，子类重写父类的方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 方法名必须相同</span><br><span class="line">2. 参数列表必须相同</span><br><span class="line">3. 修饰符：范围可以扩大但不能缩小：   public &gt; Protect &gt; Default &gt; private</span><br><span class="line">4. 抛出的异常：范围，可以被缩小，但不能扩大。</span><br></pre></td></tr></table></figure>

<p>重写，子类的方法和父类必须要一致：方法体不同</p>
<p>为什么要重写：<br>    1.父类的功能，子类不一定需要，或者不一定满足</p>
<p><img src="https://img-blog.csdnimg.cn/20200731131916317.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<h4 id="3-3-多态"><a href="#3-3-多态" class="headerlink" title="3.3 多态"></a>3.3 多态</h4><ul>
<li>可以实现动态编译，可扩展性</li>
<li>同一个方法可以根据发送对象的不同而采用多种不同行为方式</li>
<li>一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多</li>
<li>多态存在的条件<ol>
<li>有继承关系</li>
<li>子类重写父类方法</li>
<li>父类引用指向子类对象</li>
</ol>
</li>
<li>特别注意：多态是方法的多态，属性没有多态性</li>
</ul>
<p><strong>多态注意事项：</strong></p>
<ol>
<li>多态是方法的多态，属性没有多态</li>
<li>父类和子类，有联系，类型转换异常 ClassCastException</li>
<li>存在条件：继承关系，方法需要重写，父类引用指向子类对象<ol>
<li>static 方法，属于类，不属于实例，不能重写</li>
<li>final 常量 不能重写</li>
<li>private方法 不能重写</li>
</ol>
</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200731131943434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<p><strong>引用类型转换：</strong></p>
<ol>
<li>父类引用指向子类的对象</li>
<li>把子类转换为父类，向上转型</li>
<li>把父类转换为子类，向下转型：强制转换</li>
<li>方便方法的调用，减少重复的代码，简洁</li>
</ol>
<p><strong>1. Person (父类)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2. Teacher (子类)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3. Student (子类)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;go&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4. Main (有 main 方法)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//类型之间的转换：父   子</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//高                     低</span></span><br><span class="line">        Person obj = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//student将这个对象转换为Student类型就可以使用Student类型的方法了</span></span><br><span class="line">        obj.run();</span><br><span class="line">        <span class="comment">//student.go();//不能使用</span></span><br><span class="line">        ((Student) obj).go();<span class="comment">//高转低  强制转换，可以使用更低一层的方法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//子类转换为父类，可能丢失自己本来的一些方法</span></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.go();</span><br><span class="line">        Person person = student;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-instanceof-of-关键字"><a href="#4-instanceof-of-关键字" class="headerlink" title="4.instanceof of 关键字"></a>4.instanceof of 关键字</h3><p>功能：判断一个对象是什么类型，判断两个类之间是否存在父子关系</p>
<p><strong>1. Person (父类)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2. Teacher (子类)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3. Student(子类)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4. Main(含有main函数)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object &gt; String</span></span><br><span class="line">        <span class="comment">//Object &gt; Person &gt; Student</span></span><br><span class="line">        <span class="comment">//Object &gt; Person &gt; Teacher</span></span><br><span class="line">        Object object = <span class="keyword">new</span> Student();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//System.out.println(x instanceof y);//能不能编译通过，取决于x y之间是否存在父子关系</span></span><br><span class="line">		</span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Student);<span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Object);<span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Teacher);<span class="comment">//false</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> String);<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line">        Person person = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Student);<span class="comment">//true</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Object);<span class="comment">//true</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Teacher);<span class="comment">//false</span></span><br><span class="line">        <span class="comment">//System.out.println(person instanceof String);//编译报错！！</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Student);<span class="comment">//true</span></span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Object);<span class="comment">//true</span></span><br><span class="line">        <span class="comment">//System.out.println(student instanceof Teacher);//编译报错</span></span><br><span class="line">        <span class="comment">//System.out.println(person instanceof String);//编译报错！！</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-static-关键字"><a href="#5-static-关键字" class="headerlink" title="5.static 关键字"></a>5.static 关键字</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//static</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> age;<span class="comment">//静态变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;<span class="comment">//非静态变量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        System.out.println(s1.age);</span><br><span class="line">        System.out.println(Student.age);<span class="comment">//静态变量可以通过类名.调用</span></span><br><span class="line">        <span class="comment">//System.out.println(Student.score);//非静态变量不能通过类名调用</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Student().run();<span class="comment">//非静态方法调用</span></span><br><span class="line">        Student.go();<span class="comment">//静态方法调用</span></span><br><span class="line">        go();<span class="comment">//静态方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.第二个执行，赋初值~</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//代码块(匿名代码块)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;匿名代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.第一个执行，跟类一块加载，只执行一次</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//静态代码块</span></span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.第三个执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="comment">//静态代码块</span></span><br><span class="line"><span class="comment">//匿名代码块</span></span><br><span class="line"><span class="comment">//构造方法</span></span><br></pre></td></tr></table></figure>

<h3 id="6-抽象类"><a href="#6-抽象类" class="headerlink" title="6.抽象类"></a>6.抽象类</h3><ul>
<li>abstract 修饰符可以用来修饰方法也可以修饰类，如果修饰方法，那么该方法就是抽象方法；如果修饰类，那么该类就是抽象类</li>
<li>抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类。</li>
<li>抽象类，不能使用new关键字来创建对象，只能靠子类实现，它是用来让子类继承的。一种约束</li>
<li>抽象方法，只有方法的声明，没有方法的实现，它是用来让子类实现的。</li>
<li>子类继承抽象类，那么就必须要实现抽象类没有实现的抽象方法，否则该子类也要声明为抽象类。</li>
<li>抽象类中可以写普通的方法，抽象方法必须在抽象类中</li>
</ul>
<p><strong>1. Action类（有main方法）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//abstract 抽象类(一种约束)：类  extedns：单继承  （接口可以多继承)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//约束 有人帮我们实现</span></span><br><span class="line">    <span class="comment">//abstact,抽象方法，只有方法名字，没有方法的实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2. A类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象类的所有方法，继承了它的子类，都必须要实现它的方法，除非子类是抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Action</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-接口"><a href="#7-接口" class="headerlink" title="7.接口"></a>7.接口</h3><ul>
<li>普通类：只有具体实现</li>
<li>抽象类：具体实现和规范(抽象方法)都有</li>
<li>接口：只有规范</li>
<li>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是。。。则必须能。。。”的思想。</li>
<li>接口的本质是契约，就像我们人间的法律一样。制定好后大家都遵守。</li>
<li>接口的精髓，是对对象的抽象，最能体现这一点的就是接口。为什么我们讨论设计 模式都是只针对具备了抽象能力的语言，就是因为设计模式所研究的，实际上就是如何合理的去抽象。</li>
<li>声明类的关键字是class，声明接口的关键字是interface</li>
<li>定义一些方法，让不同的人实现</li>
<li>public static final 常量</li>
<li>接口不能被实例化，接口中没有构造方法</li>
<li>implements可以实现多个接口，用逗号间隔类名</li>
<li>必须要重写接口中的方法</li>
</ul>
<p><strong>1. UserServiceImpl（接口实现类）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类可以实现接口 通过 implements</span></span><br><span class="line"><span class="comment">//实现了接口中的类，就要重写接口中的方法</span></span><br><span class="line"><span class="comment">//利用接口实现多继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span>,<span class="title">TimeService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">querry</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2. UserService类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//接口中的所有定义都是抽象的 public abstract</span></span><br><span class="line">    <span class="comment">//接口都需要有实现类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">99</span>;<span class="comment">//public satic final省略</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">querry</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3. TimerService类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">timer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-内部类"><a href="#8-内部类" class="headerlink" title="8.内部类"></a>8.内部类</h3><ul>
<li>内部类就是在一个类的内部在定义一个类，比如：A类中定义一个B类，那么B类相对应A来说就是称为内部类，而A类相对B类来说就是外部类了。</li>
</ul>
<h4 id="8-1-成员内部类"><a href="#8-1-成员内部类" class="headerlink" title="8.1 成员内部类"></a>8.1 成员内部类</h4><p><strong>Main类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer outer = <span class="keyword">new</span> Outer();<span class="comment">//外部类new</span></span><br><span class="line">        <span class="comment">//通过这个外部类来实例化内部类</span></span><br><span class="line"></span><br><span class="line">        Outer.Inner inner = outer.<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>;</span><br><span class="line">        inner.getId();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Outer类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;<span class="comment">//外部类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是外部类的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;<span class="comment">//内部类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是内部类的方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//内部类获得外部类的私有属性,私有方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>一个java类中可以有多个class类，但是只能有一个public class</strong></li>
</ul>
<h4 id="8-2-静态内部类"><a href="#8-2-静态内部类" class="headerlink" title="8.2 静态内部类"></a>8.2 静态内部类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;<span class="comment">//外部类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是外部类的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;<span class="comment">//静态内部类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是内部类的方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="8-3-局部内部类"><a href="#8-3-局部内部类" class="headerlink" title="8.3 局部内部类"></a>8.3 局部内部类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;<span class="comment">//外部类</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;<span class="comment">//局部内部类</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="8-4-匿名内部类"><a href="#8-4-匿名内部类" class="headerlink" title="8.4 匿名内部类"></a>8.4 匿名内部类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;<span class="comment">//外部类</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//没有名字初始化类,不用将实例保存到变量中</span></span><br><span class="line">        <span class="keyword">new</span> Apple().eat();<span class="comment">//匿名内部类</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;iii&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.bilibili.com/video/BV12J41137hu?p=60">本章知识点学习自</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS基础知识</title>
    <url>/2021/08/03/%E5%89%8D%E7%AB%AF/CSS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h3 id="1-什么是CSS"><a href="#1-什么是CSS" class="headerlink" title="1. 什么是CSS"></a>1. 什么是CSS</h3><p>​    CSS (Cascading Style Sheet 层叠级联样式表)</p>
<p>​    CSS：美化网页、字体、颜色、高度、宽度、背景颜色、浮动、定位</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">html</span> lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-<span class="number">8</span>&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--规范，style可以编写css代码,每一个声明以；结尾</span><br><span class="line">    语法：</span><br><span class="line">        选择器&#123;</span><br><span class="line">            声明<span class="number">1</span>;</span><br><span class="line">            声明<span class="number">2</span>;</span><br><span class="line">            声明<span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">h1</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">h1</span>&gt;我是标题&lt;/<span class="selector-tag">h1</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200807173533497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<ul>
<li><strong>css优势</strong></li>
</ul>
<ol>
<li>内容和表现分离</li>
<li>网页结构表现统一，可以实现复用</li>
<li>样式十分的丰富</li>
<li>建议使用独立于html的css文件</li>
<li>利用SEO，容易被搜索引擎收录</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--内部样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--外部样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--优先级：就近原则--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--行内样式：在标签元素中编写style属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>拓展：外部样式两种写法</p>
<ul>
<li><p>链接式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--外部样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>导入方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="keyword">@import</span> url(<span class="string">&quot;css/style.css&quot;</span>);</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-选择器"><a href="#2-选择器" class="headerlink" title="2. 选择器"></a>2. 选择器</h3><p>作用：选择页面上的某一个或者某一类元素</p>
<h4 id="2-1-基本选择器"><a href="#2-1-基本选择器" class="headerlink" title="2.1 基本选择器"></a><strong>2.1 基本选择器</strong></h4><ol>
<li><strong>标签选择器</strong></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*标签选择器，会选择到页面上所有的这个标签的元素,选择一类标签*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>:<span class="number">90px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>lesson<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>lesson22.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>类选择器class</strong></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--类选择器的格式，.class的名称&#123;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="xml">        好处：可以多个标签归类，相当于同一个class，可以复用</span></span></span><br><span class="line"><span class="comment"><span class="xml">        选择所有class属性一致的标签，跨标签</span></span></span><br><span class="line"><span class="comment"><span class="xml">        .类型&#123;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="xml">        --&gt;</span></span></span><br><span class="line"><span class="xml">        .class1&#123;</span></span><br><span class="line"><span class="xml">            color: #3748ff;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        .class2&#123;</span></span><br><span class="line"><span class="xml">            color: #963b3d;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;class1&quot;</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;class2&quot;</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题3<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>Id选择器</strong></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*id选择器,id保证全局唯一</span></span></span><br><span class="line"><span class="comment"><span class="css">            #id名称&#123;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="css">            优先级：</span></span></span><br><span class="line"><span class="comment"><span class="css">            不遵循就近原则，固定的</span></span></span><br><span class="line"><span class="comment"><span class="css">            id选择器 &gt; 类选择器 &gt; 标签选择器</span></span></span><br><span class="line"><span class="comment"><span class="css">        */</span></span></span><br><span class="line"><span class="css">        <span class="selector-id">#h1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#b32e84</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;h1&quot;</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题3<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题4<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题5<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>优先级：id &gt; class &gt; 标签</strong></p>
<h4 id="2-2-层次选择器"><a href="#2-2-层次选择器" class="headerlink" title="2.2 层次选择器"></a><strong>2.2 层次选择器</strong></h4><ol>
<li>后代选择器：在某个元素的后面</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*后代选择器*/</span></span><br><span class="line"><span class="selector-tag">body</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#42a91b</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>子选择器</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*子选择器*/</span></span><br><span class="line"><span class="selector-tag">body</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#42a91b</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>相邻兄弟选择器</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*相邻兄弟选择器，只有一个，相邻(向下)*/</span></span><br><span class="line"><span class="selector-class">.active</span>+<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#42a91b</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>通用选择器</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*通用兄弟选择器，当前选中元素的向下的所有兄弟元素*/</span></span><br><span class="line"><span class="selector-class">.active</span>~<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#42a91b</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-结构伪类选择器"><a href="#2-3-结构伪类选择器" class="headerlink" title="2.3 结构伪类选择器"></a>2.3 结构伪类选择器</h4><p>伪类：条件</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*ul的第一个子元素*/</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#42a91b</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*ul的最后一个子元素*/</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#b3423e</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/*选中p1:定位到父元素，选择当前的第一个元素</span><br><span class="line">选择当前p元素的父级元素，选中父级元素的第一个子元素，并且是当前元素生效</span><br><span class="line">按照顺序选择</span><br><span class="line">*/</span><br><span class="line">p:nth-child(1)&#123;</span><br><span class="line">    background: #963b3d;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">选中父元素下的p元素的第二个，按照类型选择</span><br><span class="line"> */</span><br><span class="line">p:nth-of-type(2)&#123;</span><br><span class="line">    background: yellow;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200807173620469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center" alt="&lt;img src=&quot;C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200804100624966.png&quot; alt=&quot;image-20200804100624966&quot; style=&quot;zoom:200%;&quot; /&gt;"></p>
<h4 id="2-4-属性选择器"><a href="#2-4-属性选择器" class="headerlink" title="2.4 属性选择器"></a>2.4 属性选择器</h4><p>相当于  id   class的结合</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">=  绝对等于</span><br><span class="line">*= 包含这个元素</span><br><span class="line">^= 以这个开头</span><br><span class="line">$= 以这个结尾</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.demo</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: gainsboro;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font</span>: bold <span class="number">20px</span>/<span class="number">50px</span> Arial;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*  属性名，属性名=属性值（）</span></span></span><br><span class="line"><span class="comment"><span class="css">        =  绝对等于</span></span></span><br><span class="line"><span class="comment"><span class="css">        *= 包含这个元素</span></span></span><br><span class="line"><span class="comment"><span class="css">        ^= 以这个开头</span></span></span><br><span class="line"><span class="comment"><span class="css">        $= 以这个结尾</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">        存在id属性的元素</span></span></span><br><span class="line"><span class="comment"><span class="css">          a[写属性的东西]&#123;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="css">          */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-attr">[id]</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: yellow;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/*id=first的元素*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-attr">[id=first]</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/*class中有links的元素*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-attr">[class*=<span class="string">&quot;links&quot;</span>]</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: palevioletred;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/*选中href中以http开头的元素*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-attr">[href^=http]</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: <span class="number">#4fa982</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/**/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-attr">[href$=doc]</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: aqua;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item first&quot;</span> <span class="attr">id</span>=<span class="string">&quot;first&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item active&quot;</span> <span class="attr">target</span> = <span class="string">&quot;-_blank&quot;</span> <span class="attr">title</span>=<span class="string">&quot;test&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://images/124.html&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;image/123.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;image/123.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;aaa&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;abc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/a.pdf&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;abc.doc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;abcd.doc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item last&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200807173642524.png#pic_center"></p>
<h3 id="3-美化网页"><a href="#3-美化网页" class="headerlink" title="3.美化网页"></a>3.美化网页</h3><h4 id="3-1-为什么要美化网页"><a href="#3-1-为什么要美化网页" class="headerlink" title="3.1 为什么要美化网页"></a>3.1 为什么要美化网页</h4><ol>
<li>有效的传递页面信息</li>
<li>美化网页，页面漂亮，才能吸引用户</li>
<li>凸显页面主题</li>
<li>提高用户的体验</li>
</ol>
<ul>
<li><strong>span标签</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#title1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;title1&quot;</span>&gt;</span>欢迎学习java<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-字体样式"><a href="#3-2-字体样式" class="headerlink" title="3.2 字体样式"></a>3.2 字体样式</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>  :字体</span><br><span class="line">font-size    :字体大小</span><br><span class="line">font-weight  :字体粗细</span><br><span class="line">color        :字体颜色</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: 楷体;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#b3423e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.p1</span>&#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bolder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-文本样式"><a href="#3-3-文本样式" class="headerlink" title="3.3 文本样式"></a>3.3 文本样式</h4><ol>
<li>颜色 color rgb rgba</li>
<li>文本对齐方式 text-align=center</li>
<li>首行缩进 text-indent = 2em</li>
<li>行高 line-height 单行文字上下居中：line-height=height</li>
<li>文本图片水平对齐：vertical-align:middle</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-align</span>: 排版，居中，</span><br><span class="line">text-indent: <span class="number">2em</span>;   首行缩进两个字符</span><br><span class="line"><span class="attribute">text-decoration</span>: underline;  下划线</span><br><span class="line"><span class="attribute">text-decoration</span>: line-through;  中划线</span><br><span class="line"><span class="attribute">text-decoration</span>: overline;  上划线</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">300px</span>;</span><br><span class="line">    行高和块的高度一致，就可以上下居中</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#FF0000</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*下划线*/</span></span><br><span class="line"><span class="selector-class">.p1</span>&#123;</span><br><span class="line">    <span class="comment">/*首行缩进*/</span></span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*中划线*/</span></span><br><span class="line"><span class="selector-class">.p2</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: line-through;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*上划线*/</span></span><br><span class="line"><span class="selector-class">.p3</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: overline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-4-阴影"><a href="#3-4-阴影" class="headerlink" title="3.4 阴影"></a>3.4 阴影</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*text-shadow：阴影颜色，水平偏移，垂直偏移，阴影半径*/</span></span><br><span class="line"><span class="selector-id">#price</span>&#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>:<span class="number">5px</span> -<span class="number">5px</span> <span class="number">5px</span> blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-5-超链接伪类"><a href="#3-5-超链接伪类" class="headerlink" title="3.5 超链接伪类"></a>3.5 超链接伪类</h4><p>正常情况下，a，a：hover</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*鼠标悬浮的状态*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*鼠标按住未释放的状态*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-6-列表"><a href="#3-6-列表" class="headerlink" title="3.6 列表"></a>3.6 列表</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*ul li*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">list-style:</span></span><br><span class="line"><span class="comment">    none  去掉圆点，去掉数字</span></span><br><span class="line"><span class="comment">    circle 空心圆</span></span><br><span class="line"><span class="comment">    decimal 数字</span></span><br><span class="line"><span class="comment">    square 正方形</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#b9d1fc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-7-背景"><a href="#3-7-背景" class="headerlink" title="3.7 背景"></a>3.7 背景</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*颜色，图片，位置，平铺方式*/</span></span><br><span class="line"><span class="attribute">background</span>: red <span class="built_in">url</span>(<span class="string">&quot;//&quot;</span>) <span class="number">270px</span> <span class="number">10px</span> no-repeat;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">700px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;images/book.jpg&quot;</span>);</span></span><br><span class="line"><span class="css">            <span class="comment">/*默认是全部平铺的*/</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.div1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*水平平铺*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">background-repeat</span>: repeat-x;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.div2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*垂直平铺*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">background-repeat</span>:repeat-y;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.div3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*不平铺 默认*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-8-渐变"><a href="#3-8-渐变" class="headerlink" title="3.8 渐变"></a>3.8 渐变</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!--渐变：镜像渐变，圆形渐变--&gt;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">19deg</span>,<span class="number">#21D4FD</span> <span class="number">0%</span>,<span class="number">#B721FF</span> <span class="number">100%</span>);</span><br></pre></td></tr></table></figure>

<h3 id="4-盒子模型"><a href="#4-盒子模型" class="headerlink" title="4.盒子模型"></a>4.盒子模型</h3><h4 id="4-1-什么是盒子？"><a href="#4-1-什么是盒子？" class="headerlink" title="4.1 什么是盒子？"></a>4.1 什么是盒子？</h4><ul>
<li>margin：外边距</li>
<li>padding：内边距</li>
<li>border；边框</li>
</ul>
<h4 id="4-2-边框"><a href="#4-2-边框" class="headerlink" title="4.2 边框"></a>4.2 边框</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*body总有一个默认的外边距 margin：0*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/*border; 粗细，样式，颜色*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">h2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#21D4FD</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">form</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>:green;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">1</span>) <span class="selector-tag">input</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>:<span class="number">3px</span> solid black;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) <span class="selector-tag">input</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>:<span class="number">3px</span> dashed black;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>) <span class="selector-tag">input</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>:<span class="number">2px</span> dashed red;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>会员登陆<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>邮箱：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200807173721672.png#pic_center"></p>
<h4 id="4-3-内外边距"><a href="#4-3-内外边距" class="headerlink" title="4.3 内外边距"></a>4.3 内外边距</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*外边距 水平居中*/</span></span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line"><span class="comment">/*内边距*/</span></span><br><span class="line"><span class="attribute">padding</span>:<span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>盒子模型的计算：margin+border+padding+内容宽度</p>
<h4 id="4-4-圆角边框"><a href="#4-4-圆角边框" class="headerlink" title="4.4 圆角边框"></a>4.4 圆角边框</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">	左上 右上 右下 左下，顺时针方向</span><br><span class="line"></span><br><span class="line">	圆圈： 圆角 = 半径</span><br><span class="line">--&gt;</span><br><span class="line">border-radius: 100px;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200807173737777.png#pic_center"></p>
<h4 id="4-5-阴影"><a href="#4-5-阴影" class="headerlink" title="4.5 阴影"></a>4.5 阴影</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>:<span class="number">10px</span> <span class="number">10px</span> <span class="number">100px</span> yellow;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200807173754373.png#pic_center"></p>
<h3 id="5-浮动"><a href="#5-浮动" class="headerlink" title="5.浮动"></a>5.浮动</h3><h4 id="5-1-block"><a href="#5-1-block" class="headerlink" title="5.1 block"></a>5.1 block</h4><p>块级元素：独占一行</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">h1~h6  p标签  div  列表...</span><br></pre></td></tr></table></figure>

<p>行内元素：不独占一行</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">span   a  img strong ...</span><br></pre></td></tr></table></figure>

<p>行内元素可以包含在块级元素中，反之不行</p>
<h4 id="5-2-display"><a href="#5-2-display" class="headerlink" title="5.2 display"></a>5.2 display</h4><p>是一种实现行内元素排列方式，但是很多时候使用float</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="css">        block块元素</span></span></span><br><span class="line"><span class="comment"><span class="css">        inline 行内元素</span></span></span><br><span class="line"><span class="comment"><span class="css">        inline-block 是块元素，但是可以在一行，内联</span></span></span><br><span class="line"><span class="comment"><span class="css">        none 消失</span></span></span><br><span class="line"><span class="comment"><span class="css">        */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div块元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span行内元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-3-float"><a href="#5-3-float" class="headerlink" title="5.3 float"></a>5.3 float</h4><ol>
<li>左右浮动 float：left   right</li>
</ol>
<h4 id="5-4-父级边框塌陷问题"><a href="#5-4-父级边框塌陷问题" class="headerlink" title="5.4 父级边框塌陷问题"></a>5.4 父级边框塌陷问题</h4><p><strong>clear</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">clear: right;  右侧不允许有浮动元素</span></span><br><span class="line"><span class="comment">clear: left;  左侧不允许有浮动元素</span></span><br><span class="line"><span class="comment">clear: both;  两侧不允许有浮动元素</span></span><br><span class="line"><span class="comment">clear: none; </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>解决方案：</p>
<ol>
<li>增加父级元素的高度</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#father</span>&#123;</span><br><span class="line">	<span class="attribute">border</span>:<span class="number">1px</span> <span class="number">#000</span> solid;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">800px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>增加一个空的div标签，清除浮动</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class = &quot;<span class="attribute">clear</span>&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clear</span>&#123;</span><br><span class="line">	<span class="attribute">clear</span>:both;</span><br><span class="line">	<span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>overflow</p>
<p>在父级元素中增加一个overflow：hidden</p>
</li>
<li><p>父类添加一个伪类：after</p>
<p>避免添加一个div标签</p>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#father</span>:after&#123;</span><br><span class="line">	content: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">	<span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结：</strong></p>
<ol>
<li><p>浮动元素后面增加一个空div标签</p>
<p>简单，代码中尽量避免空div</p>
</li>
<li><p>设置父元素的高度</p>
<p>简单，元素假设有了固定的高度，就会被限制</p>
</li>
<li><p>overflow</p>
<p>简单，下拉的一些场景尽量避免使用</p>
</li>
<li><p>在父类添加伪类，after  推荐使用</p>
<p>写法稍微复杂一些，但是没有副作用，推荐使用</p>
</li>
</ol>
<h3 id="6-定位"><a href="#6-定位" class="headerlink" title="6.定位"></a>6.定位</h3><h4 id="6-1-相对定位"><a href="#6-1-相对定位" class="headerlink" title="6.1 相对定位"></a>6.1 相对定位</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--相对定位--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--相对于自己原来的位置进行偏移--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#father</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#first</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#fcf992</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> dashed green;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;<span class="comment">/*相对定位：上下左右*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: -<span class="number">20px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#second</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#f09afc</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> dashed blue;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#third</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#87fcef</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> dashed orange;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">            <span class="attribute">bottom</span>: -<span class="number">20px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: -<span class="number">20px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;first&quot;</span>&gt;</span>第一个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;second&quot;</span>&gt;</span>第二个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;third&quot;</span>&gt;</span>第三个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>相对定位：position:relative;</p>
<p>相对于原来的位置进行指定的偏移，相对定位后还是在标准文档流中，原来的位置会被保留</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">top</span>: -<span class="number">20px</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">bottom</span>: -<span class="number">20px</span>;</span><br><span class="line"><span class="attribute">right</span>: -<span class="number">20px</span>;</span><br></pre></td></tr></table></figure>

<h4 id="6-2-绝对定位"><a href="#6-2-绝对定位" class="headerlink" title="6.2 绝对定位"></a>6.2 绝对定位</h4><p>position：absolute；</p>
<p>定位：基于某个东西定位，上下左右</p>
<p>没有父级元素定位的前提下，相对于浏览器定位</p>
<p>假设父级元素存在定位，我们通常会相对于父级元素进行偏移</p>
<p>在父级范围内移动</p>
<p>相对于父级或者浏览器的位置，进行指定的偏移，它不再标准文档流动中，原来的位置不会保留</p>
<h4 id="6-3-固定定位"><a href="#6-3-固定定位" class="headerlink" title="6.3 固定定位"></a>6.3 固定定位</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">1</span>)&#123;<span class="comment">/*绝对定位：相对于浏览器*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>)&#123;<span class="comment">/*fixed,固定定位*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: yellow;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css">            <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-4-z-index"><a href="#6-4-z-index" class="headerlink" title="6.4 z-index"></a>6.4 z-index</h4><p>  z-index：默认是0 ，最高无限制</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;book.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;tipText&quot;</span>&gt;</span>你好你好你好，你好<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;tipBg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>时间2020-01-01<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>地点：太阳上<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#content</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*父级元素相对定位*/</span></span><br><span class="line"><span class="selector-id">#content</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tipText</span>,<span class="selector-class">.tipBg</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tipText</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tipBg</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.5</span>;<span class="comment">/*背景透明度*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.bilibili.com/video/BV1YJ411a7dy?p=1">本章知识点学习自</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML基础语法</title>
    <url>/2021/08/03/%E5%89%8D%E7%AB%AF/HTML%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>HTML：Hyper Text Markup Language(超文本标记语言) 超文本包括：文字，图片，音频，视频，动画等</p>
<h3 id="1-HTML基本结构"><a href="#1-HTML基本结构" class="headerlink" title="1. HTML基本结构"></a>1. HTML基本结构</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>//网页头部</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>//主体部分</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-描述"><a href="#2-描述" class="headerlink" title="2. 描述"></a>2. 描述</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--告诉浏览器使用什么规范 DOCTYPE--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--head标签表示网页头部--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mate描述性标签，用来描述网页信息，一般用来做SEO--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;你好&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;discription&quot;</span> <span class="attr">content</span>=<span class="string">&quot;学习&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--title表示网页标题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-网页基本标签"><a href="#3-网页基本标签" class="headerlink" title="3. 网页基本标签"></a>3. 网页基本标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--title表示网页标题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>基本标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--标题标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标签<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标签<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标签<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标签<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标签<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--水平线标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--段落标签,有行间距--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>两只老虎，两只老虎<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>两只老虎，两只老虎<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>两只老虎，两只老虎<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--换行标签，紧凑没有行间距--&gt;</span></span><br><span class="line">两只老虎，两只老虎<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">两只老虎，两只老虎<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">两只老虎，两只老虎<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--粗体，斜体--&gt;</span></span><br><span class="line">粗体：<span class="tag">&lt;<span class="name">strong</span>&gt;</span>I love you！<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">斜体：<span class="tag">&lt;<span class="name">em</span>&gt;</span>I love you！<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--特殊符号--   &amp;  ; 这个方法可以找--&gt;</span></span><br><span class="line">空       格：</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">空<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>格：</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">大于号：<span class="symbol">&amp;gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">小于号：<span class="symbol">&amp;lt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">版权符号：<span class="symbol">&amp;copy;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-图像标签"><a href="#4-图像标签" class="headerlink" title="4. 图像标签"></a>4. 图像标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>图像标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">src:图片地址(必填)</span></span><br><span class="line"><span class="comment">        相对地址，绝对地址</span></span><br><span class="line"><span class="comment">                ../  上一级目录</span></span><br><span class="line"><span class="comment">alt:图片名字(必填)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../resources/image/1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;li&quot;</span> <span class="attr">title</span>=<span class="string">&quot;悬停文字&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-链接标签"><a href="#5-链接标签" class="headerlink" title="5. 链接标签"></a>5. 链接标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>链接标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用name作为标记--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;top&quot;</span>&gt;</span>顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">href :  必填，表示要跳转的那个页面</span></span><br><span class="line"><span class="comment">target: 表示窗口在哪里打开</span></span><br><span class="line"><span class="comment">        _blank 在标签中打开</span></span><br><span class="line"><span class="comment">        _self 在自己的网页中打开</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>点击我跳转到百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.taobao.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>点击我跳转到淘宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../resources/image/1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;one&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../resources/image/1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;one&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--锚链接</span></span><br><span class="line"><span class="comment">1.需要一个锚标记</span></span><br><span class="line"><span class="comment">2.跳转到标记</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#top&quot;</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">功能性链接：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">邮件链接：mailto</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:419736@qq.com&quot;</span>&gt;</span>点击联系我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-列表"><a href="#6-列表" class="headerlink" title="6. 列表"></a>6. 列表</h3><ul>
<li><p>什么是列表？</p>
<p>列表就是信息资源的一种展示形式。它可以使信息结构化和条理化，并以列表的样式显示出来，以便浏览者能更快捷地获得相应的信息。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--有序列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>运维<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--无序列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>运维<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--自定义序列表</span></span><br><span class="line"><span class="comment">dl: 标签</span></span><br><span class="line"><span class="comment">dt：列表名称</span></span><br><span class="line"><span class="comment">dd：列表内容</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>学科<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Linux<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>C<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>河北<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>河南<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-表格"><a href="#7-表格" class="headerlink" title="7. 表格"></a>7. 表格</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--表格table</span></span><br><span class="line"><span class="comment">行   tr</span></span><br><span class="line"><span class="comment">列   td</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--colspan 跨列--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span>1-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--rowspan 跨行--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>1-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1-4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1-4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="8-视频和音频"><a href="#8-视频和音频" class="headerlink" title="8. 视频和音频"></a>8. 视频和音频</h3><ul>
<li>视频元素(video)和音频元素(audio)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>媒体元素<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--音频和视频</span></span><br><span class="line"><span class="comment">src：资源路径</span></span><br><span class="line"><span class="comment">controls：控制条</span></span><br><span class="line"><span class="comment">autoplay：自动播放</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="9-网页结构分析"><a href="#9-网页结构分析" class="headerlink" title="9. 网页结构分析"></a>9. 网页结构分析</h3><table>
<thead>
<tr>
<th>元素名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>header</td>
<td>标题头部区域内容（用于页面或页面中的一块区域）</td>
</tr>
<tr>
<td>footer</td>
<td>标记脚部区域的内容（用于整个页面或页面的一块区域）</td>
</tr>
<tr>
<td>section</td>
<td>Web页面中的一块独立区域</td>
</tr>
<tr>
<td>article</td>
<td>独立的文章内容</td>
</tr>
<tr>
<td>aside</td>
<td>相关内容或应用（常用于侧边栏）</td>
</tr>
<tr>
<td>nav</td>
<td>导航类辅助内容</td>
</tr>
</tbody></table>
<h3 id="10-iframe内联框架"><a href="#10-iframe内联框架" class="headerlink" title="10. iframe内联框架"></a>10. iframe内联框架</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>内联标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--iframe 内联框架</span></span><br><span class="line"><span class="comment">src：地址</span></span><br><span class="line"><span class="comment">w - h：宽度  高度</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">name</span> = <span class="string">&quot;hello&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1000px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>点击跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="11-表单语法"><a href="#11-表单语法" class="headerlink" title="11. 表单语法"></a>11. 表单语法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登陆注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--表单 form</span></span><br><span class="line"><span class="comment">action：表单提交的位置，可以是网站，可以是一个请求处理地址</span></span><br><span class="line"><span class="comment">method：post，get提交方式</span></span><br><span class="line"><span class="comment">    get方式提交：可以在url中查看提交的信息，不安全，快速</span></span><br><span class="line"><span class="comment">    post方式提交：比较安全，传输大文件</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;表格.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文本输入框：input type = &quot;text&quot;</span></span><br><span class="line"><span class="comment">	value = &quot;hello&quot;   默认初始值</span></span><br><span class="line"><span class="comment">	maxlength = &quot;8&quot;    最多能写几个字符</span></span><br><span class="line"><span class="comment">	size = &quot;30&quot;      文本框的长度</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span> = <span class="string">&quot;hello&quot;</span> <span class="attr">maxlength</span> = <span class="string">&quot;10&quot;</span> <span class="attr">size</span> = <span class="string">&quot;30&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--密码框：input type=&quot;password--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--单选框标签</span></span><br><span class="line"><span class="comment">input type = &quot;radio&quot;</span></span><br><span class="line"><span class="comment">value:单选框的值</span></span><br><span class="line"><span class="comment">name：表示组</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>/&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span>女</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--多选框</span></span><br><span class="line"><span class="comment">input type = &quot;checkbox&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>爱好：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sleep&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">checked</span>&gt;</span>睡觉</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;code&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>敲代码</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;chat&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>聊天</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>游戏</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--按钮</span></span><br><span class="line"><span class="comment">input type = &quot;button&quot;   普通按钮</span></span><br><span class="line"><span class="comment">input type = &quot;image&quot;     图像按钮</span></span><br><span class="line"><span class="comment">input type = &quot;submit&quot;   提交按钮</span></span><br><span class="line"><span class="comment">input type = &quot;reset&quot;    重置按钮</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>按钮：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点击变长&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../resources/image.1.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--下拉框，列表框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>下拉框：</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;国家&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;China&quot;</span> &gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;American&quot;</span> <span class="attr">selected</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;russion&quot;</span>&gt;</span>瑞士<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;yindu&quot;</span>&gt;</span>印度<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文本域--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>反馈：</span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span>文本内容<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文件域--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;files&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--邮件验证--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>邮箱：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--URL--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>url：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--数字--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>数字：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;num&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">step</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--滑块</span></span><br><span class="line"><span class="comment">input type = &quot;range&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>音量：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span> = <span class="string">&quot;voice&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--搜索框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>搜索：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://www.bilibili.com/video/BV1x4411V75C?p=1">本章知识点学习自</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础知识点</title>
    <url>/2021/08/04/%E5%89%8D%E7%AB%AF/JavaScript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h3 id="1-什么是JavaScript"><a href="#1-什么是JavaScript" class="headerlink" title="1. 什么是JavaScript"></a>1. 什么是JavaScript</h3><p>JavaScript是一种世界最流行的脚本语言</p>
<h3 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2. 快速入门"></a>2. 快速入门</h3><h4 id="2-1-引入JavaScript"><a href="#2-1-引入JavaScript" class="headerlink" title="2.1 引入JavaScript"></a>2.1 引入JavaScript</h4><ol>
<li>内部标签使用</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="comment">//.....</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>外部引入</p>
<p>first.js</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;first.js&quot;</span>&gt;</span><br><span class="line">	<span class="comment">//......</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>HTML</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--script标签内，写js代码--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;script&gt;</span></span><br><span class="line"><span class="comment">            alert(&quot;hello,world&quot;);//弹窗</span></span><br><span class="line"><span class="comment">    &lt;/script&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--外部引入--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注意：script标签必须成对出现--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/first.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--不用显示定义type，也是默认javascript--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>JS</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(<span class="string">&quot;hello,world&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="2-2-基本语法"><a href="#2-2-基本语法" class="headerlink" title="2.2 基本语法"></a>2.2 基本语法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--JavaScript严格区分大小写--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 1.定义变量 变量类型 变量名 = 变量值 ；</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// js中没有类型的说明 ，全部是var关键字定义</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> num = <span class="number">2</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> str = <span class="string">&quot;hello,world&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    alert(num);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 2.条件控制,if可以嵌套运算，跟java一模一样</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">if</span> (num&gt;<span class="number">1</span>)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        alert(<span class="string">&quot;true&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num&gt;=<span class="number">1</span>)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        alert(<span class="string">&quot;false&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//console.log(num)  在浏览器的控制台打印变量 == sout</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-数据类型"><a href="#2-3-数据类型" class="headerlink" title="2.3 数据类型"></a>2.3 数据类型</h4><p>number, text, shape, video…</p>
<p><strong>number</strong>：js不区分小数和整数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">123</span>				<span class="comment">//整数</span></span><br><span class="line"><span class="number">123.1</span>			<span class="comment">//浮点数</span></span><br><span class="line"><span class="number">1.123e3</span>			<span class="comment">//科学计数法</span></span><br><span class="line">-<span class="number">99</span>				<span class="comment">//负数</span></span><br><span class="line"><span class="literal">NaN</span>				<span class="comment">//not a number</span></span><br><span class="line"><span class="literal">Infinity</span>		<span class="comment">//表示无限大</span></span><br></pre></td></tr></table></figure>

<p>  <strong>比较运算符</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">= 赋值</span><br><span class="line">== 等于（类型不一样，值一样也会判断为<span class="literal">true</span>），坚持不用</span><br><span class="line">=== 绝对等于(类型一样，值一样，结果<span class="literal">true</span>)，坚持使用</span><br></pre></td></tr></table></figure>

<p><strong>须知：</strong></p>
<ul>
<li><p>NaN===NaN，这个与所有的数值都不相等，包括自己</p>
</li>
<li><p>只能通过isNaN(NaN)来判断这个是否为NaN</p>
<pre><code> ***尽量避免使用浮点数进行运算，存在精度问题**
</code></pre>
</li>
</ul>
<p>   <strong>null和undefined</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">- <span class="literal">null</span> 空</span><br><span class="line">- <span class="literal">undefined</span> 未定义</span><br></pre></td></tr></table></figure>

<p>   <strong>数组</strong></p>
<p>js中数组元素类型可以不同</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//尽量使用，保证代码的可读性</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&quot;hello&quot;</span>,<span class="literal">null</span>,<span class="literal">true</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">23</span>,<span class="number">44</span>,<span class="number">5</span>,<span class="string">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>取数组下标，如果越界了就是undefined；</strong></p>
<p><strong>对象</strong></p>
<p>对象是大括号，数组是中括号</p>
<p>每个属性之间使用逗号隔开，最后一个不需要添加分号</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&quot;li&quot;</span>,</span><br><span class="line">	<span class="attr">age</span>: <span class="number">3</span>,</span><br><span class="line">	<span class="attr">tags</span>: [<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;web&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-4-严格检查格式-strict"><a href="#2-4-严格检查格式-strict" class="headerlink" title="2.4 严格检查格式 strict"></a>2.4 严格检查格式 strict</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">前提：IDEA需要设置支持ES6语法</span></span><br><span class="line"><span class="comment">&#x27;use strict&#x27;;  严格检查模式，预防JavaScript的随意性导致产生的一些问题</span></span><br><span class="line"><span class="comment">必须写在js的第一行</span></span><br><span class="line"><span class="comment">局部变量建议使用let定义</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="javascript">        &#x27;use strict&#x27;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//全局变量</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> i;</span></span><br><span class="line"><span class="javascript">        i = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//let定义局部变量</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> a = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200807223120834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<p>这个设置 strict严格检查格式才会生效</p>
<h3 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3. 数据类型"></a>3. 数据类型</h3><h4 id="3-1-字符串"><a href="#3-1-字符串" class="headerlink" title="3.1 字符串"></a>3.1 字符串</h4><ol>
<li><strong>正常的字符串用 单引号，双引号包裹</strong></li>
<li><strong>需要注意转义字符</strong> </li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">\<span class="string">&#x27;   表示一个字符串</span></span><br><span class="line"><span class="string">\n	换行</span></span><br><span class="line"><span class="string">\t	tab键</span></span><br><span class="line"><span class="string">\u4e2d	unicode字符</span></span><br><span class="line"><span class="string">\x41	ascii字符</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>多行字符编写</strong></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//tab 上面 esc下面的 `</span></span><br><span class="line"><span class="keyword">var</span> msg =</span><br><span class="line">    <span class="string">`hello </span></span><br><span class="line"><span class="string">    world`</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>模板字符串</strong></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">`world`</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> msg = <span class="string">`你好，<span class="subst">$&#123;name&#125;</span>`</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li><strong>字符串长度</strong></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(str.length);</span><br></pre></td></tr></table></figure>

<ol start="6">
<li><p><strong>字符串的可变性，不可变</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20200807223141323.png#pic_center"></p>
</li>
</ol>
<ol start="7">
<li><strong>大小写转换</strong></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(student.toUpperCase())</span><br><span class="line"><span class="comment">//注意，这里是方法，不是属性</span></span><br><span class="line">student.toUpperCase()</span><br><span class="line">student.toLowerCase()</span><br></pre></td></tr></table></figure>

<ol start="8">
<li><strong>获得字符的下标</strong></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">student.indexOf(<span class="string">&#x27;t&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="9">
<li><strong>substring,截取字符串</strong></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[)</span><br><span class="line">student.substring(<span class="number">1</span>) <span class="comment">//从第一个字符串截取到最后一个字符串</span></span><br><span class="line">student.substring(<span class="number">1</span>,<span class="number">3</span>) <span class="comment">//[1,3)</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-数组"><a href="#3-2-数组" class="headerlink" title="3.2 数组"></a>3.2 数组</h4><p>Array可以包含任意的数据类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];   <span class="comment">//通过下标取值和赋值</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<ol>
<li><strong>长度</strong></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.length</span><br></pre></td></tr></table></figure>

<ul>
<li>注：假如给arr.length赋值，数组大小就会发生变化,如果赋值过小，元素就会丢失</li>
</ul>
<ol start="2">
<li><strong>indexOf，通过元素获得下标索引</strong></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.indexOf(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>​    字符串的 ‘1’ 和数字1是不同的</p>
<ol start="3">
<li><strong>slice() 截取Array的一部分，返回一个新的数组，类似于substring</strong></li>
<li><strong>push  pop</strong></li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200807223202191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">push(),pop()尾部</span><br><span class="line"><span class="attr">push</span>: 压入到尾部</span><br><span class="line">pop：弹出尾部的一个元素</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><strong>unshif()  shift()  头部</strong></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">unshift:  压入到头部</span><br><span class="line"><span class="attr">shift</span>:  弹出头部的一个元素</span><br></pre></td></tr></table></figure>

<ol start="6">
<li><strong>排序sort()</strong></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.sort()</span><br></pre></td></tr></table></figure>

<ol start="7">
<li><strong>元素反转</strong></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.reverse()</span><br></pre></td></tr></table></figure>

<ol start="8">
<li><strong>拼接 concat()</strong></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.concat(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">注意：concat()并没有修改数组，只是返回一个新的数组</span><br></pre></td></tr></table></figure>

<ol start="9">
<li><strong>连接符 join</strong></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.join()</span><br><span class="line">打印拼接数组，使用特定的字符串连接</span><br></pre></td></tr></table></figure>

<ol start="10">
<li><strong>多维数组</strong></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>]]</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">4</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-对象（若干个键值对）"><a href="#3-3-对象（若干个键值对）" class="headerlink" title="3.3 对象（若干个键值对）"></a>3.3 对象（若干个键值对）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 对象名 = &#123;</span><br><span class="line">	属性名: 属性值，</span><br><span class="line">	属性名: 属性值，</span><br><span class="line">	属性名: 属性值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Js中对象，{…}表示一个对象，键值对描述属性  xxxx：xxxx，多个属性之间用逗号隔开，最后一个属性不加逗号</p>
<p>js中的所有的键都是字符串，值是任意对象</p>
<ol>
<li>对象赋值</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">person.name = <span class="string">&quot;li&quot;</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用一个不存在的对象属性，不会报错</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">person.haha</span><br><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>动态的删减属性,通过delete删除对象的属性</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> person.name</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">person</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>动态的添加，直接给新的属性添加值即可</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">person.abc = <span class="string">&quot;aaa&quot;</span>;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>判断属性值是否在这个对象中</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> person</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="string">&#x27;toString&#x27;</span> <span class="keyword">in</span> person</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>判断一个属性是否是自身拥有的</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">person.hasOwnProperty(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">person.hasOwnProperty(toString)</span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h4 id="3-4-流程控制"><a href="#3-4-流程控制" class="headerlink" title="3.4 流程控制"></a>3.4 流程控制</h4><ul>
<li>判断</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span> (age&gt;<span class="number">3</span>)&#123;</span><br><span class="line">    alert(<span class="string">&quot;hhhh&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;kkk&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>while循环，避免程序死循环</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(age&lt;<span class="number">100</span>)&#123;</span><br><span class="line">    age = age + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	age = age + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(age);</span><br><span class="line">&#125;<span class="keyword">while</span>(age&lt;<span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>for循环</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>forEach循环</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">54</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">54</span>,<span class="number">5</span>];</span><br><span class="line"><span class="comment">//函数</span></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>for…in</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//for(var index in object)&#123;&#125;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> num <span class="keyword">in</span> arr)&#123;</span><br><span class="line">	<span class="keyword">if</span>(arr.hasOwnProperty(num))&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&quot;存在&quot;</span>)</span><br><span class="line">		<span class="built_in">console</span>.log(arr[num])</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-5-Map-和-Set"><a href="#3-5-Map-和-Set" class="headerlink" title="3.5 Map 和 Set"></a>3.5 Map 和 Set</h4><p>Map:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&#x27;tom&#x27;</span>,<span class="number">100</span>],[<span class="string">&#x27;jack&#x27;</span>,<span class="number">99</span>],[<span class="string">&#x27;hh&#x27;</span>,<span class="number">33</span>]]);</span><br><span class="line"><span class="keyword">var</span> name = map.get(<span class="string">&#x27;tom&#x27;</span>);<span class="comment">//通过key获得value</span></span><br><span class="line">map.set(<span class="string">&#x27;admin&#x27;</span>,<span class="number">123</span>);	<span class="comment">//新增或修改</span></span><br><span class="line">map.delete(<span class="string">&quot;tom&quot;</span>);	<span class="comment">//删除</span></span><br></pre></td></tr></table></figure>

<p>Set: 无序不重复的集合</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">set.add(<span class="number">2</span>);	<span class="comment">//添加</span></span><br><span class="line">set.delete(<span class="number">1</span>);	<span class="comment">//删除</span></span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="number">3</span>));	<span class="comment">//是否包含某个元素</span></span><br></pre></td></tr></table></figure>

<h4 id="3-6-iterator-es6新特性"><a href="#3-6-iterator-es6新特性" class="headerlink" title="3.6 iterator(es6新特性)"></a>3.6 iterator(es6新特性)</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过for of  /for in 下标</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x <span class="keyword">of</span> arr)&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>遍历map</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&#x27;li&#x27;</span>,<span class="number">111</span>],[<span class="string">&#x27;wang&#x27;</span>,<span class="number">112</span>],[<span class="string">&#x27;zhang&#x27;</span>,<span class="number">32</span>]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">of</span> map)&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>遍历set</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">of</span> set)&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-函数及面向对象"><a href="#4-函数及面向对象" class="headerlink" title="4. 函数及面向对象"></a>4. 函数及面向对象</h3><h4 id="4-1-定义函数"><a href="#4-1-定义函数" class="headerlink" title="4.1 定义函数"></a>4.1 定义函数</h4><ul>
<li>定义方式 1</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//绝对值函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一旦执行return代表函数结束，返回结果，如果没有执行return，函数执行完也会返回结果，结果是<strong>undefined</strong></p>
<ul>
<li>定义方式 2</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">	   <span class="keyword">if</span> (x &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> x;</span><br><span class="line">       &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> -x;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>function(x){…} 这是一个匿名函数，但是可以把结果赋值给abs，通过abs就可以调用函数。</p>
<p>方式1和方式2等价！！！</p>
<ul>
<li>调用函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">abs(<span class="number">10</span>)		<span class="comment">//结果为10</span></span><br><span class="line">abs(-<span class="number">10</span>)   <span class="comment">//结果为10</span></span><br></pre></td></tr></table></figure>

<p>js可以传任意个参数，也可以不传参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//手动抛出异常判断</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x!==<span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&#x27;Not a Number&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>arguments</p>
<p>是一个js免费赠送的关键字</p>
<p>代表传递进来的所有参数是一个数组</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;x=&gt;&quot;</span>+x);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (x &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>rest</li>
</ul>
<p>es6引入的新特性，获取除了已经定义的参数外的所有参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params">a,b,...rest</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;a=&quot;</span>+a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;b=&quot;</span>+a);</span><br><span class="line">    <span class="built_in">console</span>.log(rest);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>rest参数只能写在最后面，必须用…标识</p>
<h4 id="4-2-变量的作用域"><a href="#4-2-变量的作用域" class="headerlink" title="4.2 变量的作用域"></a>4.2 变量的作用域</h4><p>假如在函数体中声明，则在函数体外不可以使用</p>
<p>如果两个函数使用了相同的变量名，只要在函数内部不会冲突</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    x = x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">x = x + <span class="number">2</span>;<span class="comment">//Uncaught ReferenceError:x is not defind</span></span><br></pre></td></tr></table></figure>

<p>如果两个函数使用了相同的变量名，只要在函数内部不会冲突</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    x = x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    x = x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内部函数可以访问外部函数的成员变量，反之则不行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> y = x + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> z = y + <span class="number">1</span>;<span class="comment">//Uncaught ReferenceError: y is not defined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假如，内部函数变量和外部函数的变量从自身函数开始，由内向外查找，假设外部存在这个同名的函数变量，则内部函数会屏蔽外部函数变量。</p>
<ul>
<li>提升变量的作用域</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> x = <span class="string">&#x27;x&#x27;</span> + y;</span><br><span class="line">	<span class="built_in">console</span>.log(x);</span><br><span class="line">	<span class="keyword">var</span> y = <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：xundefined</p>
<p>说明：JS执行引擎，自动提升了y的声明，但是不会提升变量y的赋值；所以，在代码之前定义所有的变量</p>
<p><strong>var x,y,z…</strong></p>
<p>规范：所有的变量定义都放在函数头部，不能乱放，便于代码维护</p>
<ul>
<li>全局函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">f();</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure>

<ul>
<li>全局window</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;aaaa&#x27;</span>;</span><br><span class="line">alert(x);</span><br><span class="line">alert(<span class="built_in">window</span>.x);<span class="comment">//默认所有的全局变量会自动绑定在window对象上</span></span><br></pre></td></tr></table></figure>

<p>alert() 这个函数本身也是一个wiindow的函数</p>
<p>js实际上只有一个全局作用域，任何变量（函数也可以视为变量），假设没有在函数作用范围内找到，就会向外查找，如果在全局作用域没有找到，会报错：RefrenceError</p>
<p>规范：由于所有的全局变量都会绑定到window上，如果不同的js文件使用了相同的全局变量，就会冲突</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//唯一全局变量</span></span><br><span class="line"><span class="keyword">var</span> li = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义全局变量</span></span><br><span class="line">li.name = <span class="string">&#x27;aaaa&#x27;</span>;</span><br><span class="line">li.add = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把自己代码全部放入自己定义的唯一空间名字中，降低全局命名的冲突问题。</p>
<ul>
<li>局部作用域</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">console</span>.log(i+<span class="number">1</span>);<span class="comment">//不会出错，i为101，出了这个作用域还可以使用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i+<span class="number">1</span>);<span class="comment">//换成let报错：i is not defined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>常量</li>
</ul>
<p>之前版本，es6之前只要用全部大写字母定义的变量就是常量</p>
<p>es6引入了常量关键字  const</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="string">&#x27;3.14&#x27;</span>;<span class="comment">//只读变量</span></span><br><span class="line"><span class="built_in">console</span>.log(PI);</span><br><span class="line">PI = <span class="string">&#x27;123&#x27;</span>;  <span class="comment">//出错，typeError</span></span><br></pre></td></tr></table></figure>

<h3 id="4-3-方法"><a href="#4-3-方法" class="headerlink" title="4.3 方法"></a>4.3 方法</h3><ul>
<li><p>定义方法</p>
<p>方法就是把函数放在对象的里面，对象里面只有两个东西：属性，方法</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> li = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;li&#x27;</span>,</span><br><span class="line">    <span class="attr">birthday</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="attr">age</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">        <span class="keyword">return</span> now - <span class="built_in">this</span>.birthday;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line">li.name</span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line">li.age()</span><br><span class="line"><span class="comment">//this始终指向调用它的，this是无法指向的，是默认指向调用它的那个对象；</span></span><br></pre></td></tr></table></figure>

<ul>
<li>apply</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getAge.apply(对象,参数);<span class="comment">//this指向对象，参数为参数</span></span><br></pre></td></tr></table></figure>

<h3 id="5-内部对象"><a href="#5-内部对象" class="headerlink" title="5. 内部对象"></a>5. 内部对象</h3><h4 id="5-1-Date"><a href="#5-1-Date" class="headerlink" title="5.1 Date"></a>5.1 Date</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//当前日期</span></span><br><span class="line">now.getFullYear();<span class="comment">//年</span></span><br><span class="line">now.getMonth();<span class="comment">//月</span></span><br><span class="line">now.getDate();<span class="comment">//日</span></span><br><span class="line">now.getDay();<span class="comment">//星期几</span></span><br><span class="line">now.getHours();/时</span><br><span class="line">now.getMinutes();<span class="comment">//分</span></span><br><span class="line">now.getSeconds();<span class="comment">//秒</span></span><br><span class="line">now.getTime();<span class="comment">//时间戳，全国统一，1970 1.1 000 到当前时间的毫秒数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1578106175991</span>))<span class="comment">//时间戳转为时间</span></span><br><span class="line">now.toLocaleString();</span><br></pre></td></tr></table></figure>

<h4 id="5-2-JSON"><a href="#5-2-JSON" class="headerlink" title="5.2 JSON"></a>5.2 JSON</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">- <span class="built_in">JSON</span>(Java Script <span class="built_in">Object</span> Notation)是一种轻量级的数据交换格式</span><br><span class="line">- 简洁和清晰的层次结构使得<span class="built_in">JSON</span>成为理想的数据交换语言</span><br><span class="line">- 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率</span><br></pre></td></tr></table></figure>

<p>在js中一切皆为对象，任何js支持的类型都可以用JSON来表示；</p>
<p>格式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">- 对象都用&#123;&#125;</span><br><span class="line">- 数组都用[]</span><br><span class="line">- 所有键值对都使用：key:value</span><br></pre></td></tr></table></figure>

<p>JSON字符串和JS对象的转换</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jingjing&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对象转换为JSON字符串,&#123;&quot;name&quot;:&quot;jingjing&quot;,&quot;age&quot;:3,&quot;sex&quot;:&quot;男&quot;&#125;</span></span><br><span class="line"><span class="keyword">var</span> jsonuser = <span class="built_in">JSON</span>.stringify(user);</span><br><span class="line"><span class="comment">//JSON字符串转化为对象 参数为 json字符串</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(<span class="string">&#x27;&#123;&quot;name&quot;:&quot;jingjing&quot;,&quot;age&quot;:3,&quot;sex&quot;:&quot;男&quot;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="string">&#x27;hello&#x27;</span>,<span class="attr">b</span>: <span class="string">&#x27;hello&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;a&quot;: &quot;hello&quot;,&quot;b&quot;:&quot;hello&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-面向对象编程"><a href="#6-面向对象编程" class="headerlink" title="6. 面向对象编程"></a>6. 面向对象编程</h3><ul>
<li>class继承，es6引入</li>
</ul>
<ol>
<li>定义一个类，属性，方法</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个学生的类</span></span><br><span class="line">Class Student&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span>&#123;<span class="comment">//构造器</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> li = <span class="keyword">new</span> Student(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">li.hello()</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>继承</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Class xiao <span class="keyword">extends</span> Student&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name,grade</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name)</span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">myGrade</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;I am a student&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">本质：查看对象原型</span><br></pre></td></tr></table></figure>

<h3 id="7-操作BOM对象"><a href="#7-操作BOM对象" class="headerlink" title="7. 操作BOM对象"></a>7. 操作BOM对象</h3><p>BOM : 浏览器对象模型</p>
<p>js的诞生就是为了能够在浏览器中运行</p>
<ul>
<li>在浏览器检查模式下执行：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.alert(<span class="number">1</span>)  <span class="comment">//弹窗</span></span><br><span class="line"><span class="built_in">window</span>.innerHeight  <span class="comment">//获得浏览器的内部高度</span></span><br><span class="line"><span class="built_in">window</span>.innerWidth  <span class="comment">//获得浏览器的内部宽度</span></span><br><span class="line"><span class="built_in">window</span>.outerHeight  <span class="comment">//获得浏览器的外部高度</span></span><br><span class="line"><span class="built_in">window</span>.outerWidth  <span class="comment">//获得浏览器的外部宽度</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>Navigator   封装了浏览器的信息，大多数不会使用，因为会被人修改</p>
</li>
<li><p>screen</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">screen.width  <span class="comment">//获得屏幕的宽度</span></span><br><span class="line">screen.height  <span class="comment">//获得屏幕的高度</span></span><br></pre></td></tr></table></figure>

<ul>
<li>location</li>
</ul>
<p>location代表当前页面的URL信息</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">host: <span class="string">&quot;www.baidu.com&quot;</span></span><br><span class="line"><span class="attr">href</span>: <span class="string">&quot;https://www.baidu.com/?tn=92363592_hao_pg&quot;</span></span><br><span class="line"><span class="attr">protocol</span>: <span class="string">&quot;https:&quot;</span></span><br><span class="line"><span class="attr">reload</span>: ƒ reload()   <span class="comment">//刷新网页，重新加载</span></span><br><span class="line"><span class="comment">//设置新的地址</span></span><br><span class="line">location.assign(<span class="string">&#x27;另一个地址&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>document</li>
</ul>
<p>document代表当前的页面，HTML DOM 文档树</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.title</span><br><span class="line"><span class="string">&quot;百度一下，你就知道&quot;</span></span><br><span class="line"><span class="built_in">document</span>.title = <span class="string">&#x27;李&#x27;</span></span><br><span class="line"><span class="string">&quot;李&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//获取具体的文档树节点</span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span> <span class="attr">id</span>=<span class="string">&quot;ex&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>JavaSE<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>JavaEE<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> dl = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;ex&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>获取cookie</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie</span><br><span class="line">恶意人员；获取cookie上传到他的服务器</span><br><span class="line">服务器端设置cookie：httpOnly 保证安全</span><br></pre></td></tr></table></figure>

<ul>
<li><p>history</p>
<p>代表浏览器的历史纪录</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">history.back()  <span class="comment">//退回上一页</span></span><br><span class="line">history.forward()   <span class="comment">//前进</span></span><br></pre></td></tr></table></figure>

<h3 id="8-操作DOM对象-重点"><a href="#8-操作DOM对象-重点" class="headerlink" title="8. 操作DOM对象 重点"></a>8. 操作DOM对象 重点</h3><p>浏览器网页就是一个DOMshu’xing树形结构</p>
<ul>
<li>更新：更新Dom节点</li>
<li>遍历：得到Dom节点</li>
<li>删除：删除一个Dom节点</li>
<li>添加：添加一个新的节点</li>
</ul>
<blockquote>
<p>获得dom节点</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="comment">//对应css选择器</span></span><br><span class="line">   <span class="keyword">var</span> h1 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line">   <span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;p1&#x27;</span>);</span><br><span class="line">   <span class="keyword">var</span> p2 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;p2&#x27;</span>);</span><br><span class="line">   <span class="keyword">var</span> father = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;father&#x27;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> childrens = father.children;<span class="comment">//获取父节点下的所有子节点</span></span><br><span class="line">   <span class="comment">//father.firstChildren;</span></span><br><span class="line">   <span class="comment">//father.lostChildren;</span></span><br><span class="line">   </span><br><span class="line">以上为原生代码，少用</span><br></pre></td></tr></table></figure>

<blockquote>
<p>更新节点</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//操作文本</span></span><br><span class="line">id1.innerText = <span class="string">&#x27;123&#x27;</span>  修改文本的值</span><br><span class="line">id1.innerHTML = <span class="string">&#x27;&lt;strong&gt;123&lt;/strong&gt;&#x27;</span>  可以解析HTML文本标签</span><br><span class="line"><span class="comment">//操作CSS</span></span><br><span class="line">id1.style.color = <span class="string">&#x27;red&#x27;</span>;	<span class="comment">//属性使用 字符串包裹</span></span><br><span class="line">id1.style.fontSize = <span class="string">&#x27;20px&#x27;</span>;</span><br><span class="line">id1.style.padding = <span class="string">&#x27;2em&#x27;</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除节点</p>
</blockquote>
<p>步骤：先获取父节点，在通过父节点删除自己</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;father&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题一<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> self = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;p1&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> father = p1.parentElement;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    father.removeChild(self)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意：删除是一个动态的过程，删除多个节点的时候children是在时刻变化的，伸出节点应当注意</li>
</ul>
<blockquote>
<p>插入节点</p>
</blockquote>
<p>获得了某个dom节点，假设这个dom节点是空的，通过 innerHTML就可以增加一个元素了，但是这个dom如果已经存在元素，就不能这么做，会覆盖原元素。</p>
<p><strong>追加：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  &lt;p id=<span class="string">&quot;js&quot;</span>&gt;JavaScript&lt;/p&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;se&quot;</span>&gt;</span>JavaSE<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;ee&quot;</span>&gt;</span>JavaEE<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;me&quot;</span>&gt;</span>JavaME<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">var</span> js = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;js&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">list.appendChild(js);	<span class="comment">//追加到后面</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>创建一个新的标签，实现插入：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过JS创建一个新的节点，可以设置任意值</span></span><br><span class="line"><span class="keyword">var</span> newP = <span class="built_in">document</span>.createElement(<span class="string">&#x27;p&#x27;</span>);<span class="comment">//创建一个p标签</span></span><br><span class="line">newP.id = <span class="string">&#x27;newP&#x27;</span>;</span><br><span class="line">newP.innerText = <span class="string">&#x27;hello,world&#x27;</span>;</span><br><span class="line">list.appendChild(newP);<span class="comment">//追加</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以创建一个style标签</span></span><br><span class="line">        <span class="keyword">var</span> myStyle = <span class="built_in">document</span>.createElement(<span class="string">&#x27;style&#x27;</span>);<span class="comment">//创建了一个空style标签</span></span><br><span class="line">        myStyle.setAttribute(<span class="string">&#x27;type&#x27;</span>,<span class="string">&#x27;text/css&#x27;</span>);</span><br><span class="line">        myStyle.innerHTML = <span class="string">&#x27;body&#123;background-color: red;&#125;&#x27;</span>;<span class="comment">//设置标签内容</span></span><br><span class="line">        <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>].appendChild(myStyle);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>insert</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ee = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;ee&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> js = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;js&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>);</span><br><span class="line"><span class="comment">//要包含的节点  insertBefore(newNode,targetNode)</span></span><br><span class="line">list.insertBefore(js,ee)</span><br></pre></td></tr></table></figure>

<h3 id="9-操作表单-验证"><a href="#9-操作表单-验证" class="headerlink" title="9. 操作表单(验证)"></a>9. 操作表单(验证)</h3><p>表单就是一个 DOM树里的节点</p>
<ul>
<li>文本框    text</li>
<li>下拉框   select</li>
<li>单选框   radio</li>
<li>多选框   checkbox</li>
<li>隐藏域   hidden</li>
<li>密码框   password</li>
</ul>
<blockquote>
<p><strong>表单目的：提交信息</strong></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>&lt;input type=&quot;text&quot; id=&quot;username&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;!--多选框的值就是定义好的值--&gt;</span><br><span class="line">        &lt;span&gt;性别：&lt;/span&gt;</span><br><span class="line">        &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;man&quot; id=&quot;boy&quot;&gt;男</span><br><span class="line">        &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;women&quot; id=&quot;girl&quot;&gt;女</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var input_text = document.getElementById(&#x27;username&#x27;);</span><br><span class="line"></span><br><span class="line">    var boy_radio = document.getElementById(&#x27;boy&#x27;);</span><br><span class="line">    var girl_radio = document.getElementById(&#x27;girl&#x27;);</span><br><span class="line"></span><br><span class="line">    //得到输入框的值</span><br><span class="line">    input_text.value</span><br><span class="line">    //修改输入框的值</span><br><span class="line">    input_text.value = &#x27;222&#x27;</span><br><span class="line"></span><br><span class="line">    //对于单选框，多选框等等固定值，用element.value只能取到当前的值</span><br><span class="line">    boy_radio.checked;//查看返回的结果是否为true，true就是被选中</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提交表单，md5加密</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="comment">//md5算法专用，必须有</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--表单绑定提交事件，onsubmit=绑定一个提交检测的函数 <span class="literal">true</span>，<span class="literal">false</span></span><br><span class="line">将这个结果返回给表单，使用onsubmit接受--&gt;</span><br><span class="line">&lt;form method=&quot;post&quot; action=&quot;#&quot; onsubmit=&quot;return f()&quot;&gt;</span><br><span class="line">    &lt;span&gt;用户名：&lt;/span&gt;&lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot;&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;span&gt;密码：&lt;/span&gt;&lt;input type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot;&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;input type=&quot;hidden&quot; id=&quot;md5-password&quot; name=&quot;password&quot;&gt;</span><br><span class="line">    &lt;!--绑定事件，onclick被点击--&gt;</span><br><span class="line">    &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function f() &#123;</span><br><span class="line">        var name = document.getElementById(&#x27;username&#x27;);</span><br><span class="line">        var pwd = document.getElementById(&#x27;password&#x27;);</span><br><span class="line">        var md5pwd = document.getElementById(&#x27;md5-password&#x27;);</span><br><span class="line"></span><br><span class="line">        //MD5算法</span><br><span class="line">        md5pwd.value = md5(pwd.value);</span><br><span class="line">        //可以校验判断  true提交，false阻止提交</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="10-jQuery"><a href="#10-jQuery" class="headerlink" title="10. jQuery"></a>10. jQuery</h3><p>jQuery可以是script代码块，也可以在网上下载js包，两种方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://lib.baomitu.com/jquery/3.4.1/core.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>jQuery库：里面存在大量的 JS 函数</p>
<p>公式：$(选择器).action()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">公式：$(选择器).action()</span><br><span class="line">--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;test-jquery&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//选择器就是css中的选择器</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    $(<span class="string">&#x27;#test-jquery&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        alert(<span class="string">&quot;hello,I&#x27;m jquery&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>选择器</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原生js，选择器少，麻烦不好记</span></span><br><span class="line"><span class="comment">//标签</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName();</span><br><span class="line"><span class="comment">//id</span></span><br><span class="line"><span class="built_in">document</span>.getElementById();</span><br><span class="line"><span class="comment">//类</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName();</span><br><span class="line"></span><br><span class="line"><span class="comment">//jQuery   css中的的选择器全部可以用</span></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).click();<span class="comment">//标签选择器</span></span><br><span class="line">$(<span class="string">&#x27;#id1&#x27;</span>).click();<span class="comment">//id选择器</span></span><br><span class="line">$(<span class="string">&#x27;.class1&#x27;</span>).click();<span class="comment">//class选择器</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>事件</p>
</blockquote>
<p>分为：鼠标事件，键盘事件，其他时间</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.class1&#x27;</span>).onmousedown()  <span class="comment">//按下</span></span><br><span class="line">$(<span class="string">&#x27;.class1&#x27;</span>).onmouseenter()  </span><br><span class="line">$(<span class="string">&#x27;.class1&#x27;</span>).onmouseleave</span><br><span class="line">$(<span class="string">&#x27;.class1&#x27;</span>).onmousemove    <span class="comment">//移动</span></span><br><span class="line">$(<span class="string">&#x27;.class1&#x27;</span>).onmouseout</span><br><span class="line">$(<span class="string">&#x27;.class1&#x27;</span>).onmouseover</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小练习：获得鼠标坐标</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://lib.baomitu.com/jquery/3.4.1/core.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="selector-id">#divMouse</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">height</span>: <span class="number">500px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span></span><br><span class="line"><span class="css"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--要求：获取鼠标当前的一个坐标--&gt;</span><br><span class="line">mouse:<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;mouseMove&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;divMouse&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    移动鼠标试试</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//当网页加载完成之后相应该事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        $(<span class="string">&#x27;#divMouse&#x27;</span>).onmousemove(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            $(<span class="string">&#x27;#mouseMove&#x27;</span>).text(<span class="string">&#x27;x:&#x27;</span> + e.pageX + <span class="string">&#x27;y:&#x27;</span> + e.pageY)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>操作DOM</p>
</blockquote>
<p>节点文本操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#test-ul li[name = java]&#x27;</span>).text();	<span class="comment">//获得值</span></span><br><span class="line">$(<span class="string">&#x27;#test-ul li[name = java]&#x27;</span>).text(<span class="string">&#x27;text&#x27;</span>);	<span class="comment">//设置值</span></span><br><span class="line">$(<span class="string">&#x27;#test-ul&#x27;</span>).html();	<span class="comment">//获得值</span></span><br><span class="line">$(<span class="string">&#x27;#test-ul&#x27;</span>).html(<span class="string">&#x27;text&#x27;</span>);	<span class="comment">//设置值</span></span><br></pre></td></tr></table></figure>

<p>css的操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#test-ul li[name = java]&#x27;</span>).css(&#123;<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;red&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure>

<p>元素的显示和隐藏：本质display：none；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#test-ul li[name = java]&#x27;</span>).show();</span><br><span class="line">$(<span class="string">&#x27;#test-ul li[name = java]&#x27;</span>).hide();</span><br></pre></td></tr></table></figure>

<p><a href="https://www.bilibili.com/video/BV1JJ41177di?p=1">本章节知识点学习自</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis</title>
    <url>/2021/08/05/%E6%A1%86%E6%9E%B6/mybatis/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础知识点</title>
    <url>/2021/08/03/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql/MySQL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h3 id="1-操作数据库"><a href="#1-操作数据库" class="headerlink" title="1. 操作数据库"></a>1. 操作数据库</h3><p>操作数据库—操作数据库中的表—操作数据库中表的数据，关键字不区分大小写</p>
<h4 id="1-1-操作数据库"><a href="#1-1-操作数据库" class="headerlink" title="1.1 操作数据库"></a>1.1 操作数据库</h4><ol>
<li>创建数据库</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE [IF NOT EXISTS] 数据库名</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>删除数据库</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP DATABASE [IF EXISTS] 数据库名</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用数据库</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USE 数据库名</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>查看数据库</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW DATABASES   查看所有的数据库</span><br></pre></td></tr></table></figure>

<h4 id="1-2-数据库的列类型"><a href="#1-2-数据库的列类型" class="headerlink" title="1.2 数据库的列类型"></a>1.2 数据库的列类型</h4><blockquote>
<p>数值</p>
</blockquote>
<ul>
<li>tinyint  非常小的数据    1个字节</li>
<li>smallint  较小的数据     2个字节</li>
<li>mediumint   中等大小的数据  3个字节</li>
<li>int           标准                  4个字节   常用</li>
<li>bigint     较大的数据       8个字节</li>
<li>float      浮点数             4个字节</li>
<li>double   浮点数            8个字节</li>
<li>decimal      字符串形式的浮点数    金融计算一般使用</li>
</ul>
<blockquote>
<p>字符串  </p>
</blockquote>
<ul>
<li>char    字符串固定大小   0~255</li>
<li>varchar   可变字符串   0~65535      常用</li>
<li>tinytext    微型文本     2^8-1</li>
<li>text         文本串        2^16-1     保存大文本</li>
</ul>
<blockquote>
<p>时间日期</p>
</blockquote>
<ul>
<li>date      YYYY-MM-DD，日期</li>
<li>time     HH: mm: ss   时间格式</li>
<li>datetime    YYYY-MM-DD  HH: mm: ss     最常用的格式</li>
<li>timestamp   时间戳    1970.1.1   到现在的毫秒数</li>
<li>year    年份表示</li>
</ul>
<blockquote>
<p>null</p>
</blockquote>
<ul>
<li>没有值，未知</li>
<li>注意，不要使用null进行运算</li>
</ul>
<h4 id="1-3-数据库的字段属性"><a href="#1-3-数据库的字段属性" class="headerlink" title="1.3 数据库的字段属性"></a>1.3 数据库的字段属性</h4><blockquote>
<p>Unsigned</p>
</blockquote>
<ul>
<li>无符号的数</li>
<li>声明了该列不能为负数</li>
</ul>
<blockquote>
<p>zerofill</p>
</blockquote>
<ul>
<li>0填充的</li>
<li>不足的位数，用0来填充</li>
</ul>
<blockquote>
<p>自增</p>
</blockquote>
<ul>
<li>通常理解为自增，自动在一条记录的基础上 +1  (默认)</li>
<li>通常用来设计唯一的主键 index，必须是整数类型</li>
<li>可以自定义设计主键自增的初始值和步长</li>
</ul>
<blockquote>
<p>非空</p>
</blockquote>
<ul>
<li>not null</li>
<li>设置为not null，如果不给他赋值就会报错</li>
<li>NULL，默认为NULL</li>
</ul>
<blockquote>
<p>默认值</p>
</blockquote>
<ul>
<li>设置默认的值</li>
</ul>
<blockquote>
<p>拓展，之后做项目才会用到</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*每个表，都必须存在以下五个字段，未来做项目用，表示一个记录存在意义</span><br><span class="line"></span><br><span class="line">id  主键</span><br><span class="line">`version`  乐观锁</span><br><span class="line">is_delete  伪删除</span><br><span class="line">gmt_create  创建时间</span><br><span class="line">gmt_update  修改时间</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<h4 id="1-4-创建数据库表"><a href="#1-4-创建数据库表" class="headerlink" title="1.4 创建数据库表"></a>1.4 创建数据库表</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--注意点，使用英文(), 表的名称和字段尽量用 ``括起来</span><br><span class="line">--AUTO_INCREMENT 自增</span><br><span class="line">--字符串使用单引号括起来</span><br><span class="line">--所有的语句后面都是英文的,最后一个不用加</span><br><span class="line">--PRIMARY KEY 主键，一般一个表只有一个唯一的主键</span><br><span class="line">CREATE TABLE IF NOT EXISTS `student`(</span><br><span class="line">	`id` INT(4) NOT NULL AUTO_INCREMENT COMMENT &#x27;学号&#x27;,</span><br><span class="line">	`name` VARCHAR(30) NOT NULL DEFAULT &#x27;匿名&#x27; COMMENT &#x27;姓名&#x27;,</span><br><span class="line">	`pwd` VARCHAR(20) NOT NULL DEFAULT &#x27;123456&#x27; COMMENT &#x27;密码&#x27;,</span><br><span class="line">	`sex` VARCHAR(2) NOT NULL DEFAULT &#x27;男&#x27; COMMENT &#x27;性别&#x27;,</span><br><span class="line">	`birthday` DATETIME DEFAULT NULL COMMENT &#x27;出生日期&#x27;,</span><br><span class="line">	`address` VARCHAR(100) DEFAULT NULL COMMENT &#x27;家庭住址&#x27;,</span><br><span class="line">	`email` VARCHAR(50) DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">	PRIMARY KEY (`id`)</span><br><span class="line">)ENGINE =INNODB DEFAULT CHARSET = utf8</span><br></pre></td></tr></table></figure>

<p>格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] `表明`(</span><br><span class="line">	`字段名` 类型[类型][索引][注释],</span><br><span class="line">    `字段名` 类型[类型][索引][注释],</span><br><span class="line">    ......</span><br><span class="line">    `字段名` 类型[类型][索引][注释]</span><br><span class="line">)[表的类型][字符集设置][注释]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>常用命令</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE school <span class="comment">--查看创建数据库的语句</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student <span class="comment">--查看创建数据库表的语句</span></span><br><span class="line"><span class="keyword">DESC</span> student<span class="comment">--显示表的结构</span></span><br></pre></td></tr></table></figure>

<h4 id="2-5-数据表的类型"><a href="#2-5-数据表的类型" class="headerlink" title="2.5 数据表的类型"></a>2.5 数据表的类型</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">INNODB  默认使用</span><br><span class="line">MYISAM  早期使用</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th></th>
<th>MYISAM</th>
<th>INNODB</th>
</tr>
</thead>
<tbody><tr>
<td>事务支持</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>数据行锁定</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>外键约束</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>全文索引</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>表空间的大小</td>
<td>较小</td>
<td>较大，约为前者两倍</td>
</tr>
</tbody></table>
<p>常用操作：</p>
<ul>
<li>MYISAM  节约空间，速度很快</li>
<li>INNODB  安全性高，实务的处理，多表多用户操作</li>
<li>在物理空间的存在位置<ul>
<li>所有数据库文件都存在data目录下，本质还是文件的存储,一个文件夹对应一个数据库</li>
</ul>
</li>
</ul>
<p>MySQL引擎在物理文件上的区别</p>
<ul>
<li><p>InnoDB  在数据库表中只有一个 *.frm文件，以及上级目录下的ibdata1文件</p>
</li>
<li><p>MYISAM对应文件</p>
<ul>
<li>*.frm  表结构的定义文件</li>
<li>*.MYD 数据文件(data)</li>
<li>*.myi  索引文件(index)</li>
</ul>
</li>
<li><p>设置数据库表的字符集编码</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CHARSET = UTF8</span><br></pre></td></tr></table></figure>

<p>​    不设置的话，会是mysql默认的字符集编码（不支持中文）</p>
<p>​    MySQL的默认编码Latin1，不支持中文</p>
<p>​    在my.ini中配置默认的编码</p>
<h4 id="1-6-修改删除表"><a href="#1-6-修改删除表" class="headerlink" title="1.6 修改删除表"></a>1.6 修改删除表</h4><blockquote>
<p>修改</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--修改表名， ALTER TABLE 旧表名 RENAME AS 新表名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> school1 RENAME <span class="keyword">AS</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment">--增加表的字段	ALTER TABLE 表明 ADD 字段名 类型(长度)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> age <span class="type">INT</span>(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--修改表的字段(重命名，修改约束)</span></span><br><span class="line"><span class="comment">--ALTER TABLE 表明 MODIFY 字段名 列属性[]</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student MODIFY age <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="comment">--修改约束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--ALTER TABLE 表明 CHANGE 旧名字 新名字 列属性[]</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student CHANGE age age1 <span class="type">INT</span>(<span class="number">11</span>)  <span class="comment">--字段重命名</span></span><br><span class="line"><span class="comment">--CHANGE用来字段重命名，不能修改字段类型和约束；MODIFY不用来字段重命名，只能修改字段类型和约束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--删除表的字段  ALTER TABLE 表明 DROP 字段名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">DROP</span> age1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [IF <span class="keyword">EXISTS</span>] student    <span class="comment">--如果表不存在就删除</span></span><br></pre></td></tr></table></figure>

<ul>
<li>所有的创建和删除操作尽量加上判断，以免报错</li>
</ul>
<h3 id="2-MySQL数据管理"><a href="#2-MySQL数据管理" class="headerlink" title="2. MySQL数据管理"></a>2. MySQL数据管理</h3><h4 id="2-1-外键"><a href="#2-1-外键" class="headerlink" title="2.1 外键"></a>2.1 外键</h4><blockquote>
<p>方式一，在创建表的时候，增加约束(比较麻烦)</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `grade`(</span><br><span class="line">	`gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;年级id&#x27;</span>,</span><br><span class="line">	`gradename` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级名称&#x27;</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY(`gradeid`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">--学生表gradeid字段要去引用年级表中的gradeid</span></span><br><span class="line"><span class="comment">--定义外键KEY</span></span><br><span class="line"><span class="comment">--给这个外键添加约束 REFERENCES引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student`(</span><br><span class="line">	`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">	`name`<span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">	`pwd` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;123456&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">	`sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;女&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">	`birthday` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">	`gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学生的年纪&#x27;</span>,</span><br><span class="line">	`address`<span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭住址&#x27;</span>,</span><br><span class="line">	`email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">	KEY `FK_gradeid` (gradeid),</span><br><span class="line">	<span class="keyword">CONSTRAINT</span> `FK_gradeid` <span class="keyword">FOREIGN</span> KEY(`gradeid`) <span class="keyword">REFERENCES</span> `grade`(`gradeid`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：删除外键关系的表的时候，必须要先删除引用别人的表(从表)，在删除被引用的表（主表）</li>
</ul>
<blockquote>
<p>方式二，两个表创建成功后，添加外键约束</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `grade`(</span><br><span class="line">	`gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;年级id&#x27;</span>,</span><br><span class="line">	`gradename` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级名称&#x27;</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY(`gradeid`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">--学生表gradeid字段要去引用年级表中的gradeid</span></span><br><span class="line"><span class="comment">--定义外键KEY</span></span><br><span class="line"><span class="comment">--给这个外键添加约束 REFERENCES引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student`(</span><br><span class="line">	`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">	`name`<span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">	`pwd` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;123456&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">	`sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;女&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">	`birthday` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">	`gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学生的年纪&#x27;</span>,</span><br><span class="line">	`address`<span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭住址&#x27;</span>,</span><br><span class="line">	`email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8</span><br><span class="line"><span class="comment">--创建表的时候没有外键关系</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student`</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> `FK_gradeid` <span class="keyword">FOREIGN</span> KEY(`gradeid`) <span class="keyword">REFERENCES</span> `grade`(`gradeid`);</span><br><span class="line"></span><br><span class="line"><span class="comment">--ALTER TABLE 表 ADD CONSTRAINT 约束名 FOREIGN KEY(外键的列) REFERENCES 另一个表(字段);</span></span><br></pre></td></tr></table></figure>

<ul>
<li>以上的操作都是物理外键，数据库级别的外键，不建议使用，避免数据库过多造成困扰，了解即可</li>
</ul>
<h4 id="2-2-DML语言-数据库操作语言"><a href="#2-2-DML语言-数据库操作语言" class="headerlink" title="2.2 DML语言(数据库操作语言)"></a>2.2 DML语言(数据库操作语言)</h4><ul>
<li><strong>添加  insert</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--插入语句(添加),如果不写字段，就会一一匹配</span></span><br><span class="line"><span class="comment">--INSERT INTO 表明[(字段名1，字段名2，字段名3,...)]VALUE(&#x27;值1&#x27;,&#x27;值2&#x27;,&#x27;值3&#x27;,...)</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `grade` (`gradename`) <span class="keyword">VALUES</span>(<span class="string">&#x27;大三&#x27;</span>) <span class="comment">--插入一行数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `grade` (`gradename`) <span class="keyword">VALUES</span> (<span class="string">&#x27;大二&#x27;</span>),(<span class="string">&#x27;大一&#x27;</span>) <span class="comment">--插入两行数据</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>修改   update</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--修改名字,带where是指定一条修改</span></span><br><span class="line">UPDATE 	`student` <span class="keyword">SET</span> `name` <span class="operator">=</span> <span class="string">&#x27;王五&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1001</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--不指定条件的情况下，会改动所有记录</span></span><br><span class="line">UPDATE 	`student` <span class="keyword">SET</span> `name` <span class="operator">=</span> <span class="string">&#x27;王五&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--语法：</span></span><br><span class="line"><span class="comment">--UPDATE 表名 SET COLNUM_NAME = VALUE [,COLNUM_NAME = VALUE...] [WHERE 条件] </span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>删除  delete</strong></li>
</ul>
<blockquote>
<p>语法： delete from 表明 [where 条件]</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--删除数据，（会全部删除）</span><br><span class="line">DELETE FROM `student`</span><br><span class="line"></span><br><span class="line">--删除指定数据</span><br><span class="line">--DELETE FROM `student` WHERE id = 1;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>TRUNCATE命令</p>
</blockquote>
<ul>
<li>完全清空一个数据库表，表的索引  结构不会变</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> [<span class="keyword">TABLE</span>] 表名</span><br></pre></td></tr></table></figure>

<blockquote>
<p>delete 和 TRUNATE 区别</p>
</blockquote>
<ul>
<li>相同点：都能删除数据，都不会删除表结构</li>
<li>不同点：<ul>
<li>TRUNCATE 重新设置自增列 计数器会归零</li>
<li>TRUNCATE 不会影响事务</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student <span class="comment">--不会影响自增</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> student <span class="comment">--自增归零</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>了解：delete删除的问题，重启数据库现象</p>
<ul>
<li>InnoDB   自增列会从1开始（存在内存当中，断电即失败）</li>
<li>MyISAM  继续从上一个自增量开始(存在文件中，不会丢失)</li>
</ul>
</blockquote>
<h3 id="3-DQL-查询数据"><a href="#3-DQL-查询数据" class="headerlink" title="3. DQL 查询数据"></a>3. DQL 查询数据</h3><h4 id="3-1-DQL-（数据查询语言）"><a href="#3-1-DQL-（数据查询语言）" class="headerlink" title="3.1 DQL （数据查询语言）"></a>3.1 DQL （数据查询语言）</h4><ul>
<li>所有的查询操作都用它，select</li>
<li>简单的查询，复杂的查询都用他做</li>
<li>数据库中最核心的语言，最重要的语句</li>
<li>使用频率最高的语句</li>
</ul>
<h4 id="3-2-指定查询字段"><a href="#3-2-指定查询字段" class="headerlink" title="3.2 指定查询字段"></a>3.2 指定查询字段</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--查询表中所有的字段	SELECT 字段 FROM 表明</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询指定字段</span></span><br><span class="line"><span class="keyword">SELECT</span> studentname <span class="keyword">FROM</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment">--别名，给结果起一个名字 AS 可以给字段，也可以给表起别名</span></span><br><span class="line"><span class="keyword">SELECT</span> studentname <span class="keyword">AS</span> 姓名 <span class="keyword">FROM</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment">--函数 CONCAT(a,b)</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;姓名：&#x27;</span>,studentname) <span class="keyword">FROM</span> student</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>语法： SELECT 字段,… FROM 表名</strong></p>
<blockquote>
<p>去重复：dist</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> studentno <span class="keyword">FROM</span> <span class="keyword">result</span> <span class="comment">--去掉重复数据查询</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-where条件字句"><a href="#3-3-where条件字句" class="headerlink" title="3.3 where条件字句"></a>3.3 where条件字句</h4><p>作用：<strong>检索数据中符合条件的值</strong>，返回值是布尔值</p>
<blockquote>
<p>逻辑运算符</p>
</blockquote>
<table>
<thead>
<tr>
<th>运算符</th>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>and   &amp;&amp;</td>
<td>a and b</td>
<td>与，都为真，结果为真</td>
</tr>
<tr>
<td>or   ||</td>
<td>a or b</td>
<td>或，一个为真，结果为真</td>
</tr>
<tr>
<td>not   !</td>
<td>not a</td>
<td>非，相反，真为假，假为真</td>
</tr>
</tbody></table>
<blockquote>
<p>模糊查询：比较运算符</p>
</blockquote>
<table>
<thead>
<tr>
<th>运算符</th>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>is null</td>
<td>a is null</td>
<td>如果操作符为null，结果为真</td>
</tr>
<tr>
<td>is not null</td>
<td>a is not null</td>
<td>如果操作符为not null，结果为真</td>
</tr>
<tr>
<td>between  and</td>
<td>a between b and c</td>
<td>若a在b和c之间为真</td>
</tr>
<tr>
<td>like</td>
<td>a like b，%表示多个，_表示一个</td>
<td>如果a匹配到b，则结果为真</td>
</tr>
<tr>
<td>in</td>
<td>a in (a1,a2,a3)</td>
<td>假设a在括号中，则结果为真</td>
</tr>
</tbody></table>
<h4 id="3-4-联表查询"><a href="#3-4-联表查询" class="headerlink" title="3.4 联表查询"></a>3.4 联表查询</h4><blockquote>
<p>JOIN on</p>
</blockquote>
<table>
<thead>
<tr>
<th>操作</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Inner join</td>
<td>如果表中至少有一个匹配，就返回行</td>
</tr>
<tr>
<td>right join</td>
<td>从右表中返回所有的值，即使右表中没有匹配</td>
</tr>
<tr>
<td>left join</td>
<td>从左表中返回所有的值，即使右表中没有匹配</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student.studentno,studentname,subjectno,studentresult </span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">ON</span> student.studentno <span class="operator">=</span> result.studentno</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> student.studentno,studentname,subjectno,studentresult </span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">ON</span> student.studentno <span class="operator">=</span> result.studentno</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> student.studentno,studentname,subjectno,studentresult </span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">ON</span> student.studentno <span class="operator">=</span> result.studentno</span><br></pre></td></tr></table></figure>

<blockquote>
<p>自连接：自己的表和自己的表连接，核心：一张表拆分为两张不一样的表</p>
</blockquote>
<h4 id="3-5-分页和排序"><a href="#3-5-分页和排序" class="headerlink" title="3.5 分页和排序"></a>3.5 分页和排序</h4><blockquote>
<p>排序</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--ORDER BY 字段 ASC(升序,默认) DESC(降序)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> student.studentname,studentresult </span><br><span class="line"><span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">ON</span> student.studentno <span class="operator">=</span> result.studentno</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> studentresult <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>分页    (n-1)*pageSize   n:当前页       总页数=数据总数/页面大小</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--分页，每页显示3条数据</span></span><br><span class="line"><span class="comment">--语法： LIMIT 起始值，页面的大小</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> student.studentname,studentresult </span><br><span class="line"><span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">ON</span> student.studentno <span class="operator">=</span> result.studentno</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> studentresult <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="4-MySQL函数"><a href="#4-MySQL函数" class="headerlink" title="4. MySQL函数"></a>4. MySQL函数</h3><h4 id="4-1-常用函数"><a href="#4-1-常用函数" class="headerlink" title="4.1 常用函数"></a>4.1 常用函数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--数学运算函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-8</span>)  <span class="comment">--绝对值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEILING</span>(<span class="number">9.4</span>)  <span class="comment">--向上取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">9.4</span>)  <span class="comment">--向下取整</span></span><br><span class="line"><span class="keyword">SELECT</span> RAND()  <span class="comment">--返回一个0~1之间的随机数</span></span><br><span class="line"><span class="keyword">SELECT</span> SIGN(<span class="number">-10</span>)  <span class="comment">--判断一个数的符号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--字符串函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>(<span class="string">&#x27;中国&#x27;</span>)  <span class="comment">--返回字符串长度</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;wo&#x27;</span>,<span class="string">&#x27;men&#x27;</span>)  <span class="comment">--拼接字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSERT</span>(<span class="string">&#x27;hello，world&#x27;</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="string">&#x27;00&#x27;</span>)  <span class="comment">--插入，替换</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOWER</span>(<span class="string">&#x27;ABCDEF&#x27;</span>)  <span class="comment">--转换为小写</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(<span class="string">&#x27;abcdef&#x27;</span>)  <span class="comment">--转换为大写</span></span><br><span class="line"><span class="keyword">SELECT</span> INSTR(<span class="string">&#x27;abcdef&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)  <span class="comment">--返回下标</span></span><br><span class="line"><span class="keyword">SELECT</span> REPLACE(<span class="string">&#x27;abcdef&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;000&#x27;</span>)  <span class="comment">--替换</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;abcdef&#x27;</span>,<span class="number">2</span>,<span class="number">2</span>)  <span class="comment">--返回指定的字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> REVERSE(<span class="string">&#x27;abcdef&#x27;</span>)  <span class="comment">--反转</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--时间和日期函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span>()  <span class="comment">--获取当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> CURDATE()  <span class="comment">--获取当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> NOW()  <span class="comment">--获取当前的时间日期</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOCALTIME</span>()  <span class="comment">--本地时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--系统</span></span><br><span class="line"><span class="keyword">SELECT</span> SYSDATE()  <span class="comment">--系统时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>()</span><br><span class="line"><span class="keyword">SELECT</span> VERSION()</span><br></pre></td></tr></table></figure>

<h4 id="4-2-聚合函数"><a href="#4-2-聚合函数" class="headerlink" title="4.2 聚合函数"></a>4.2 聚合函数</h4><table>
<thead>
<tr>
<th>函数名称</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>COUNT()</td>
<td>统计</td>
</tr>
<tr>
<td>SUM()</td>
<td>求和</td>
</tr>
<tr>
<td>AVG()</td>
<td>平均值</td>
</tr>
<tr>
<td>MAX()</td>
<td>最大值</td>
</tr>
<tr>
<td>MIN()</td>
<td>最小值</td>
</tr>
</tbody></table>
<h3 id="5-事务"><a href="#5-事务" class="headerlink" title="5. 事务"></a>5. 事务</h3><p><strong>要么都成功，要么都失败，</strong>将一组SQL放在一批次中去执行</p>
<blockquote>
<p>事务原则：ACID原则，原子性，一致性，隔离性，持久性</p>
</blockquote>
<ul>
<li>原子性(Atomicity)：要么都成功，要么都失败</li>
<li>一致性(Consistency)：事务前后的数据完整性保持一致</li>
<li>持久性(Durability)：事务一旦提交不可逆，被持久化到数据库中</li>
<li>隔离性(Isolation)：事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所以事务之间要相互隔离</li>
</ul>
<blockquote>
<p>隔离导致的一些问题：</p>
<p>脏读：指一个事务读取了另外一个事务未提交的数据</p>
<p>不可重复读：在一个事务内读取表中的某一行数据，多次读取结果不同。</p>
<p>虚读(幻读)：指在一个事务读取到了别的事务插入的数据，导致前后读取不一致。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- mysql 是默认开启事务自动提交的</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>  <span class="comment">/*关闭*/</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>  <span class="comment">/*开启(默认)*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 手动处理事务</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>  <span class="comment">-- 关闭自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务开启</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION  <span class="comment">-- 标记一个事务的开始，从这个之后的sql都在同一个事务内</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> xx</span><br><span class="line"><span class="keyword">INSERT</span> xx</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交：持久化(成功)</span></span><br><span class="line"><span class="keyword">COMMIT</span></span><br><span class="line"><span class="comment">-- 回滚：回到原来的样子（失败）</span></span><br><span class="line"><span class="keyword">ROLLBACK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务结束</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>  <span class="comment">-- 开启自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 了解</span></span><br><span class="line"><span class="keyword">SAVEPOINT</span> 保存点名 <span class="comment">-- 设置一个事务的保存点</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> 保存点名  <span class="comment">-- 回滚到保存点</span></span><br><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span>  保存点名  <span class="comment">-- 撤销保存点</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>模拟转账，事务</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE shop <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci</span><br><span class="line">USE shop</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account`(</span><br><span class="line">	`id` <span class="type">INT</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">	`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	`money` <span class="type">DECIMAL</span>(<span class="number">9</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">)ENGINE <span class="operator">=</span> INNODB <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account(`name`,`money`)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;A&#x27;</span>,<span class="number">2000.00</span>),(<span class="string">&#x27;B&#x27;</span>,<span class="number">10000.00</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> account</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 模拟转账：事务</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>  <span class="comment">-- 关闭自动提交</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION  <span class="comment">-- 开启一个事务</span></span><br><span class="line"></span><br><span class="line">UPDATE account <span class="keyword">SET</span> money <span class="operator">=</span> money <span class="number">-500</span> <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span> <span class="comment">-- A减500</span></span><br><span class="line">UPDATE account <span class="keyword">SET</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">500</span> <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;B&#x27;</span>  <span class="comment">-- A加500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;  <span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>; <span class="comment">-- 回滚</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">-- 恢复默认值</span></span><br></pre></td></tr></table></figure>

<h3 id="6-索引"><a href="#6-索引" class="headerlink" title="6.索引"></a>6.索引</h3><blockquote>
<p>MySQL官方对索引的定义为：索引（Index）是帮助MySQL高效地获取数据的数据结构，</p>
<p>提取句子主干，就可以得到索引的本质：索引就是数据结构</p>
</blockquote>
<h4 id="6-1-索引的分类"><a href="#6-1-索引的分类" class="headerlink" title="6.1 索引的分类"></a>6.1 索引的分类</h4><blockquote>
<p>在一个表中，主键索引只能有一个，唯一索引可以有多个</p>
</blockquote>
<ul>
<li>主键索引(PRIMARY KEY)<ul>
<li>唯一标识，主键不可重复，只能有一个列作为主键</li>
</ul>
</li>
<li>唯一索引(UNIQUE KEY)<ul>
<li>避免重复的列出现，可以重复，多个列都可以标识为唯一索引</li>
</ul>
</li>
<li>常规索引(KEY/INDEX)<ul>
<li>默认的，index，key关键字来设置</li>
</ul>
</li>
<li>全文索引(FullText)<ul>
<li>在特定的数据库引擎下采用，快速定位数据</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span><span class="operator">|</span>FULLTEXT<span class="operator">|</span>SPATIAL] INDEX 索引名 </span><br><span class="line">[index_type] </span><br><span class="line"><span class="keyword">ON</span> 表明 (index_col_name,...) </span><br><span class="line">[index_type] </span><br><span class="line"><span class="comment">------</span></span><br><span class="line">index_col_name: </span><br><span class="line">col_name [(length)] [<span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span>]</span><br><span class="line"></span><br><span class="line">index_type: </span><br><span class="line"><span class="keyword">USING</span> &#123;BTREE <span class="operator">|</span> HASH <span class="operator">|</span> RTREE&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-2-索引原则"><a href="#6-2-索引原则" class="headerlink" title="6.2 索引原则"></a>6.2 索引原则</h4><ul>
<li>索引不是越多越好</li>
<li>不要给经常变动的数据加索引</li>
<li>小数据量的表需要加索引</li>
<li>索引一般加在常用来查询的字段上</li>
</ul>
<h3 id="7-权限管理和备份"><a href="#7-权限管理和备份" class="headerlink" title="7.权限管理和备份"></a>7.权限管理和备份</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建用户 CREATE USER 用户名 IDENTIFIED BY &#x27;密码&#x27;</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> lili IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改密码（修改当前用户密码）</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="operator">=</span> PASSWORD(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改指定用户密码</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> li <span class="operator">=</span> PASSWORD(<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 重命名  rename user 原来名字 to 新的名字</span></span><br><span class="line">RENAME <span class="keyword">USER</span> li <span class="keyword">TO</span> li1</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户授权  ALL PRIVILEGES  全部的权限 ,库.表</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> li1</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询权限</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> li1   <span class="comment">-- 查看指定用户的权限</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span>  root<span class="variable">@localhost</span>  <span class="comment">-- 查看root用户的权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 撤销权限 REVOKE</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">FROM</span>  li1</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> lili</span><br></pre></td></tr></table></figure>

<h3 id="8-JDBC"><a href="#8-JDBC" class="headerlink" title="8. JDBC"></a>8. JDBC</h3><h4 id="8-1-JDBC驱动"><a href="#8-1-JDBC驱动" class="headerlink" title="8.1 JDBC驱动"></a>8.1 JDBC驱动</h4><p><img src="https://img-blog.csdnimg.cn/20200814130455681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjE5MzQ4,size_16,color_FFFFFF,t_70#pic_center"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">lesson01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>); <span class="comment">//固定写法，加载驱动</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.用户信息 url</span></span><br><span class="line">        <span class="comment">//useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true 1.设置中文编码,2.设置utf8,3.安全连接</span></span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/study?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span>;</span><br><span class="line">        String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.连接成功，数据库对象 Connection代表数据库</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.执行SQL的对象 Statement执行sql的对象</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.执行SQL的对象,可能存在结果，查看返回结果</span></span><br><span class="line">        String sql = <span class="string">&quot;select * from users&quot;</span>;</span><br><span class="line">        ResultSet resultSet = statement.executeQuery(sql);<span class="comment">//返回的结果集合,结果集中封装了全部查询出来的结果</span></span><br><span class="line">        <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;id=&quot;</span>+resultSet.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;name=&quot;</span>+resultSet.getObject(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;password=&quot;</span>+resultSet.getObject(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;email=&quot;</span>+resultSet.getObject(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;birthday=&quot;</span>+resultSet.getObject(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.释放连接</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>连接数据库步骤：</p>
<pre><code>1. 加载驱动
2. 连接数据库DriverManager
3. 获得执行sql的对象  Statement
4. 获得返回的结果集
5. 释放连接
</code></pre>
<blockquote>
<p>DriverManager</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DriverManager.registerDriver(new com.mysql.jdbc.Driver);</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>); <span class="comment">//固定写法，加载驱动</span></span><br><span class="line"></span><br><span class="line">Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"><span class="comment">//connection  代表数据库</span></span><br><span class="line"><span class="comment">//数据库设置自动提交		connection.setAutoCommit();</span></span><br><span class="line"><span class="comment">//事务提交		connection.commit();</span></span><br><span class="line"><span class="comment">//事务回滚		connection.rollback();</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>URL</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String url = <span class="string">&quot;jdbc:mysql://localhost:3306/study?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true 1.设置中文编码,2.设置utf8,3.安全连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//mysql  -- 端口号：3306</span></span><br><span class="line"><span class="comment">//jdbc:mysql://主机地址:端口号/数据库名?参数1&amp;参数2&amp;参数3</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Statement    具体执行sql的对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">statement.executeQuery();	<span class="comment">//查询操作返回ResultSet</span></span><br><span class="line">statement.execute();		<span class="comment">//执行任何SQL</span></span><br><span class="line">statement.executeUpdate();	<span class="comment">//更新，插入，删除，都用这个，返回一个受影响的行数</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>ResultSet    查询的结果集，封装了所有的查询结果</p>
</blockquote>
<p>获得指定的结果集</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resultSet.getObject();	<span class="comment">//在不知列类型的情况下使用</span></span><br><span class="line"><span class="comment">//如果知道列类型使用指定的类型</span></span><br><span class="line">resultSet.getString();	</span><br><span class="line">resultSet.getInt();</span><br><span class="line">resultSet.getFloat();</span><br><span class="line">resultSet.getDate();</span><br><span class="line">resultSet.get ... </span><br></pre></td></tr></table></figure>

<p>遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resultSet.beforeFirst();		<span class="comment">//移动到最前面</span></span><br><span class="line">resultSet.afterLast();			<span class="comment">//移动到最后面</span></span><br><span class="line">resultSet.next();				<span class="comment">//移动到下一个数据</span></span><br><span class="line">resultSet.previous();			<span class="comment">//移动到前一行</span></span><br><span class="line">resultSet.absolute(row);		<span class="comment">//移动到指定行</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>释放资源</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resultSet.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close();	<span class="comment">//比较耗费资源，全部关闭</span></span><br></pre></td></tr></table></figure>

<h4 id="8-2-statement对象"><a href="#8-2-statement对象" class="headerlink" title="8.2 statement对象"></a>8.2 statement对象</h4><p>JDBC中的statement对象用于向数据库发送SQL语句，想完成对数据库的增删改查，只需要通过这个对象向数据库发送增删改查语句即可。</p>
<p>Statement对象的executeUpdate方法，用于向数据库发送增、删、改的sql语句，executeUpdate执行后，将会返回一个整数(即增删改语句导致了数据库几行数据发生了变化)。</p>
<p>Statement.executeQuery方法用于向数据库发送查询语句，executeQuery方法返回代表查询结果的ResultSet对象。</p>
<blockquote>
<p>insert 增</p>
</blockquote>
<p>使用executeUpdate(String sql)方法完成数据添加操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement st = connection.createStatement();</span><br><span class="line">String sql = <span class="string">&quot;inser into user() values ()&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> num = st.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;插入成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>delete 删</p>
</blockquote>
<p>使用executeUpdate(String sql)方法完成数据删除操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement st = connection.createStatement();</span><br><span class="line">String sql = <span class="string">&quot;delete * from users where id = ?&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> num = st.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>update 改</p>
</blockquote>
<p>使用executeUpdate(String sql)方法完成数据修改操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement st = connection.createStatement();</span><br><span class="line">String sql = <span class="string">&quot;update user set name = &#x27;&#x27; where name = &#x27;&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> num = st.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>query 查询</p>
</blockquote>
<p>使用executeQuery(String sql)方法完成数据查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement st = connection.createStatement();</span><br><span class="line">String sql = <span class="string">&quot;select * from user where id = 1&quot;</span>;</span><br><span class="line">ResultSet rs = st.executeQuery(sql);</span><br><span class="line"><span class="keyword">while</span>(re.next())&#123;</span><br><span class="line">    <span class="comment">//根据获取列的数据类型，分别调用rs的相应方法映射到java对象中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="8-3-封装工具类"><a href="#8-3-封装工具类" class="headerlink" title="8.3 封装工具类"></a>8.3 封装工具类</h4><blockquote>
<p>用户信息    db.properties 类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">driver = com.mysql.jdbc.Driver</span><br><span class="line">url = jdbc:mysql:<span class="comment">//localhost:3306/study?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span></span><br><span class="line">username = root</span><br><span class="line">password = root</span><br></pre></td></tr></table></figure>

<blockquote>
<p>连接工具类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jdbcUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String username = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            InputStream in = jdbcUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(in);</span><br><span class="line"></span><br><span class="line">            driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">            url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            username = properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">            password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.驱动只需要加载一次</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放连接资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Connection conn, Statement st, ResultSet rs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (st != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>test   insert   , delete  ,update  与之类似，只需修改sql语句就行</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.lfsfxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdbcUtils.jdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.获取数据库连接</span></span><br><span class="line">            conn = jdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//2.获得SQL的执行对象</span></span><br><span class="line">            st = conn.createStatement();</span><br><span class="line"></span><br><span class="line">            String sql = <span class="string">&quot;INSERT INTO users (id,name,password,email,birthday) VALUES (4,&#x27;zhao&#x27;,&#x27;123456&#x27;,&#x27;zhao@qq.com&#x27;,&#x27;2020-04-04&#x27;)&quot;</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> i = st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            jdbcUtils.release(conn, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>test   query  </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.lfsfxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdbcUtils.jdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.获取数据库连接</span></span><br><span class="line">            conn = jdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//2.获得SQL的执行对象</span></span><br><span class="line">            st = conn.createStatement();</span><br><span class="line">            </span><br><span class="line">            String sql = <span class="string">&quot;select * from users&quot;</span>;</span><br><span class="line"></span><br><span class="line">            rs = st.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                System.out.println(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            jdbcUtils.release(conn, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="8-4-PreparedStatement对象"><a href="#8-4-PreparedStatement对象" class="headerlink" title="8.4 PreparedStatement对象"></a>8.4 PreparedStatement对象</h4><p>可以防止SQL注入，效率更好</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.lfsfxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdbcUtils.jdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testinsert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = jdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//区别</span></span><br><span class="line">            String sql = <span class="string">&quot;INSERT INTO users (id,name,password,email,birthday) VALUES (?,?,?,?,?)&quot;</span>;</span><br><span class="line"></span><br><span class="line">            st = conn.prepareStatement(sql);<span class="comment">//预编译SQL,先写sql，然后不执行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">            st.setString(<span class="number">2</span>, <span class="string">&quot;zhao&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">3</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">4</span>, <span class="string">&quot;zhoa@qq.com&quot;</span>);</span><br><span class="line">            st.setDate(<span class="number">5</span>, <span class="keyword">new</span> java.sql.Date(<span class="keyword">new</span> Date().getTime()));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i = st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            jdbcUtils.release(conn, st,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.bilibili.com/video/BV1NJ411J79W?p=1">本章知识学习自</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
